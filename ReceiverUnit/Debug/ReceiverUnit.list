
ReceiverUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003278  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080033b4  080033b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  08003468  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000384  20000014  08003474  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000398  08003474  00020398  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011828  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029a1  00000000  00000000  000318af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  00034250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001002  00000000  00000000  00035788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002180d  00000000  00000000  0003678a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011e57  00000000  00000000  00057f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d89c4  00000000  00000000  00069dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000587c  00000000  00000000  001427b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000061  00000000  00000000  00148030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	0800339c 	.word	0x0800339c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	0800339c 	.word	0x0800339c

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f000 fb76 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f842 	bl	8000240 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001bc:	f000 f8b0 	bl	8000320 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f964 	bl	800048c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80001c4:	f000 f93a 	bl	800043c <MX_USB_PCD_Init>
  MX_RTC_Init();
 80001c8:	f000 f8c8 	bl	800035c <MX_RTC_Init>
  MX_SPI1_Init();
 80001cc:	f000 f8f8 	bl	80003c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != 0){
 80001d0:	4b18      	ldr	r3, [pc, #96]	; (8000234 <main+0x84>)
 80001d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d009      	beq.n	80001f2 <main+0x42>
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80001de:	4b15      	ldr	r3, [pc, #84]	; (8000234 <main+0x84>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 80001e6:	2001      	movs	r0, #1
 80001e8:	f000 ffc0 	bl	800116c <HAL_PWR_DisableWakeUpPin>
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80001ec:	4812      	ldr	r0, [pc, #72]	; (8000238 <main+0x88>)
 80001ee:	f002 ff3f 	bl	8003070 <HAL_RTCEx_DeactivateWakeUpTimer>
  }

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <main+0x84>)
 80001f4:	221f      	movs	r2, #31
 80001f6:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80001f8:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <main+0x88>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	68db      	ldr	r3, [r3, #12]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <main+0x88>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000208:	60da      	str	r2, [r3, #12]

  //HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2710, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800020a:	2200      	movs	r2, #0
 800020c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000210:	4809      	ldr	r0, [pc, #36]	; (8000238 <main+0x88>)
 8000212:	f002 fe71 	bl	8002ef8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <main+0x70>
  {
    Error_Handler();
 800021c:	f000 f95e 	bl	80004dc <Error_Handler>
  }


  HAL_PWR_EnterSTANDBYMode();
 8000220:	f000 ffba 	bl	8001198 <HAL_PWR_EnterSTANDBYMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000224:	2101      	movs	r1, #1
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <main+0x8c>)
 8000228:	f000 fe7e 	bl	8000f28 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 800022c:	20c8      	movs	r0, #200	; 0xc8
 800022e:	f000 fbbf 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000232:	e7f7      	b.n	8000224 <main+0x74>
 8000234:	58000400 	.word	0x58000400
 8000238:	20000030 	.word	0x20000030
 800023c:	48000400 	.word	0x48000400

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b09a      	sub	sp, #104	; 0x68
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0320 	add.w	r3, r7, #32
 800024a:	2248      	movs	r2, #72	; 0x48
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f003 f878 	bl	8003344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000274:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	f023 0303 	bic.w	r3, r3, #3
 8000280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <SystemClock_Config+0xdc>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000292:	4a22      	ldr	r2, [pc, #136]	; (800031c <SystemClock_Config+0xdc>)
 8000294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000298:	6013      	str	r3, [r2, #0]
 800029a:	4b20      	ldr	r3, [pc, #128]	; (800031c <SystemClock_Config+0xdc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80002a6:	232e      	movs	r3, #46	; 0x2e
 80002a8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80002aa:	2300      	movs	r3, #0
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	2340      	movs	r3, #64	; 0x40
 80002ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002bc:	2300      	movs	r3, #0
 80002be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002c0:	2360      	movs	r3, #96	; 0x60
 80002c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002c4:	2305      	movs	r3, #5
 80002c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	2300      	movs	r3, #0
 80002ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0320 	add.w	r3, r7, #32
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 faed 	bl	80018b0 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002dc:	f000 f8fe 	bl	80004dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002e0:	236f      	movs	r3, #111	; 0x6f
 80002e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e4:	2301      	movs	r3, #1
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f001 fe49 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800030c:	f000 f8e6 	bl	80004dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000310:	f002 fbda 	bl	8002ac8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000314:	bf00      	nop
 8000316:	3768      	adds	r7, #104	; 0x68
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	58000400 	.word	0x58000400

08000320 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b094      	sub	sp, #80	; 0x50
 8000324:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000326:	463b      	mov	r3, r7
 8000328:	2250      	movs	r2, #80	; 0x50
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f003 f809 	bl	8003344 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000336:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000338:	2300      	movs	r3, #0
 800033a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800033c:	2300      	movs	r3, #0
 800033e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fa4a 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800034e:	f000 f8c5 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000352:	bf00      	nop
 8000354:	3750      	adds	r7, #80	; 0x50
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_RTC_Init+0x5c>)
 8000362:	4a16      	ldr	r2, [pc, #88]	; (80003bc <MX_RTC_Init+0x60>)
 8000364:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_RTC_Init+0x5c>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_RTC_Init+0x5c>)
 800036e:	227f      	movs	r2, #127	; 0x7f
 8000370:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_RTC_Init+0x5c>)
 8000374:	22ff      	movs	r2, #255	; 0xff
 8000376:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_RTC_Init+0x5c>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_RTC_Init+0x5c>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_RTC_Init+0x5c>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_RTC_Init+0x5c>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <MX_RTC_Init+0x5c>)
 8000392:	f002 fcb1 	bl	8002cf8 <HAL_RTC_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800039c:	f000 f89e 	bl	80004dc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80003a0:	2200      	movs	r2, #0
 80003a2:	2100      	movs	r1, #0
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <MX_RTC_Init+0x5c>)
 80003a6:	f002 fda7 	bl	8002ef8 <HAL_RTCEx_SetWakeUpTimer_IT>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80003b0:	f000 f894 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000030 	.word	0x20000030
 80003bc:	40002800 	.word	0x40002800

080003c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_SPI1_Init+0x74>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_SPI1_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_SPI1_Init+0x74>)
 80003cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_SPI1_Init+0x74>)
 80003d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_SPI1_Init+0x74>)
 80003dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_SPI1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_SPI1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_SPI1_Init+0x74>)
 80003f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_SPI1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <MX_SPI1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_SPI1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <MX_SPI1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_SPI1_Init+0x74>)
 8000410:	2207      	movs	r2, #7
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <MX_SPI1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_SPI1_Init+0x74>)
 800041c:	2208      	movs	r2, #8
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000420:	4804      	ldr	r0, [pc, #16]	; (8000434 <MX_SPI1_Init+0x74>)
 8000422:	f002 feb3 	bl	800318c <HAL_SPI_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800042c:	f000 f856 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000054 	.word	0x20000054
 8000438:	40013000 	.word	0x40013000

0800043c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_USB_PCD_Init+0x48>)
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <MX_USB_PCD_Init+0x4c>)
 8000444:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_USB_PCD_Init+0x48>)
 8000448:	2208      	movs	r2, #8
 800044a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <MX_USB_PCD_Init+0x48>)
 800044e:	2202      	movs	r2, #2
 8000450:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USB_PCD_Init+0x48>)
 8000454:	2202      	movs	r2, #2
 8000456:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <MX_USB_PCD_Init+0x48>)
 800045a:	2200      	movs	r2, #0
 800045c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USB_PCD_Init+0x48>)
 8000460:	2200      	movs	r2, #0
 8000462:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <MX_USB_PCD_Init+0x48>)
 8000466:	2200      	movs	r2, #0
 8000468:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USB_PCD_Init+0x48>)
 800046c:	2200      	movs	r2, #0
 800046e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_USB_PCD_Init+0x48>)
 8000472:	f000 fd73 	bl	8000f5c <HAL_PCD_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800047c:	f000 f82e 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000b8 	.word	0x200000b8
 8000488:	40006800 	.word	0x40006800

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff fe6b 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	2002      	movs	r0, #2
 80004a8:	f7ff fe68 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2101      	movs	r1, #1
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <MX_GPIO_Init+0x4c>)
 80004b2:	f000 fd21 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004b6:	2301      	movs	r3, #1
 80004b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2300      	movs	r3, #0
 80004c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4803      	ldr	r0, [pc, #12]	; (80004d8 <MX_GPIO_Init+0x4c>)
 80004cc:	f000 fba4 	bl	8000c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	48000400 	.word	0x48000400

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>

080004e6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80004ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <LL_AHB2_GRP1_EnableClock>:
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000514:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4013      	ands	r3, r2
 800052a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052c:	68fb      	ldr	r3, [r7, #12]
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800053a:	b480      	push	{r7}
 800053c:	b085      	sub	sp, #20
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000546:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4313      	orrs	r3, r2
 8000550:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000556:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4013      	ands	r3, r2
 800055c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800057a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4313      	orrs	r3, r2
 8000582:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4013      	ands	r3, r2
 800058e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000590:	68fb      	ldr	r3, [r7, #12]
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b096      	sub	sp, #88	; 0x58
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2250      	movs	r2, #80	; 0x50
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fec1 	bl	8003344 <memset>
  if(hrtc->Instance==RTC)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <HAL_RTC_MspInit+0x68>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d11f      	bne.n	800060c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80005cc:	f000 fdbe 	bl	800114c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005d4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f8fb 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80005ec:	f7ff ff76 	bl	80004dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005f0:	f7ff ff79 	bl	80004e6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80005f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80005f8:	f7ff ff9f 	bl	800053a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2003      	movs	r0, #3
 8000602:	f000 fad4 	bl	8000bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000606:	2003      	movs	r0, #3
 8000608:	f000 faeb 	bl	8000be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	; 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40002800 	.word	0x40002800

08000618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <HAL_SPI_MspInit+0x5c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d117      	bne.n	800066a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800063a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800063e:	f7ff ff95 	bl	800056c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff ff60 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000648:	2370      	movs	r3, #112	; 0x70
 800064a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000658:	2305      	movs	r3, #5
 800065a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4619      	mov	r1, r3
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f000 fad7 	bl	8000c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40013000 	.word	0x40013000

08000678 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	; 0x70
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2250      	movs	r2, #80	; 0x50
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fe53 	bl	8003344 <memset>
  if(hpcd->Instance==USB)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <HAL_PCD_MspInit+0xa8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d136      	bne.n	8000716 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80006ae:	2318      	movs	r3, #24
 80006b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80006b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80006b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80006be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80006c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006c8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 f881 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80006e0:	f7ff fefc 	bl	80004dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff0f 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80006fc:	230a      	movs	r3, #10
 80006fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000704:	4619      	mov	r1, r3
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f000 fa85 	bl	8000c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800070e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000712:	f7ff ff12 	bl	800053a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3770      	adds	r7, #112	; 0x70
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40006800 	.word	0x40006800

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <MemManage_Handler+0x4>

08000736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <UsageFault_Handler+0x4>

08000742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f8f2 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <RTC_WKUP_IRQHandler+0x10>)
 800077e:	f002 fcd5 	bl	800312c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000030 	.word	0x20000030

0800078c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <SystemInit+0x98>)
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	4a23      	ldr	r2, [pc, #140]	; (8000824 <SystemInit+0x98>)
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80007b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80007b8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80007ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <SystemInit+0x9c>)
 80007c6:	4013      	ands	r3, r2
 80007c8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80007ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007d6:	f023 0305 	bic.w	r3, r3, #5
 80007da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ea:	f023 0301 	bic.w	r3, r3, #1
 80007ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	4a0d      	ldr	r2, [pc, #52]	; (800082c <SystemInit+0xa0>)
 80007f8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80007fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <SystemInit+0xa0>)
 8000800:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800080c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000810:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	faf6fefb 	.word	0xfaf6fefb
 800082c:	22041000 	.word	0x22041000

08000830 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000830:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000832:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000834:	3304      	adds	r3, #4

08000836 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000836:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000838:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800083a:	d3f9      	bcc.n	8000830 <CopyDataInit>
  bx lr
 800083c:	4770      	bx	lr

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800083e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000840:	3004      	adds	r0, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000842:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>
  bx lr
 8000846:	4770      	bx	lr

08000848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff ff9e 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <LoopForever+0x6>)
 8000852:	490c      	ldr	r1, [pc, #48]	; (8000884 <LoopForever+0xa>)
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <LoopForever+0xe>)
 8000856:	2300      	movs	r3, #0
 8000858:	f7ff ffed 	bl	8000836 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <LoopForever+0x12>)
 800085e:	490c      	ldr	r1, [pc, #48]	; (8000890 <LoopForever+0x16>)
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <LoopForever+0x1a>)
 8000862:	2300      	movs	r3, #0
 8000864:	f7ff ffe7 	bl	8000836 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <LoopForever+0x1e>)
 800086a:	490c      	ldr	r1, [pc, #48]	; (800089c <LoopForever+0x22>)
 800086c:	2300      	movs	r3, #0
 800086e:	f7ff ffe8 	bl	8000842 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000872:	f002 fd6f 	bl	8003354 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000876:	f7ff fc9b 	bl	80001b0 <main>

0800087a <LoopForever>:

LoopForever:
  b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000880:	20000008 	.word	0x20000008
 8000884:	20000014 	.word	0x20000014
 8000888:	08003468 	.word	0x08003468
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800088c:	20030000 	.word	0x20030000
 8000890:	20030000 	.word	0x20030000
 8000894:	08003474 	.word	0x08003474
  INIT_BSS _sbss, _ebss
 8000898:	20000014 	.word	0x20000014
 800089c:	20000398 	.word	0x20000398

080008a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_Init+0x3c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <HAL_Init+0x3c>)
 80008b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ba:	2003      	movs	r0, #3
 80008bc:	f000 f96c 	bl	8000b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 f80f 	bl	80008e4 <HAL_InitTick>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	e001      	b.n	80008d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d2:	f7ff fe64 	bl	800059e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58004000 	.word	0x58004000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_InitTick+0x6c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d024      	beq.n	8000942 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f8:	f001 fcfc 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 80008fc:	4602      	mov	r2, r0
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_InitTick+0x6c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000908:	fbb3 f3f1 	udiv	r3, r3, r1
 800090c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f974 	bl	8000bfe <HAL_SYSTICK_Config>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10f      	bne.n	800093c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b0f      	cmp	r3, #15
 8000920:	d809      	bhi.n	8000936 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000922:	2200      	movs	r2, #0
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	f04f 30ff 	mov.w	r0, #4294967295
 800092a:	f000 f940 	bl	8000bae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_InitTick+0x70>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	e007      	b.n	8000946 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	e004      	b.n	8000946 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e001      	b.n	8000946 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000010 	.word	0x20000010
 8000954:	2000000c 	.word	0x2000000c

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000010 	.word	0x20000010
 800097c:	20000394 	.word	0x20000394

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000394 	.word	0x20000394

08000998 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTickPrio+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	2000000c 	.word	0x2000000c

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff ffe2 	bl	8000980 <HAL_GetTick>
 80009bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_Delay+0x44>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d6:	bf00      	nop
 80009d8:	f7ff ffd2 	bl	8000980 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000010 	.word	0x20000010

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4907      	ldr	r1, [pc, #28]	; (8000a94 <__NVIC_EnableIRQ+0x38>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b64:	d301      	bcc.n	8000b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00f      	b.n	8000b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <SysTick_Config+0x40>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b72:	210f      	movs	r1, #15
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f7ff ff8e 	bl	8000a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <SysTick_Config+0x40>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <SysTick_Config+0x40>)
 8000b84:	2207      	movs	r2, #7
 8000b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	e000e010 	.word	0xe000e010

08000b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff29 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff40 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ff90 	bl	8000aec <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff5f 	bl	8000a98 <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff33 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffa4 	bl	8000b54 <SysTick_Config>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c26:	e14c      	b.n	8000ec2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 813e 	beq.w	8000ebc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d005      	beq.n	8000c58 <HAL_GPIO_Init+0x40>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d130      	bne.n	8000cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	f003 0201 	and.w	r2, r3, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d017      	beq.n	8000cf6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d123      	bne.n	8000d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	691a      	ldr	r2, [r3, #16]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	6939      	ldr	r1, [r7, #16]
 8000d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0203 	and.w	r2, r3, #3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8098 	beq.w	8000ebc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d8c:	4a54      	ldr	r2, [pc, #336]	; (8000ee0 <HAL_GPIO_Init+0x2c8>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000db6:	d019      	beq.n	8000dec <HAL_GPIO_Init+0x1d4>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a4a      	ldr	r2, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d013      	beq.n	8000de8 <HAL_GPIO_Init+0x1d0>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d00d      	beq.n	8000de4 <HAL_GPIO_Init+0x1cc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a48      	ldr	r2, [pc, #288]	; (8000eec <HAL_GPIO_Init+0x2d4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d007      	beq.n	8000de0 <HAL_GPIO_Init+0x1c8>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a47      	ldr	r2, [pc, #284]	; (8000ef0 <HAL_GPIO_Init+0x2d8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d101      	bne.n	8000ddc <HAL_GPIO_Init+0x1c4>
 8000dd8:	2304      	movs	r3, #4
 8000dda:	e008      	b.n	8000dee <HAL_GPIO_Init+0x1d6>
 8000ddc:	2307      	movs	r3, #7
 8000dde:	e006      	b.n	8000dee <HAL_GPIO_Init+0x1d6>
 8000de0:	2303      	movs	r3, #3
 8000de2:	e004      	b.n	8000dee <HAL_GPIO_Init+0x1d6>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e002      	b.n	8000dee <HAL_GPIO_Init+0x1d6>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <HAL_GPIO_Init+0x1d6>
 8000dec:	2300      	movs	r3, #0
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	f002 0203 	and.w	r2, r2, #3
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	4093      	lsls	r3, r2
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dfe:	4938      	ldr	r1, [pc, #224]	; (8000ee0 <HAL_GPIO_Init+0x2c8>)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e0c:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e30:	4a30      	ldr	r2, [pc, #192]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e5a:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e86:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f47f aeab 	bne.w	8000c28 <HAL_GPIO_Init+0x10>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	48000800 	.word	0x48000800
 8000eec:	48000c00 	.word	0x48000c00
 8000ef0:	48001000 	.word	0x48001000
 8000ef4:	58000800 	.word	0x58000800

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	041a      	lsls	r2, r3, #16
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43d9      	mvns	r1, r3
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	400b      	ands	r3, r1
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	619a      	str	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e0c0      	b.n	80010f0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d106      	bne.n	8000f88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fb78 	bl	8000678 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 f99c 	bl	80032d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e03e      	b.n	800101e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3311      	adds	r3, #17
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	3310      	adds	r3, #16
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3313      	adds	r3, #19
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3320      	adds	r3, #32
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3324      	adds	r3, #36	; 0x24
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	3301      	adds	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	791b      	ldrb	r3, [r3, #4]
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3bb      	bcc.n	8000fa0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e044      	b.n	80010b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	f203 1353 	addw	r3, r3, #339	; 0x153
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	3301      	adds	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	791b      	ldrb	r3, [r3, #4]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3b5      	bcc.n	800102e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010ce:	f002 f91b 	bl	8003308 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7a9b      	ldrb	r3, [r3, #10]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d102      	bne.n	80010ee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f805 	bl	80010f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800111c:	b29b      	uxth	r3, r3
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	b29a      	uxth	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001130:	b29b      	uxth	r3, r3
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	58000400 	.word	0x58000400

0800116c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN4: An event on PA2   PIN wakes-up the system from Standby mode.
  *           @arg PWR_WAKEUP_PIN5: An event on PC5   PIN wakes-up the system from Standby mode.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 031f 	and.w	r3, r3, #31
 800117e:	43db      	mvns	r3, r3
 8001180:	4904      	ldr	r1, [pc, #16]	; (8001194 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001182:	4013      	ands	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	58000400 	.word	0x58000400

08001198 <HAL_PWR_EnterSTANDBYMode>:
  * @note  According to system power policy, system entering in Standby mode
  *        is depending on other CPU power mode.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_PWR_EnterSTANDBYMode+0x38>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 0307 	bic.w	r3, r3, #7
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_PWR_EnterSTANDBYMode+0x38>)
 80011a6:	f043 0303 	orr.w	r3, r3, #3
 80011aa:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_PWR_EnterSTANDBYMode+0x3c>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_PWR_EnterSTANDBYMode+0x3c>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 80011b8:	bf30      	wfi

  /* Following code is executed after wake up if system did not go to STANDBY
     mode according to system power policy */

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_PWR_EnterSTANDBYMode+0x3c>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <HAL_PWR_EnterSTANDBYMode+0x3c>)
 80011c0:	f023 0304 	bic.w	r3, r3, #4
 80011c4:	6113      	str	r3, [r2, #16]
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	58000400 	.word	0x58000400
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	58000400 	.word	0x58000400

080011f4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001206:	d101      	bne.n	800120c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_RCC_HSE_Enable>:
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_RCC_HSE_Disable>:
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800123a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_RCC_HSE_IsReady>:
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001266:	d101      	bne.n	800126c <LL_RCC_HSE_IsReady+0x18>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_RCC_HSE_IsReady+0x1a>
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_RCC_HSI_Enable>:
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_RCC_HSI_Disable>:
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a8:	6013      	str	r3, [r2, #0]
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_RCC_HSI_IsReady>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c6:	d101      	bne.n	80012cc <LL_RCC_HSI_IsReady+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_RCC_HSI_IsReady+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_RCC_HSI48_Enable>:
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_RCC_HSI48_Disable>:
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_RCC_HSI48_IsReady>:
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b02      	cmp	r3, #2
 8001358:	d101      	bne.n	800135e <LL_RCC_HSI48_IsReady+0x18>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <LL_RCC_HSI48_IsReady+0x1a>
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_RCC_LSE_Enable>:
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800136e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_RCC_LSE_Disable>:
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_RCC_LSE_EnableBypass>:
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_RCC_LSE_DisableBypass>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_RCC_LSE_IsReady>:
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80013f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b02      	cmp	r3, #2
 8001404:	d101      	bne.n	800140a <LL_RCC_LSE_IsReady+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_RCC_LSE_IsReady+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_RCC_LSI1_Enable>:
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800141a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_RCC_LSI1_Disable>:
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_RCC_LSI1_IsReady>:
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b02      	cmp	r3, #2
 800146c:	d101      	bne.n	8001472 <LL_RCC_LSI1_IsReady+0x18>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <LL_RCC_LSI1_IsReady+0x1a>
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_RCC_LSI2_Enable>:
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_RCC_LSI2_Disable>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_RCC_LSI2_IsReady>:
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d101      	bne.n	80014da <LL_RCC_LSI2_IsReady+0x18>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <LL_RCC_LSI2_IsReady+0x1a>
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_RCC_LSI2_SetTrimming>:
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001502:	4313      	orrs	r3, r2
 8001504:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_RCC_MSI_Enable>:
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_RCC_MSI_Disable>:
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6013      	str	r3, [r2, #0]
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_RCC_MSI_IsReady>:
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b02      	cmp	r3, #2
 8001560:	d101      	bne.n	8001566 <LL_RCC_MSI_IsReady+0x16>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <LL_RCC_MSI_IsReady+0x18>
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_RCC_MSI_SetRange>:
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_RCC_MSI_GetRange>:
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015aa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2bb0      	cmp	r3, #176	; 0xb0
 80015b0:	d901      	bls.n	80015b6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80015b2:	23b0      	movs	r3, #176	; 0xb0
 80015b4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80015b6:	687b      	ldr	r3, [r7, #4]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_RCC_SetSysClkSource>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 0203 	bic.w	r2, r3, #3
 8001600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_RCC_GetSysClkSource>:
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_RCC_SetAHBPrescaler>:
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800165e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001662:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_RCC_SetAHB4Prescaler>:
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001692:	f023 020f 	bic.w	r2, r3, #15
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800169e:	4313      	orrs	r3, r2
 80016a0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_SetAPB1Prescaler>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_RCC_SetAPB2Prescaler>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_RCC_GetAHBPrescaler>:
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_RCC_GetAHB4Prescaler>:
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001764:	6013      	str	r3, [r2, #0]
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001782:	d101      	bne.n	8001788 <LL_RCC_PLL_IsReady+0x18>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <LL_RCC_PLL_IsReady+0x1a>
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001808:	d101      	bne.n	800180e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800182e:	d101      	bne.n	8001834 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d101      	bne.n	800185a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001878:	d101      	bne.n	800187e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800189c:	d101      	bne.n	80018a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08d      	sub	sp, #52	; 0x34
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e363      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 808d 	beq.w	80019ea <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d0:	f7ff fea1 	bl	8001616 <LL_RCC_GetSysClkSource>
 80018d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d6:	f7ff ff82 	bl	80017de <LL_RCC_PLL_GetMainSource>
 80018da:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_RCC_OscConfig+0x3e>
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d147      	bne.n	8001978 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d144      	bne.n	8001978 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e347      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80018fe:	f7ff fe4c 	bl	800159a <LL_RCC_MSI_GetRange>
 8001902:	4603      	mov	r3, r0
 8001904:	429c      	cmp	r4, r3
 8001906:	d914      	bls.n	8001932 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fd05 	bl	800231c <RCC_SetFlashLatencyFromMSIRange>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e336      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fe26 	bl	8001572 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fe4a 	bl	80015c4 <LL_RCC_MSI_SetCalibTrimming>
 8001930:	e013      	b.n	800195a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fe1b 	bl	8001572 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fe3f 	bl	80015c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fce6 	bl	800231c <RCC_SetFlashLatencyFromMSIRange>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e317      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800195a:	f000 fccb 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 800195e:	4603      	mov	r3, r0
 8001960:	4aa4      	ldr	r2, [pc, #656]	; (8001bf4 <HAL_RCC_OscConfig+0x344>)
 8001962:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001964:	4ba4      	ldr	r3, [pc, #656]	; (8001bf8 <HAL_RCC_OscConfig+0x348>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe ffbb 	bl	80008e4 <HAL_InitTick>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d039      	beq.n	80019e8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e308      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01e      	beq.n	80019be <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001980:	f7ff fdc8 	bl	8001514 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001984:	f7fe fffc 	bl	8000980 <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198c:	f7fe fff8 	bl	8000980 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e2f5      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800199e:	f7ff fdd7 	bl	8001550 <LL_RCC_MSI_IsReady>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f1      	beq.n	800198c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fde0 	bl	8001572 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fe04 	bl	80015c4 <LL_RCC_MSI_SetCalibTrimming>
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019be:	f7ff fdb8 	bl	8001532 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019c2:	f7fe ffdd 	bl	8000980 <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ca:	f7fe ffd9 	bl	8000980 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e2d6      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80019dc:	f7ff fdb8 	bl	8001550 <LL_RCC_MSI_IsReady>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f1      	bne.n	80019ca <HAL_RCC_OscConfig+0x11a>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019e8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d047      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f6:	f7ff fe0e 	bl	8001616 <LL_RCC_GetSysClkSource>
 80019fa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019fc:	f7ff feef 	bl	80017de <LL_RCC_PLL_GetMainSource>
 8001a00:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_OscConfig+0x164>
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d108      	bne.n	8001a20 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d134      	bne.n	8001a86 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e2b4      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_OscConfig+0x180>
 8001a2a:	f7ff fbf5 	bl	8001218 <LL_RCC_HSE_Enable>
 8001a2e:	e001      	b.n	8001a34 <HAL_RCC_OscConfig+0x184>
 8001a30:	f7ff fc01 	bl	8001236 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d012      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7fe ffa0 	bl	8000980 <HAL_GetTick>
 8001a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7fe ff9c 	bl	8000980 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e299      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a56:	f7ff fbfd 	bl	8001254 <LL_RCC_HSE_IsReady>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f1      	beq.n	8001a44 <HAL_RCC_OscConfig+0x194>
 8001a60:	e011      	b.n	8001a86 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7fe ff8d 	bl	8000980 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6a:	f7fe ff89 	bl	8000980 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e286      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a7c:	f7ff fbea 	bl	8001254 <LL_RCC_HSE_IsReady>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f1      	bne.n	8001a6a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d04c      	beq.n	8001b2c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	f7ff fdc0 	bl	8001616 <LL_RCC_GetSysClkSource>
 8001a96:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a98:	f7ff fea1 	bl	80017de <LL_RCC_PLL_GetMainSource>
 8001a9c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x200>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d10b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e266      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fc09 	bl	80012d8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ac6:	e031      	b.n	8001b2c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d019      	beq.n	8001b04 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	f7ff fbd2 	bl	8001278 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7fe ff54 	bl	8000980 <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7fe ff50 	bl	8000980 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e24d      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001aee:	f7ff fbe1 	bl	80012b4 <LL_RCC_HSI_IsReady>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f1      	beq.n	8001adc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fbeb 	bl	80012d8 <LL_RCC_HSI_SetCalibTrimming>
 8001b02:	e013      	b.n	8001b2c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b04:	f7ff fbc7 	bl	8001296 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7fe ff3a 	bl	8000980 <HAL_GetTick>
 8001b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b10:	f7fe ff36 	bl	8000980 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e233      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b22:	f7ff fbc7 	bl	80012b4 <LL_RCC_HSI_IsReady>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f1      	bne.n	8001b10 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a3 	beq.w	8001c8c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d076      	beq.n	8001c3c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d046      	beq.n	8001be8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001b5a:	f7ff fc7e 	bl	800145a <LL_RCC_LSI1_IsReady>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d113      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001b64:	f7ff fc57 	bl	8001416 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b68:	f7fe ff0a 	bl	8000980 <HAL_GetTick>
 8001b6c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b70:	f7fe ff06 	bl	8000980 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e203      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001b82:	f7ff fc6a 	bl	800145a <LL_RCC_LSI1_IsReady>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f1      	beq.n	8001b70 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001b8c:	f7ff fc77 	bl	800147e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe fef6 	bl	8000980 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001b98:	f7fe fef2 	bl	8000980 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1ef      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001baa:	f7ff fc8a 	bl	80014c2 <LL_RCC_LSI2_IsReady>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f1      	beq.n	8001b98 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fc94 	bl	80014e6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001bbe:	f7ff fc3b 	bl	8001438 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7fe fedd 	bl	8000980 <HAL_GetTick>
 8001bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bca:	f7fe fed9 	bl	8000980 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1d6      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001bdc:	f7ff fc3d 	bl	800145a <LL_RCC_LSI1_IsReady>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f1      	bne.n	8001bca <HAL_RCC_OscConfig+0x31a>
 8001be6:	e051      	b.n	8001c8c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001be8:	f7ff fc15 	bl	8001416 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe fec8 	bl	8000980 <HAL_GetTick>
 8001bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001bf2:	e00c      	b.n	8001c0e <HAL_RCC_OscConfig+0x35e>
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bfc:	f7fe fec0 	bl	8000980 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1bd      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001c0e:	f7ff fc24 	bl	800145a <LL_RCC_LSI1_IsReady>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f1      	beq.n	8001bfc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001c18:	f7ff fc42 	bl	80014a0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c1e:	f7fe feaf 	bl	8000980 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1ac      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001c30:	f7ff fc47 	bl	80014c2 <LL_RCC_LSI2_IsReady>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f1      	bne.n	8001c1e <HAL_RCC_OscConfig+0x36e>
 8001c3a:	e027      	b.n	8001c8c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001c3c:	f7ff fc30 	bl	80014a0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7fe fe9e 	bl	8000980 <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c48:	f7fe fe9a 	bl	8000980 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e197      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001c5a:	f7ff fc32 	bl	80014c2 <LL_RCC_LSI2_IsReady>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f1      	bne.n	8001c48 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001c64:	f7ff fbe8 	bl	8001438 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7fe fe8a 	bl	8000980 <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c70:	f7fe fe86 	bl	8000980 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e183      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001c82:	f7ff fbea 	bl	800145a <LL_RCC_LSI1_IsReady>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f1      	bne.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c98:	4ba7      	ldr	r3, [pc, #668]	; (8001f38 <HAL_RCC_OscConfig+0x688>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d114      	bne.n	8001cce <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001ca4:	f7ff fa52 	bl	800114c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca8:	f7fe fe6a 	bl	8000980 <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7fe fe66 	bl	8000980 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e163      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	4b9d      	ldr	r3, [pc, #628]	; (8001f38 <HAL_RCC_OscConfig+0x688>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <HAL_RCC_OscConfig+0x42c>
 8001cd6:	f7ff fb48 	bl	800136a <LL_RCC_LSE_Enable>
 8001cda:	e00c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x446>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d104      	bne.n	8001cee <HAL_RCC_OscConfig+0x43e>
 8001ce4:	f7ff fb63 	bl	80013ae <LL_RCC_LSE_EnableBypass>
 8001ce8:	f7ff fb3f 	bl	800136a <LL_RCC_LSE_Enable>
 8001cec:	e003      	b.n	8001cf6 <HAL_RCC_OscConfig+0x446>
 8001cee:	f7ff fb4d 	bl	800138c <LL_RCC_LSE_Disable>
 8001cf2:	f7ff fb6d 	bl	80013d0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d014      	beq.n	8001d28 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfe:	f7fe fe3f 	bl	8000980 <HAL_GetTick>
 8001d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7fe fe3b 	bl	8000980 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e136      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d1c:	f7ff fb69 	bl	80013f2 <LL_RCC_LSE_IsReady>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0ef      	beq.n	8001d06 <HAL_RCC_OscConfig+0x456>
 8001d26:	e013      	b.n	8001d50 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7fe fe2a 	bl	8000980 <HAL_GetTick>
 8001d2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe fe26 	bl	8000980 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e121      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d46:	f7ff fb54 	bl	80013f2 <LL_RCC_LSE_IsReady>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ef      	bne.n	8001d30 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d014      	beq.n	8001d8e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d64:	f7ff facd 	bl	8001302 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7fe fe0a 	bl	8000980 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d70:	f7fe fe06 	bl	8000980 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e103      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001d82:	f7ff fae0 	bl	8001346 <LL_RCC_HSI48_IsReady>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f1      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4c0>
 8001d8c:	e013      	b.n	8001db6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d8e:	f7ff fac9 	bl	8001324 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7fe fdf5 	bl	8000980 <HAL_GetTick>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9a:	f7fe fdf1 	bl	8000980 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0ee      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001dac:	f7ff facb 	bl	8001346 <LL_RCC_HSI48_IsReady>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f1      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80e4 	beq.w	8001f88 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc0:	f7ff fc29 	bl	8001616 <LL_RCC_GetSysClkSource>
 8001dc4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	f040 80b4 	bne.w	8001f40 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0203 	and.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d123      	bne.n	8001e2e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d11c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d114      	bne.n	8001e2e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d10d      	bne.n	8001e2e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d05d      	beq.n	8001eea <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	d058      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0a1      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e46:	f7ff fc84 	bl	8001752 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e4a:	f7fe fd99 	bl	8000980 <HAL_GetTick>
 8001e4e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7fe fd95 	bl	8000980 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e092      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ef      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_OscConfig+0x68c>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e84:	4311      	orrs	r1, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e8a:	0212      	lsls	r2, r2, #8
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e98:	4311      	orrs	r1, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ea8:	f7ff fc44 	bl	8001734 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ebc:	f7fe fd60 	bl	8000980 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe fd5c 	bl	8000980 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e059      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee4:	e050      	b.n	8001f88 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e04f      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d147      	bne.n	8001f88 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ef8:	f7ff fc1c 	bl	8001734 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f0c:	f7fe fd38 	bl	8000980 <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe fd34 	bl	8000980 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e031      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ef      	beq.n	8001f14 <HAL_RCC_OscConfig+0x664>
 8001f34:	e028      	b.n	8001f88 <HAL_RCC_OscConfig+0x6d8>
 8001f36:	bf00      	nop
 8001f38:	58000400 	.word	0x58000400
 8001f3c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d01e      	beq.n	8001f84 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	f7ff fc04 	bl	8001752 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fd19 	bl	8000980 <HAL_GetTick>
 8001f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe fd15 	bl	8000980 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e012      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ef      	bne.n	8001f52 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_OscConfig+0x6e4>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60cb      	str	r3, [r1, #12]
 8001f82:	e001      	b.n	8001f88 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3734      	adds	r7, #52	; 0x34
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	eefefffc 	.word	0xeefefffc

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e12d      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b98      	ldr	r3, [pc, #608]	; (8002210 <HAL_RCC_ClockConfig+0x278>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d91b      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b95      	ldr	r3, [pc, #596]	; (8002210 <HAL_RCC_ClockConfig+0x278>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4993      	ldr	r1, [pc, #588]	; (8002210 <HAL_RCC_ClockConfig+0x278>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fca:	f7fe fcd9 	bl	8000980 <HAL_GetTick>
 8001fce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fd2:	f7fe fcd5 	bl	8000980 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e111      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_RCC_ClockConfig+0x278>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d1ef      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fb13 	bl	800162e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002008:	f7fe fcba 	bl	8000980 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002010:	f7fe fcb6 	bl	8000980 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0f2      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002022:	f7ff fbe8 	bl	80017f6 <LL_RCC_IsActiveFlag_HPRE>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f1      	beq.n	8002010 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fb0a 	bl	8001656 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002042:	f7fe fc9d 	bl	8000980 <HAL_GetTick>
 8002046:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800204a:	f7fe fc99 	bl	8000980 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0d5      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800205c:	f7ff fbdd 	bl	800181a <LL_RCC_IsActiveFlag_C2HPRE>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f1      	beq.n	800204a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fb03 	bl	8001682 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800207c:	f7fe fc80 	bl	8000980 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002084:	f7fe fc7c 	bl	8000980 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0b8      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002096:	f7ff fbd3 	bl	8001840 <LL_RCC_IsActiveFlag_SHDHPRE>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f1      	beq.n	8002084 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d016      	beq.n	80020da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fafd 	bl	80016b0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020b6:	f7fe fc63 	bl	8000980 <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020be:	f7fe fc5f 	bl	8000980 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e09b      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80020d0:	f7ff fbc9 	bl	8001866 <LL_RCC_IsActiveFlag_PPRE1>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f1      	beq.n	80020be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d017      	beq.n	8002116 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff faf3 	bl	80016d8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020f2:	f7fe fc45 	bl	8000980 <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020fa:	f7fe fc41 	bl	8000980 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e07d      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800210c:	f7ff fbbd 	bl	800188a <LL_RCC_IsActiveFlag_PPRE2>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f1      	beq.n	80020fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d043      	beq.n	80021aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d106      	bne.n	8002138 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800212a:	f7ff f893 	bl	8001254 <LL_RCC_HSE_IsReady>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d11e      	bne.n	8002172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e067      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d106      	bne.n	800214e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002140:	f7ff fb16 	bl	8001770 <LL_RCC_PLL_IsReady>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d113      	bne.n	8002172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e05c      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002156:	f7ff f9fb 	bl	8001550 <LL_RCC_MSI_IsReady>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e051      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002164:	f7ff f8a6 	bl	80012b4 <LL_RCC_HSI_IsReady>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e04a      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fa39 	bl	80015ee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800217c:	f7fe fc00 	bl	8000980 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe fbfc 	bl	8000980 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e036      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	f7ff fa3c 	bl	8001616 <LL_RCC_GetSysClkSource>
 800219e:	4602      	mov	r2, r0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d1ec      	bne.n	8002184 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_ClockConfig+0x278>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d21b      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_RCC_ClockConfig+0x278>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 0207 	bic.w	r2, r3, #7
 80021c0:	4913      	ldr	r1, [pc, #76]	; (8002210 <HAL_RCC_ClockConfig+0x278>)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7fe fbda 	bl	8000980 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021d0:	f7fe fbd6 	bl	8000980 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e012      	b.n	8002208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_ClockConfig+0x278>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1ef      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021f0:	f000 f880 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_RCC_ClockConfig+0x27c>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80021fa:	f7fe fbcd 	bl	8000998 <HAL_GetTickPrio>
 80021fe:	4603      	mov	r3, r0
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fb6f 	bl	80008e4 <HAL_InitTick>
 8002206:	4603      	mov	r3, r0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	58004000 	.word	0x58004000
 8002214:	20000008 	.word	0x20000008

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	f7ff f9fa 	bl	8001616 <LL_RCC_GetSysClkSource>
 8002222:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800222a:	f7ff f9b6 	bl	800159a <LL_RCC_MSI_GetRange>
 800222e:	4603      	mov	r3, r0
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e04b      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b04      	cmp	r3, #4
 8002244:	d102      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e045      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d10a      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002252:	f7fe ffcf 	bl	80011f4 <LL_RCC_HSE_IsEnabledDiv2>
 8002256:	4603      	mov	r3, r0
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800225c:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_RCC_GetSysClockFreq+0xd4>)
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e03a      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e037      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002268:	f7ff fab9 	bl	80017de <LL_RCC_PLL_GetMainSource>
 800226c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d003      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x64>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x6a>
 800227a:	e00d      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800227e:	60bb      	str	r3, [r7, #8]
        break;
 8002280:	e015      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002282:	f7fe ffb7 	bl	80011f4 <LL_RCC_HSE_IsEnabledDiv2>
 8002286:	4603      	mov	r3, r0
 8002288:	2b01      	cmp	r3, #1
 800228a:	d102      	bne.n	8002292 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_RCC_GetSysClockFreq+0xd4>)
 800228e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002290:	e00d      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002294:	60bb      	str	r3, [r7, #8]
        break;
 8002296:	e00a      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002298:	f7ff f97f 	bl	800159a <LL_RCC_MSI_GetRange>
 800229c:	4603      	mov	r3, r0
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	60bb      	str	r3, [r7, #8]
        break;
 80022ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80022ae:	f7ff fa71 	bl	8001794 <LL_RCC_PLL_GetN>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	fb03 f402 	mul.w	r4, r3, r2
 80022ba:	f7ff fa84 	bl	80017c6 <LL_RCC_PLL_GetDivider>
 80022be:	4603      	mov	r3, r0
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	3301      	adds	r3, #1
 80022c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80022c8:	f7ff fa71 	bl	80017ae <LL_RCC_PLL_GetR>
 80022cc:	4603      	mov	r3, r0
 80022ce:	0f5b      	lsrs	r3, r3, #29
 80022d0:	3301      	adds	r3, #1
 80022d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80022d6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80022d8:	68fb      	ldr	r3, [r7, #12]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	bf00      	nop
 80022e4:	08003420 	.word	0x08003420
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	003d0900 	.word	0x003d0900
 80022f0:	007a1200 	.word	0x007a1200

080022f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b598      	push	{r3, r4, r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80022f8:	f7ff ff8e 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80022fc:	4604      	mov	r4, r0
 80022fe:	f7ff f9ff 	bl	8001700 <LL_RCC_GetAHBPrescaler>
 8002302:	4603      	mov	r3, r0
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_RCC_GetHCLKFreq+0x24>)
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd98      	pop	{r3, r4, r7, pc}
 8002318:	080033e0 	.word	0x080033e0

0800231c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2bb0      	cmp	r3, #176	; 0xb0
 8002328:	d903      	bls.n	8002332 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e007      	b.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002342:	f7ff f9e9 	bl	8001718 <LL_RCC_GetAHB4Prescaler>
 8002346:	4603      	mov	r3, r0
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	0c9c      	lsrs	r4, r3, #18
 8002366:	f7fe ff37 	bl	80011d8 <HAL_PWREx_GetVoltageRange>
 800236a:	4603      	mov	r3, r0
 800236c:	4619      	mov	r1, r3
 800236e:	4620      	mov	r0, r4
 8002370:	f000 f80c 	bl	800238c <RCC_SetFlashLatency>
 8002374:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}
 800237e:	bf00      	nop
 8002380:	08003420 	.word	0x08003420
 8002384:	080033e0 	.word	0x080033e0
 8002388:	431bde83 	.word	0x431bde83

0800238c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b093      	sub	sp, #76	; 0x4c
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <RCC_SetFlashLatency+0xe8>)
 8002398:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800239c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800239e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80023a2:	4a35      	ldr	r2, [pc, #212]	; (8002478 <RCC_SetFlashLatency+0xec>)
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80023ae:	4b33      	ldr	r3, [pc, #204]	; (800247c <RCC_SetFlashLatency+0xf0>)
 80023b0:	f107 040c 	add.w	r4, r7, #12
 80023b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80023ba:	2300      	movs	r3, #0
 80023bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c4:	d11a      	bne.n	80023fc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	643b      	str	r3, [r7, #64]	; 0x40
 80023ca:	e013      	b.n	80023f4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80023cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	3348      	adds	r3, #72	; 0x48
 80023d2:	443b      	add	r3, r7
 80023d4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d807      	bhi.n	80023ee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3348      	adds	r3, #72	; 0x48
 80023e4:	443b      	add	r3, r7
 80023e6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80023ea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80023ec:	e020      	b.n	8002430 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f0:	3301      	adds	r3, #1
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
 80023f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d9e8      	bls.n	80023cc <RCC_SetFlashLatency+0x40>
 80023fa:	e019      	b.n	8002430 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002400:	e013      	b.n	800242a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3348      	adds	r3, #72	; 0x48
 8002408:	443b      	add	r3, r7
 800240a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d807      	bhi.n	8002424 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	3348      	adds	r3, #72	; 0x48
 800241a:	443b      	add	r3, r7
 800241c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002422:	e005      	b.n	8002430 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002426:	3301      	adds	r3, #1
 8002428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800242a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242c:	2b02      	cmp	r3, #2
 800242e:	d9e8      	bls.n	8002402 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <RCC_SetFlashLatency+0xf4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 0207 	bic.w	r2, r3, #7
 8002438:	4911      	ldr	r1, [pc, #68]	; (8002480 <RCC_SetFlashLatency+0xf4>)
 800243a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002440:	f7fe fa9e 	bl	8000980 <HAL_GetTick>
 8002444:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002446:	e008      	b.n	800245a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002448:	f7fe fa9a 	bl	8000980 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e007      	b.n	800246a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <RCC_SetFlashLatency+0xf4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002464:	429a      	cmp	r2, r3
 8002466:	d1ef      	bne.n	8002448 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	374c      	adds	r7, #76	; 0x4c
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
 8002472:	bf00      	nop
 8002474:	080033b4 	.word	0x080033b4
 8002478:	080033c4 	.word	0x080033c4
 800247c:	080033d0 	.word	0x080033d0
 8002480:	58004000 	.word	0x58004000

08002484 <LL_RCC_LSE_IsEnabled>:
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <LL_RCC_LSE_IsEnabled+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_RCC_LSE_IsEnabled+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_RCC_LSE_IsReady>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d101      	bne.n	80024c0 <LL_RCC_LSE_IsReady+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_RCC_LSE_IsReady+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_RCC_MSI_EnablePLLMode>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_RCC_SetRFWKPClockSource>:
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_SetSMPSClockSource>:
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	f023 0203 	bic.w	r2, r3, #3
 8002528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_RCC_SetSMPSPrescaler>:
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	624b      	str	r3, [r1, #36]	; 0x24
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_RCC_SetUSARTClockSource>:
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_RCC_SetLPUARTClockSource>:
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_RCC_SetI2CClockSource>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80025d6:	43db      	mvns	r3, r3
 80025d8:	401a      	ands	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80025e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_SetLPTIMClockSource>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0c1b      	lsrs	r3, r3, #16
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	43db      	mvns	r3, r3
 8002610:	401a      	ands	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_RCC_SetSAIClockSource>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_RCC_SetRNGClockSource>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800266c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_RCC_SetCLK48ClockSource>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_RCC_SetUSBClockSource>:
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ffe3 	bl	8002684 <LL_RCC_SetCLK48ClockSource>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <LL_RCC_SetADCClockSource>:
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_RCC_SetRTCClockSource>:
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_RCC_GetRTCClockSource>:
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_RCC_ForceBackupDomainReset>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_RCC_ReleaseBackupDomainReset>:
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_RCC_PLLSAI1_Enable>:
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_RCC_PLLSAI1_Disable>:
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_PLLSAI1_IsReady>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ca:	d101      	bne.n	80027d0 <LL_RCC_PLLSAI1_IsReady+0x18>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80027e8:	2300      	movs	r3, #0
 80027ea:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d034      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002800:	d021      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002802:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002806:	d81b      	bhi.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800280c:	d01d      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800280e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002812:	d815      	bhi.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281c:	d110      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800282e:	e00d      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f94d 	bl	8002ad4 <RCCEx_PLLSAI1_ConfigNP>
 800283a:	4603      	mov	r3, r0
 800283c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800283e:	e005      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	77fb      	strb	r3, [r7, #31]
        break;
 8002844:	e002      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800284a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800284c:	7ffb      	ldrb	r3, [r7, #31]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fee8 	bl	800262c <LL_RCC_SetSAIClockSource>
 800285c:	e001      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286a:	2b00      	cmp	r3, #0
 800286c:	d046      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800286e:	f7ff ff56 	bl	800271e <LL_RCC_GetRTCClockSource>
 8002872:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	429a      	cmp	r2, r3
 800287c:	d03c      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800287e:	f7fe fc65 	bl	800114c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff30 	bl	80026f2 <LL_RCC_SetRTCClockSource>
 8002892:	e02e      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800289e:	f7ff ff4b 	bl	8002738 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80028a2:	f7ff ff5a 	bl	800275a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80028b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80028be:	f7ff fde1 	bl	8002484 <LL_RCC_LSE_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d114      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028c8:	f7fe f85a 	bl	8000980 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80028ce:	e00b      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe f856 	bl	8000980 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d902      	bls.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	77fb      	strb	r3, [r7, #31]
              break;
 80028e6:	e004      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80028e8:	f7ff fdde 	bl	80024a8 <LL_RCC_LSE_IsReady>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d1ee      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	77bb      	strb	r3, [r7, #30]
 80028f6:	e001      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7ffb      	ldrb	r3, [r7, #31]
 80028fa:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d004      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fe2a 	bl	8002566 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fe35 	bl	8002592 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fe5d 	bl	80025f8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fe52 	bl	80025f8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fe2a 	bl	80025be <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fe1f 	bl	80025be <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d022      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fe8d 	bl	80026b0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299e:	d107      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ae:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b8:	d10b      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f8e3 	bl	8002b8a <RCCEx_PLLSAI1_ConfigNQ>
 80029c4:	4603      	mov	r3, r0
 80029c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80029c8:	7ffb      	ldrb	r3, [r7, #31]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02b      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d008      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029f0:	d003      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fe2a 	bl	8002658 <LL_RCC_SetRNGClockSource>
 8002a04:	e00a      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff fe21 	bl	8002658 <LL_RCC_SetRNGClockSource>
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff fe34 	bl	8002684 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002a24:	d107      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a34:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d022      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fe3d 	bl	80026c6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a54:	d107      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f8e3 	bl	8002c40 <RCCEx_PLLSAI1_ConfigNR>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a7e:	7ffb      	ldrb	r3, [r7, #31]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002a84:	7ffb      	ldrb	r3, [r7, #31]
 8002a86:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fd26 	bl	80024ea <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fd45 	bl	800253e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fd2c 	bl	8002516 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002abe:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002acc:	f7ff fcfe 	bl	80024cc <LL_RCC_MSI_EnablePLLMode>
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ae0:	f7ff fe5b 	bl	800279a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ae4:	f7fd ff4c 	bl	8000980 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002aea:	e009      	b.n	8002b00 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aec:	f7fd ff48 	bl	8000980 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	73fb      	strb	r3, [r7, #15]
      break;
 8002afe:	e004      	b.n	8002b0a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b00:	f7ff fe5a 	bl	80027b8 <LL_RCC_PLLSAI1_IsReady>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d137      	bne.n	8002b80 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b24:	4313      	orrs	r3, r2
 8002b26:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002b3e:	f7ff fe1d 	bl	800277c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b42:	f7fd ff1d 	bl	8000980 <HAL_GetTick>
 8002b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b48:	e009      	b.n	8002b5e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b4a:	f7fd ff19 	bl	8000980 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d902      	bls.n	8002b5e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	73fb      	strb	r3, [r7, #15]
        break;
 8002b5c:	e004      	b.n	8002b68 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b5e:	f7ff fe2b 	bl	80027b8 <LL_RCC_PLLSAI1_IsReady>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d1f0      	bne.n	8002b4a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d108      	bne.n	8002b80 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002b96:	f7ff fe00 	bl	800279a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b9a:	f7fd fef1 	bl	8000980 <HAL_GetTick>
 8002b9e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ba0:	e009      	b.n	8002bb6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba2:	f7fd feed 	bl	8000980 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d902      	bls.n	8002bb6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb4:	e004      	b.n	8002bc0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bb6:	f7ff fdff 	bl	80027b8 <LL_RCC_PLLSAI1_IsReady>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d137      	bne.n	8002c36 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002bf4:	f7ff fdc2 	bl	800277c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fd fec2 	bl	8000980 <HAL_GetTick>
 8002bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002bfe:	e009      	b.n	8002c14 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c00:	f7fd febe 	bl	8000980 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d902      	bls.n	8002c14 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	73fb      	strb	r3, [r7, #15]
        break;
 8002c12:	e004      	b.n	8002c1e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c14:	f7ff fdd0 	bl	80027b8 <LL_RCC_PLLSAI1_IsReady>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d1f0      	bne.n	8002c00 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d108      	bne.n	8002c36 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c32:	4313      	orrs	r3, r2
 8002c34:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002c4c:	f7ff fda5 	bl	800279a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c50:	f7fd fe96 	bl	8000980 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c56:	e009      	b.n	8002c6c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c58:	f7fd fe92 	bl	8000980 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d902      	bls.n	8002c6c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6a:	e004      	b.n	8002c76 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c6c:	f7ff fda4 	bl	80027b8 <LL_RCC_PLLSAI1_IsReady>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d137      	bne.n	8002cec <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c90:	4313      	orrs	r3, r2
 8002c92:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002caa:	f7ff fd67 	bl	800277c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cae:	f7fd fe67 	bl	8000980 <HAL_GetTick>
 8002cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cb4:	e009      	b.n	8002cca <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cb6:	f7fd fe63 	bl	8000980 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d902      	bls.n	8002cca <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	73fb      	strb	r3, [r7, #15]
        break;
 8002cc8:	e004      	b.n	8002cd4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cca:	f7ff fd75 	bl	80027b8 <LL_RCC_PLLSAI1_IsReady>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d1f0      	bne.n	8002cb6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d108      	bne.n	8002cec <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e09f      	b.n	8002e4a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fd fc44 	bl	80005ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <HAL_RTC_Init+0x15c>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d07e      	beq.n	8002e36 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	22ca      	movs	r2, #202	; 0xca
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2253      	movs	r2, #83	; 0x53
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8ab 	bl	8002ea4 <RTC_EnterInitMode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	22ff      	movs	r2, #255	; 0xff
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e067      	b.n	8002e3a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6899      	ldr	r1, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68d2      	ldr	r2, [r2, #12]
 8002da4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6919      	ldr	r1, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0203 	bic.w	r2, r2, #3
 8002dd8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d113      	bne.n	8002e28 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f829 	bl	8002e58 <HAL_RTC_WaitForSynchro>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2204      	movs	r2, #4
 8002e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e010      	b.n	8002e4a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e001      	b.n	8002e3a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40002800 	.word	0x40002800

08002e58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e6e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002e70:	f7fd fd86 	bl	8000980 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e76:	e009      	b.n	8002e8c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e78:	f7fd fd82 	bl	8000980 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e86:	d901      	bls.n	8002e8c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e007      	b.n	8002e9c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ee      	beq.n	8002e78 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d119      	bne.n	8002eee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ec4:	f7fd fd5c 	bl	8000980 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002eca:	e009      	b.n	8002ee0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ecc:	f7fd fd58 	bl	8000980 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eda:	d901      	bls.n	8002ee0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e007      	b.n	8002ef0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ee      	beq.n	8002ecc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0a8      	b.n	8003064 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	22ca      	movs	r2, #202	; 0xca
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2253      	movs	r2, #83	; 0x53
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8002f40:	f7fd fd1e 	bl	8000980 <HAL_GetTick>
 8002f44:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002f46:	e015      	b.n	8002f74 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f48:	f7fd fd1a 	bl	8000980 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f56:	d90d      	bls.n	8002f74 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2203      	movs	r2, #3
 8002f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e077      	b.n	8003064 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e2      	bne.n	8002f48 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f90:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002fa2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002fa4:	f7fd fcec 	bl	8000980 <HAL_GetTick>
 8002fa8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002faa:	e015      	b.n	8002fd8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fac:	f7fd fce8 	bl	8000980 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fba:	d90d      	bls.n	8002fd8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e045      	b.n	8003064 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0e2      	beq.n	8002fac <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0207 	bic.w	r2, r2, #7
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800301a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003038:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003048:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	58000800 	.word	0x58000800

08003070 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8003082:	2302      	movs	r3, #2
 8003084:	e04d      	b.n	8003122 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	22ca      	movs	r2, #202	; 0xca
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2253      	movs	r2, #83	; 0x53
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030c4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80030c6:	f7fd fc5b 	bl	8000980 <HAL_GetTick>
 80030ca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80030cc:	e015      	b.n	80030fa <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030ce:	f7fd fc57 	bl	8000980 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030dc:	d90d      	bls.n	80030fa <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	22ff      	movs	r2, #255	; 0xff
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2203      	movs	r2, #3
 80030ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e013      	b.n	8003122 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0e2      	beq.n	80030ce <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	22ff      	movs	r2, #255	; 0xff
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f818 	bl	8003178 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003158:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800315c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003160:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	58000800 	.word	0x58000800

08003178 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e095      	b.n	80032ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d108      	bne.n	80031b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ae:	d009      	beq.n	80031c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
 80031b6:	e005      	b.n	80031c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fa1a 	bl	8000618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003204:	d902      	bls.n	800320c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e002      	b.n	8003212 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800320c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003210:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800321a:	d007      	beq.n	800322c <HAL_SPI_Init+0xa0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003224:	d002      	beq.n	800322c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	ea42 0103 	orr.w	r1, r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	0c1b      	lsrs	r3, r3, #16
 8003288:	f003 0204 	and.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032a8:	ea42 0103 	orr.w	r1, r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80032da:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80032de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <memset>:
 8003344:	4402      	add	r2, r0
 8003346:	4603      	mov	r3, r0
 8003348:	4293      	cmp	r3, r2
 800334a:	d100      	bne.n	800334e <memset+0xa>
 800334c:	4770      	bx	lr
 800334e:	f803 1b01 	strb.w	r1, [r3], #1
 8003352:	e7f9      	b.n	8003348 <memset+0x4>

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	4d0d      	ldr	r5, [pc, #52]	; (800338c <__libc_init_array+0x38>)
 8003358:	4c0d      	ldr	r4, [pc, #52]	; (8003390 <__libc_init_array+0x3c>)
 800335a:	1b64      	subs	r4, r4, r5
 800335c:	10a4      	asrs	r4, r4, #2
 800335e:	2600      	movs	r6, #0
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	4d0b      	ldr	r5, [pc, #44]	; (8003394 <__libc_init_array+0x40>)
 8003366:	4c0c      	ldr	r4, [pc, #48]	; (8003398 <__libc_init_array+0x44>)
 8003368:	f000 f818 	bl	800339c <_init>
 800336c:	1b64      	subs	r4, r4, r5
 800336e:	10a4      	asrs	r4, r4, #2
 8003370:	2600      	movs	r6, #0
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	f855 3b04 	ldr.w	r3, [r5], #4
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	f855 3b04 	ldr.w	r3, [r5], #4
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	08003460 	.word	0x08003460
 8003390:	08003460 	.word	0x08003460
 8003394:	08003460 	.word	0x08003460
 8003398:	08003464 	.word	0x08003464

0800339c <_init>:
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	bf00      	nop
 80033a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a2:	bc08      	pop	{r3}
 80033a4:	469e      	mov	lr, r3
 80033a6:	4770      	bx	lr

080033a8 <_fini>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	bf00      	nop
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr
