
ReceiverUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e3c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  08008f80  08008f80  00018f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080095f0  080095f0  000195f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000008  080095f4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000520  200001dc  080097c8  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200006fc  080097c8  000206fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001486a  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003012  00000000  00000000  00034ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001838  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000125b  00000000  00000000  00039308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023a83  00000000  00000000  0003a563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016104  00000000  00000000  0005dfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e051e  00000000  00000000  000740ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000076b4  00000000  00000000  00154608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  0015bcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08008f64 	.word	0x08008f64

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08008f64 	.word	0x08008f64

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9a3 	b.w	8000f60 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f835 	bl	8000c98 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f828 	bl	8000c98 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f817 	bl	8000c98 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f809 	bl	8000c98 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f001 facb 	bl	8002510 <null_ptr_check>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d133      	bne.n	8000fee <bme280_init+0x8a>
		while (try_count) {
 8000f86:	e028      	b.n	8000fda <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f88:	f107 010d 	add.w	r1, r7, #13
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	20d0      	movs	r0, #208	; 0xd0
 8000f92:	f000 f832 	bl	8000ffa <bme280_get_regs>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d114      	bne.n	8000fcc <bme280_init+0x68>
 8000fa2:	7b7b      	ldrb	r3, [r7, #13]
 8000fa4:	2b60      	cmp	r3, #96	; 0x60
 8000fa6:	d111      	bne.n	8000fcc <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000fa8:	7b7a      	ldrb	r2, [r7, #13]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f978 	bl	80012a4 <bme280_soft_reset>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d110      	bne.n	8000fe2 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f001 f919 	bl	80021f8 <get_calib_data>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fca:	e00a      	b.n	8000fe2 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	4798      	blx	r3
			--try_count;
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1d3      	bne.n	8000f88 <bme280_init+0x24>
 8000fe0:	e000      	b.n	8000fe4 <bme280_init+0x80>
				break;
 8000fe2:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fea:	23fe      	movs	r3, #254	; 0xfe
 8000fec:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000ffa:	b590      	push	{r4, r7, lr}
 8000ffc:	b087      	sub	sp, #28
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	4613      	mov	r3, r2
 800100a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f001 fa7f 	bl	8002510 <null_ptr_check>
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d117      	bne.n	800104e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	789b      	ldrb	r3, [r3, #2]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d003      	beq.n	800102e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685c      	ldr	r4, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7858      	ldrb	r0, [r3, #1]
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	7bf9      	ldrb	r1, [r7, #15]
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	47a0      	blx	r4
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800104a:	23fc      	movs	r3, #252	; 0xfc
 800104c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800104e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001052:	4618      	mov	r0, r3
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800105a:	b590      	push	{r4, r7, lr}
 800105c:	b08d      	sub	sp, #52	; 0x34
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4613      	mov	r3, r2
 8001068:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b0a      	cmp	r3, #10
 800106e:	d901      	bls.n	8001074 <bme280_set_regs+0x1a>
		len = 10;
 8001070:	230a      	movs	r3, #10
 8001072:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f001 fa4b 	bl	8002510 <null_ptr_check>
 800107a:	4603      	mov	r3, r0
 800107c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001080:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001084:	2b00      	cmp	r3, #0
 8001086:	d156      	bne.n	8001136 <bme280_set_regs+0xdc>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d053      	beq.n	8001136 <bme280_set_regs+0xdc>
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d050      	beq.n	8001136 <bme280_set_regs+0xdc>
		if (len != 0) {
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d049      	beq.n	800112e <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	789b      	ldrb	r3, [r3, #2]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d01a      	beq.n	80010de <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010ae:	e011      	b.n	80010d4 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80010b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	440b      	add	r3, r1
 80010c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010ce:	3301      	adds	r3, #1
 80010d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010d4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3e8      	bcc.n	80010b0 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d90d      	bls.n	8001100 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f107 0114 	add.w	r1, r7, #20
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f001 f8c8 	bl	8002282 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b01      	subs	r3, #1
 80010fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010fe:	e001      	b.n	8001104 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689c      	ldr	r4, [r3, #8]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	7858      	ldrb	r0, [r3, #1]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	7819      	ldrb	r1, [r3, #0]
 8001110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	47a0      	blx	r4
 8001118:	4603      	mov	r3, r0
 800111a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800111e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8001126:	23fc      	movs	r3, #252	; 0xfc
 8001128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800112c:	e007      	b.n	800113e <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800112e:	23fd      	movs	r3, #253	; 0xfd
 8001130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001134:	e003      	b.n	800113e <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001136:	23ff      	movs	r3, #255	; 0xff
 8001138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800113c:	e000      	b.n	8001140 <bme280_set_regs+0xe6>
		if (len != 0) {
 800113e:	bf00      	nop
	}


	return rslt;
 8001140:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001144:	4618      	mov	r0, r3
 8001146:	3734      	adds	r7, #52	; 0x34
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f001 f9d9 	bl	8002510 <null_ptr_check>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d13f      	bne.n	80011ea <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800116a:	f107 030e 	add.w	r3, r7, #14
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f874 	bl	800125e <bme280_get_sensor_mode>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <bme280_set_sensor_settings+0x46>
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f000 fb36 	bl	80017fa <put_device_to_sleep>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d127      	bne.n	80011ea <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4619      	mov	r1, r3
 800119e:	2007      	movs	r0, #7
 80011a0:	f001 f99a 	bl	80024d8 <are_settings_changed>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f972 	bl	800149e <set_osr_settings>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d111      	bne.n	80011ea <bme280_set_sensor_settings+0x9e>
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2018      	movs	r0, #24
 80011cc:	f001 f984 	bl	80024d8 <are_settings_changed>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f9f9 	bl	80015d8 <set_filter_standby_settings>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	6039      	str	r1, [r7, #0]
 8001200:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f001 f984 	bl	8002510 <null_ptr_check>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800120c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d11e      	bne.n	8001252 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f81f 	bl	800125e <bme280_get_sensor_mode>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <bme280_set_sensor_mode+0x46>
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f000 fae1 	bl	80017fa <put_device_to_sleep>
 8001238:	4603      	mov	r3, r0
 800123a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d106      	bne.n	8001252 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 faa3 	bl	8001794 <write_power_mode>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001268:	6838      	ldr	r0, [r7, #0]
 800126a:	f001 f951 	bl	8002510 <null_ptr_check>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10e      	bne.n	8001298 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	20f4      	movs	r0, #244	; 0xf4
 8001282:	f7ff feba 	bl	8000ffa <bme280_get_regs>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80012ac:	23e0      	movs	r3, #224	; 0xe0
 80012ae:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80012b0:	23b6      	movs	r3, #182	; 0xb6
 80012b2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 f92b 	bl	8002510 <null_ptr_check>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10d      	bne.n	80012e2 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80012c6:	f107 010d 	add.w	r1, r7, #13
 80012ca:	f107 000e 	add.w	r0, r7, #14
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f7ff fec2 	bl	800105a <bme280_set_regs>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2002      	movs	r0, #2
 80012e0:	4798      	blx	r3
	}

	return rslt;
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b08a      	sub	sp, #40	; 0x28
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f001 f8fd 	bl	8002510 <null_ptr_check>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800131c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001320:	2b00      	cmp	r3, #0
 8001322:	d124      	bne.n	800136e <bme280_get_sensor_data+0x80>
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d021      	beq.n	800136e <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800132a:	f107 011c 	add.w	r1, r7, #28
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2208      	movs	r2, #8
 8001332:	20f7      	movs	r0, #247	; 0xf7
 8001334:	f7ff fe61 	bl	8000ffa <bme280_get_regs>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 800133e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001346:	f107 0210 	add.w	r2, r7, #16
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f815 	bl	8001380 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3310      	adds	r3, #16
 800135a:	f107 0110 	add.w	r1, r7, #16
 800135e:	7bf8      	ldrb	r0, [r7, #15]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	f000 f853 	bl	800140c <bme280_compensate_data>
 8001366:	4603      	mov	r3, r0
 8001368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800136c:	e002      	b.n	8001374 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800136e:	23ff      	movs	r3, #255	; 0xff
 8001370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8001374:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001378:	4618      	mov	r0, r3
 800137a:	3728      	adds	r7, #40	; 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	031b      	lsls	r3, r3, #12
 8001390:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3301      	adds	r3, #1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3302      	adds	r3, #2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3303      	adds	r3, #3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	031b      	lsls	r3, r3, #12
 80013be:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3304      	adds	r3, #4
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3305      	adds	r3, #5
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	431a      	orrs	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	431a      	orrs	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3306      	adds	r3, #6
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3307      	adds	r3, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	609a      	str	r2, [r3, #8]
}
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d033      	beq.n	800148e <bme280_compensate_data+0x82>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d030      	beq.n	800148e <bme280_compensate_data+0x82>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d02d      	beq.n	800148e <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f000 fa1f 	bl	8001894 <compensate_temperature>
 8001456:	4602      	mov	r2, r0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001466:	6839      	ldr	r1, [r7, #0]
 8001468:	68b8      	ldr	r0, [r7, #8]
 800146a:	f000 fa75 	bl	8001958 <compensate_pressure>
 800146e:	4602      	mov	r2, r0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fe0d 	bl	80020a0 <compensate_humidity>
 8001486:	4602      	mov	r2, r0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 800148c:	e001      	b.n	8001492 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800148e:	23ff      	movs	r3, #255	; 0xff
 8001490:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001492:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014ac:	2301      	movs	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f000 f815 	bl	80014ec <set_osr_humidity_settings>
 80014c2:	4603      	mov	r3, r0
 80014c4:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f842 	bl	8001560 <set_osr_press_temp_settings>
 80014dc:	4603      	mov	r3, r0
 80014de:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014f6:	23f2      	movs	r3, #242	; 0xf2
 80014f8:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	789b      	ldrb	r3, [r3, #2]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	b2db      	uxtb	r3, r3
 8001504:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001506:	f107 010e 	add.w	r1, r7, #14
 800150a:	f107 000c 	add.w	r0, r7, #12
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2201      	movs	r2, #1
 8001512:	f7ff fda2 	bl	800105a <bme280_set_regs>
 8001516:	4603      	mov	r3, r0
 8001518:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d118      	bne.n	8001554 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001522:	23f4      	movs	r3, #244	; 0xf4
 8001524:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001526:	7b38      	ldrb	r0, [r7, #12]
 8001528:	f107 010d 	add.w	r1, r7, #13
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	f7ff fd63 	bl	8000ffa <bme280_get_regs>
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001540:	f107 010d 	add.w	r1, r7, #13
 8001544:	f107 000c 	add.w	r0, r7, #12
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2201      	movs	r2, #1
 800154c:	f7ff fd85 	bl	800105a <bme280_set_regs>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800156e:	23f4      	movs	r3, #244	; 0xf4
 8001570:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001572:	7db8      	ldrb	r0, [r7, #22]
 8001574:	f107 0115 	add.w	r1, r7, #21
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f7ff fd3d 	bl	8000ffa <bme280_get_regs>
 8001580:	4603      	mov	r3, r0
 8001582:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d11f      	bne.n	80015cc <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001596:	f107 0315 	add.w	r3, r7, #21
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f88e 	bl	80016be <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015ac:	f107 0315 	add.w	r3, r7, #21
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f8a0 	bl	80016f8 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015b8:	f107 0115 	add.w	r1, r7, #21
 80015bc:	f107 0016 	add.w	r0, r7, #22
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f7ff fd49 	bl	800105a <bme280_set_regs>
 80015c8:	4603      	mov	r3, r0
 80015ca:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80015e6:	23f5      	movs	r3, #245	; 0xf5
 80015e8:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015ea:	7db8      	ldrb	r0, [r7, #22]
 80015ec:	f107 0115 	add.w	r1, r7, #21
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f7ff fd01 	bl	8000ffa <bme280_get_regs>
 80015f8:	4603      	mov	r3, r0
 80015fa:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d11f      	bne.n	8001644 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800160e:	f107 0315 	add.w	r3, r7, #21
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f81b 	bl	8001650 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001624:	f107 0315 	add.w	r3, r7, #21
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f82d 	bl	800168a <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001630:	f107 0115 	add.w	r1, r7, #21
 8001634:	f107 0016 	add.w	r0, r7, #22
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f7ff fd0d 	bl	800105a <bme280_set_regs>
 8001640:	4603      	mov	r3, r0
 8001642:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	f023 031c 	bic.w	r3, r3, #28
 8001664:	b25a      	sxtb	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	78db      	ldrb	r3, [r3, #3]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	b25b      	sxtb	r3, r3
 800166e:	f003 031c 	and.w	r3, r3, #28
 8001672:	b25b      	sxtb	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b25b      	sxtb	r3, r3
 8001678:	b2da      	uxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b25b      	sxtb	r3, r3
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	791b      	ldrb	r3, [r3, #4]
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	701a      	strb	r2, [r3, #0]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	f023 031c 	bic.w	r3, r3, #28
 80016d2:	b25a      	sxtb	r2, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	f003 031c 	and.w	r3, r3, #28
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	701a      	strb	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b25b      	sxtb	r3, r3
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	b25a      	sxtb	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	b25b      	sxtb	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b25b      	sxtb	r3, r3
 800171a:	b2da      	uxtb	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	b2da      	uxtb	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3302      	adds	r3, #2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	109b      	asrs	r3, r3, #2
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	b2da      	uxtb	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3302      	adds	r3, #2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3303      	adds	r3, #3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	109b      	asrs	r3, r3, #2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	b2da      	uxtb	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3303      	adds	r3, #3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	095b      	lsrs	r3, r3, #5
 8001782:	b2da      	uxtb	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	711a      	strb	r2, [r3, #4]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017a0:	23f4      	movs	r3, #244	; 0xf4
 80017a2:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017a4:	7bb8      	ldrb	r0, [r7, #14]
 80017a6:	f107 010d 	add.w	r1, r7, #13
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f7ff fc24 	bl	8000ffa <bme280_get_regs>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d117      	bne.n	80017ee <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017be:	7b7b      	ldrb	r3, [r7, #13]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	b25a      	sxtb	r2, r3
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017da:	f107 010d 	add.w	r1, r7, #13
 80017de:	f107 000e 	add.w	r0, r7, #14
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f7ff fc38 	bl	800105a <bme280_set_regs>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001802:	f107 0110 	add.w	r1, r7, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2204      	movs	r2, #4
 800180a:	20f2      	movs	r0, #242	; 0xf2
 800180c:	f7ff fbf5 	bl	8000ffa <bme280_get_regs>
 8001810:	4603      	mov	r3, r0
 8001812:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d118      	bne.n	800184e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800181c:	f107 0208 	add.w	r2, r7, #8
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff80 	bl	800172c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fd39 	bl	80012a4 <bme280_soft_reset>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f808 	bl	800185a <reload_device_settings>
 800184a:	4603      	mov	r3, r0
 800184c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800184e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	201f      	movs	r0, #31
 800186a:	f7ff fe18 	bl	800149e <set_osr_settings>
 800186e:	4603      	mov	r3, r0
 8001870:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	201f      	movs	r0, #31
 8001880:	f7ff feaa 	bl	80015d8 <set_filter_standby_settings>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <compensate_temperature+0xc0>)
 80018a0:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80018a2:	f242 1334 	movw	r3, #8500	; 0x2134
 80018a6:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	0052      	lsls	r2, r2, #1
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018be:	461a      	mov	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da01      	bge.n	80018ce <compensate_temperature+0x3a>
 80018ca:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80018ce:	12db      	asrs	r3, r3, #11
 80018d0:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	8812      	ldrh	r2, [r2, #0]
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	fb03 f303 	mul.w	r3, r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da01      	bge.n	80018ee <compensate_temperature+0x5a>
 80018ea:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80018ee:	131b      	asrs	r3, r3, #12
 80018f0:	461a      	mov	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da02      	bge.n	8001906 <compensate_temperature+0x72>
 8001900:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001904:	333f      	adds	r3, #63	; 0x3f
 8001906:	139b      	asrs	r3, r3, #14
 8001908:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	441a      	add	r2, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3380      	adds	r3, #128	; 0x80
 8001920:	2b00      	cmp	r3, #0
 8001922:	da00      	bge.n	8001926 <compensate_temperature+0x92>
 8001924:	33ff      	adds	r3, #255	; 0xff
 8001926:	121b      	asrs	r3, r3, #8
 8001928:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	429a      	cmp	r2, r3
 8001930:	da02      	bge.n	8001938 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	e005      	b.n	8001944 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	dd01      	ble.n	8001944 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001944:	69fb      	ldr	r3, [r7, #28]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	fffff060 	.word	0xfffff060

08001958 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800195c:	b0ea      	sub	sp, #424	; 0x1a8
 800195e:	af00      	add	r7, sp, #0
 8001960:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8001964:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001968:	4bbf      	ldr	r3, [pc, #764]	; (8001c68 <compensate_pressure+0x310>)
 800196a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 800196e:	4bbf      	ldr	r3, [pc, #764]	; (8001c6c <compensate_pressure+0x314>)
 8001970:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001974:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	17da      	asrs	r2, r3, #31
 800197c:	4698      	mov	r8, r3
 800197e:	4691      	mov	r9, r2
 8001980:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001984:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001988:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 800198c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001990:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001994:	fb03 f102 	mul.w	r1, r3, r2
 8001998:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800199c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	18ca      	adds	r2, r1, r3
 80019a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019aa:	fba3 4503 	umull	r4, r5, r3, r3
 80019ae:	1953      	adds	r3, r2, r5
 80019b0:	461d      	mov	r5, r3
 80019b2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	17da      	asrs	r2, r3, #31
 80019be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019c2:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80019c6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80019ca:	4603      	mov	r3, r0
 80019cc:	fb03 f205 	mul.w	r2, r3, r5
 80019d0:	460b      	mov	r3, r1
 80019d2:	fb04 f303 	mul.w	r3, r4, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	4602      	mov	r2, r0
 80019da:	fba4 1202 	umull	r1, r2, r4, r2
 80019de:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80019e2:	460a      	mov	r2, r1
 80019e4:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 80019e8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80019ec:	4413      	add	r3, r2
 80019ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80019f2:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80019f6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80019fa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 80019fe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	17da      	asrs	r2, r3, #31
 8001a0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001a0e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a16:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001a1a:	462a      	mov	r2, r5
 8001a1c:	fb02 f203 	mul.w	r2, r2, r3
 8001a20:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a24:	4621      	mov	r1, r4
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	441a      	add	r2, r3
 8001a2c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a30:	4621      	mov	r1, r4
 8001a32:	fba3 1301 	umull	r1, r3, r3, r1
 8001a36:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001a40:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8001a56:	462b      	mov	r3, r5
 8001a58:	0459      	lsls	r1, r3, #17
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001a60:	4623      	mov	r3, r4
 8001a62:	0458      	lsls	r0, r3, #17
 8001a64:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001a68:	1814      	adds	r4, r2, r0
 8001a6a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001a6e:	414b      	adcs	r3, r1
 8001a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001a74:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001a78:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001a7c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a80:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	17da      	asrs	r2, r3, #31
 8001a88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001a8c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a9c:	00d9      	lsls	r1, r3, #3
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001aa4:	1814      	adds	r4, r2, r0
 8001aa6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8001aaa:	414b      	adcs	r3, r1
 8001aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ab0:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001ab4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001ab8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001abc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ac0:	fb03 f102 	mul.w	r1, r3, r2
 8001ac4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ac8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	18ca      	adds	r2, r1, r3
 8001ad2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ad6:	fba3 1303 	umull	r1, r3, r3, r3
 8001ada:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001ade:	460b      	mov	r3, r1
 8001ae0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001ae4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ae8:	18d3      	adds	r3, r2, r3
 8001aea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001aee:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001af2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	17da      	asrs	r2, r3, #31
 8001afa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001afe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001b02:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001b06:	462b      	mov	r3, r5
 8001b08:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	fb02 f203 	mul.w	r2, r2, r3
 8001b12:	464b      	mov	r3, r9
 8001b14:	4621      	mov	r1, r4
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	4641      	mov	r1, r8
 8001b20:	fba2 1201 	umull	r1, r2, r2, r1
 8001b24:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8001b28:	460a      	mov	r2, r1
 8001b2a:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8001b2e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001b32:	4413      	add	r3, r2
 8001b34:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001b38:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	da09      	bge.n	8001b54 <compensate_pressure+0x1fc>
 8001b40:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001b44:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001b48:	f143 0300 	adc.w	r3, r3, #0
 8001b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b50:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0a10      	lsrs	r0, r2, #8
 8001b5e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b62:	1219      	asrs	r1, r3, #8
 8001b64:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	17da      	asrs	r2, r3, #31
 8001b70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001b74:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001b78:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b7c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001b80:	464a      	mov	r2, r9
 8001b82:	fb02 f203 	mul.w	r2, r2, r3
 8001b86:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b8a:	4644      	mov	r4, r8
 8001b8c:	fb04 f303 	mul.w	r3, r4, r3
 8001b90:	441a      	add	r2, r3
 8001b92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b96:	4644      	mov	r4, r8
 8001b98:	fba3 4304 	umull	r4, r3, r3, r4
 8001b9c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ba6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001bbc:	464c      	mov	r4, r9
 8001bbe:	0323      	lsls	r3, r4, #12
 8001bc0:	4644      	mov	r4, r8
 8001bc2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bc6:	4644      	mov	r4, r8
 8001bc8:	0322      	lsls	r2, r4, #12
 8001bca:	1884      	adds	r4, r0, r2
 8001bcc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001bd0:	eb41 0303 	adc.w	r3, r1, r3
 8001bd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bd8:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001bdc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001be8:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001bec:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001bf0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001bf4:	1884      	adds	r4, r0, r2
 8001bf6:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8001bfa:	eb41 0303 	adc.w	r3, r1, r3
 8001bfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c02:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c06:	88db      	ldrh	r3, [r3, #6]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c10:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001c14:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001c18:	462b      	mov	r3, r5
 8001c1a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001c1e:	4642      	mov	r2, r8
 8001c20:	fb02 f203 	mul.w	r2, r2, r3
 8001c24:	464b      	mov	r3, r9
 8001c26:	4621      	mov	r1, r4
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4622      	mov	r2, r4
 8001c30:	4641      	mov	r1, r8
 8001c32:	fba2 1201 	umull	r1, r2, r2, r1
 8001c36:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c40:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c44:	4413      	add	r3, r2
 8001c46:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c4a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da0e      	bge.n	8001c70 <compensate_pressure+0x318>
 8001c52:	1e51      	subs	r1, r2, #1
 8001c54:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001c58:	f143 0301 	adc.w	r3, r3, #1
 8001c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c64:	e004      	b.n	8001c70 <compensate_pressure+0x318>
 8001c66:	bf00      	nop
 8001c68:	002dc6c0 	.word	0x002dc6c0
 8001c6c:	00a7d8c0 	.word	0x00a7d8c0
 8001c70:	f04f 0000 	mov.w	r0, #0
 8001c74:	f04f 0100 	mov.w	r1, #0
 8001c78:	1058      	asrs	r0, r3, #1
 8001c7a:	17d9      	asrs	r1, r3, #31
 8001c7c:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001c80:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f000 81fc 	beq.w	8002082 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001c8a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c9a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001c9e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001ca2:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001ca6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001caa:	f04f 0000 	mov.w	r0, #0
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	07d9      	lsls	r1, r3, #31
 8001cb4:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001cb8:	07d0      	lsls	r0, r2, #31
 8001cba:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001cbe:	1a84      	subs	r4, r0, r2
 8001cc0:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8001cc4:	eb61 0303 	sbc.w	r3, r1, r3
 8001cc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ccc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	1891      	adds	r1, r2, r2
 8001cd6:	67b9      	str	r1, [r7, #120]	; 0x78
 8001cd8:	415b      	adcs	r3, r3
 8001cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cdc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	1851      	adds	r1, r2, r1
 8001ce4:	6739      	str	r1, [r7, #112]	; 0x70
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	414b      	adcs	r3, r1
 8001cea:	677b      	str	r3, [r7, #116]	; 0x74
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	018b      	lsls	r3, r1, #6
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d02:	4641      	mov	r1, r8
 8001d04:	018a      	lsls	r2, r1, #6
 8001d06:	4641      	mov	r1, r8
 8001d08:	1889      	adds	r1, r1, r2
 8001d0a:	66b9      	str	r1, [r7, #104]	; 0x68
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	eb43 0101 	adc.w	r1, r3, r1
 8001d12:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001d20:	4649      	mov	r1, r9
 8001d22:	008b      	lsls	r3, r1, #2
 8001d24:	4641      	mov	r1, r8
 8001d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	008a      	lsls	r2, r1, #2
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	4622      	mov	r2, r4
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	663b      	str	r3, [r7, #96]	; 0x60
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	462a      	mov	r2, r5
 8001d3e:	eb42 0303 	adc.w	r3, r2, r3
 8001d42:	667b      	str	r3, [r7, #100]	; 0x64
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001d50:	4649      	mov	r1, r9
 8001d52:	008b      	lsls	r3, r1, #2
 8001d54:	4641      	mov	r1, r8
 8001d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	008a      	lsls	r2, r1, #2
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	4622      	mov	r2, r4
 8001d66:	189b      	adds	r3, r3, r2
 8001d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d6c:	462b      	mov	r3, r5
 8001d6e:	460a      	mov	r2, r1
 8001d70:	eb42 0303 	adc.w	r3, r2, r3
 8001d74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d78:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001d7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d80:	f7fe ff3a 	bl	8000bf8 <__aeabi_ldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001d8c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001d90:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	17da      	asrs	r2, r3, #31
 8001d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d9c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001da0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	da08      	bge.n	8001dba <compensate_pressure+0x462>
 8001da8:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001dac:	1851      	adds	r1, r2, r1
 8001dae:	65b9      	str	r1, [r7, #88]	; 0x58
 8001db0:	f143 0300 	adc.w	r3, r3, #0
 8001db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001db6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dba:	f04f 0000 	mov.w	r0, #0
 8001dbe:	f04f 0100 	mov.w	r1, #0
 8001dc2:	0b50      	lsrs	r0, r2, #13
 8001dc4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc8:	1359      	asrs	r1, r3, #13
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	fb02 f001 	mul.w	r0, r2, r1
 8001dd8:	4621      	mov	r1, r4
 8001dda:	fb01 f103 	mul.w	r1, r1, r3
 8001dde:	4401      	add	r1, r0
 8001de0:	4620      	mov	r0, r4
 8001de2:	fba0 2302 	umull	r2, r3, r0, r2
 8001de6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001dea:	4613      	mov	r3, r2
 8001dec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001df0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001df4:	18cb      	adds	r3, r1, r3
 8001df6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001dfa:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da08      	bge.n	8001e14 <compensate_pressure+0x4bc>
 8001e02:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001e06:	1851      	adds	r1, r2, r1
 8001e08:	6539      	str	r1, [r7, #80]	; 0x50
 8001e0a:	f143 0300 	adc.w	r3, r3, #0
 8001e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8001e10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	0b50      	lsrs	r0, r2, #13
 8001e1e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e22:	1359      	asrs	r1, r3, #13
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	fb02 f001 	mul.w	r0, r2, r1
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f103 	mul.w	r1, r1, r3
 8001e38:	4401      	add	r1, r0
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	fba0 2302 	umull	r2, r3, r0, r2
 8001e40:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001e44:	4613      	mov	r3, r2
 8001e46:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001e4a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e4e:	18cb      	adds	r3, r1, r3
 8001e50:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001e54:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da08      	bge.n	8001e6e <compensate_pressure+0x516>
 8001e5c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001e60:	1851      	adds	r1, r2, r1
 8001e62:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e64:	f143 0300 	adc.w	r3, r3, #0
 8001e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e6e:	f04f 0000 	mov.w	r0, #0
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	0e50      	lsrs	r0, r2, #25
 8001e78:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001e7c:	1659      	asrs	r1, r3, #25
 8001e7e:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001e82:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001e86:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	17da      	asrs	r2, r3, #31
 8001e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e92:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e96:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001e9a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001e9e:	462a      	mov	r2, r5
 8001ea0:	fb02 f203 	mul.w	r2, r2, r3
 8001ea4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	441a      	add	r2, r3
 8001eb0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	fba3 1301 	umull	r1, r3, r3, r1
 8001eba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001ec4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ec8:	18d3      	adds	r3, r2, r3
 8001eca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001ece:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da07      	bge.n	8001ee6 <compensate_pressure+0x58e>
 8001ed6:	4971      	ldr	r1, [pc, #452]	; (800209c <compensate_pressure+0x744>)
 8001ed8:	1851      	adds	r1, r2, r1
 8001eda:	6439      	str	r1, [r7, #64]	; 0x40
 8001edc:	f143 0300 	adc.w	r3, r3, #0
 8001ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	0cd0      	lsrs	r0, r2, #19
 8001ef0:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001ef4:	14d9      	asrs	r1, r3, #19
 8001ef6:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001efa:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001efe:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001f02:	1884      	adds	r4, r0, r2
 8001f04:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8001f08:	eb41 0303 	adc.w	r3, r1, r3
 8001f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f10:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001f14:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001f18:	4621      	mov	r1, r4
 8001f1a:	1889      	adds	r1, r1, r2
 8001f1c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001f20:	4629      	mov	r1, r5
 8001f22:	eb43 0101 	adc.w	r1, r3, r1
 8001f26:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001f2a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da07      	bge.n	8001f42 <compensate_pressure+0x5ea>
 8001f32:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001f36:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f38:	f143 0300 	adc.w	r3, r3, #0
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	0a10      	lsrs	r0, r2, #8
 8001f4c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f50:	1219      	asrs	r1, r3, #8
 8001f52:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f56:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	17da      	asrs	r2, r3, #31
 8001f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f62:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f72:	464c      	mov	r4, r9
 8001f74:	0123      	lsls	r3, r4, #4
 8001f76:	4644      	mov	r4, r8
 8001f78:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f7c:	4644      	mov	r4, r8
 8001f7e:	0122      	lsls	r2, r4, #4
 8001f80:	1884      	adds	r4, r0, r2
 8001f82:	633c      	str	r4, [r7, #48]	; 0x30
 8001f84:	eb41 0303 	adc.w	r3, r1, r3
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001f8e:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001f92:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001f96:	0fd9      	lsrs	r1, r3, #31
 8001f98:	2000      	movs	r0, #0
 8001f9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001f9e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	1889      	adds	r1, r1, r2
 8001fa6:	6239      	str	r1, [r7, #32]
 8001fa8:	4629      	mov	r1, r5
 8001faa:	eb43 0101 	adc.w	r1, r3, r1
 8001fae:	6279      	str	r1, [r7, #36]	; 0x24
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	084a      	lsrs	r2, r1, #1
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	104b      	asrs	r3, r1, #1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	1894      	adds	r4, r2, r2
 8001fd4:	61bc      	str	r4, [r7, #24]
 8001fd6:	415b      	adcs	r3, r3
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fde:	1814      	adds	r4, r2, r0
 8001fe0:	613c      	str	r4, [r7, #16]
 8001fe2:	414b      	adcs	r3, r1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001ff2:	464c      	mov	r4, r9
 8001ff4:	0163      	lsls	r3, r4, #5
 8001ff6:	4644      	mov	r4, r8
 8001ff8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001ffc:	4644      	mov	r4, r8
 8001ffe:	0162      	lsls	r2, r4, #5
 8002000:	4644      	mov	r4, r8
 8002002:	18a4      	adds	r4, r4, r2
 8002004:	60bc      	str	r4, [r7, #8]
 8002006:	464c      	mov	r4, r9
 8002008:	eb43 0404 	adc.w	r4, r3, r4
 800200c:	60fc      	str	r4, [r7, #12]
 800200e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002012:	4623      	mov	r3, r4
 8002014:	181b      	adds	r3, r3, r0
 8002016:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800201a:	462b      	mov	r3, r5
 800201c:	eb41 0303 	adc.w	r3, r1, r3
 8002020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002024:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002028:	2b00      	cmp	r3, #0
 800202a:	da07      	bge.n	800203c <compensate_pressure+0x6e4>
 800202c:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	f143 0300 	adc.w	r3, r3, #0
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800203c:	f04f 0000 	mov.w	r0, #0
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	09d0      	lsrs	r0, r2, #7
 8002046:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800204a:	11d9      	asrs	r1, r3, #7
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4613      	mov	r3, r2
 8002052:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 8002056:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800205a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800205e:	429a      	cmp	r2, r3
 8002060:	d204      	bcs.n	800206c <compensate_pressure+0x714>
			pressure = pressure_min;
 8002062:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002066:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800206a:	e00e      	b.n	800208a <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 800206c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002070:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002074:	429a      	cmp	r2, r3
 8002076:	d908      	bls.n	800208a <compensate_pressure+0x732>
			pressure = pressure_max;
 8002078:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800207c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002080:	e003      	b.n	800208a <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 8002082:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002086:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 800208a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 800208e:	4618      	mov	r0, r3
 8002090:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8002094:	46bd      	mov	sp, r7
 8002096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209a:	bf00      	nop
 800209c:	0007ffff 	.word	0x0007ffff

080020a0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b08b      	sub	sp, #44	; 0x2c
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 80020aa:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80020ae:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80020b8:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	039b      	lsls	r3, r3, #14
 80020c0:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80020d2:	461a      	mov	r2, r3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	1ad2      	subs	r2, r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da02      	bge.n	80020f4 <compensate_humidity+0x54>
 80020ee:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80020f2:	337f      	adds	r3, #127	; 0x7f
 80020f4:	13db      	asrs	r3, r3, #15
 80020f6:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80020fe:	461a      	mov	r2, r3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	da01      	bge.n	800210e <compensate_humidity+0x6e>
 800210a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800210e:	129b      	asrs	r3, r3, #10
 8002110:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	7f1b      	ldrb	r3, [r3, #28]
 8002116:	461a      	mov	r2, r3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	da01      	bge.n	8002126 <compensate_humidity+0x86>
 8002122:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002126:	12db      	asrs	r3, r3, #11
 8002128:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	da01      	bge.n	800213e <compensate_humidity+0x9e>
 800213a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800213e:	129b      	asrs	r3, r3, #10
 8002140:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002144:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800214c:	461a      	mov	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002158:	2b00      	cmp	r3, #0
 800215a:	da02      	bge.n	8002162 <compensate_humidity+0xc2>
 800215c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002160:	333f      	adds	r3, #63	; 0x3f
 8002162:	139b      	asrs	r3, r3, #14
 8002164:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da02      	bge.n	800217c <compensate_humidity+0xdc>
 8002176:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800217a:	337f      	adds	r3, #127	; 0x7f
 800217c:	13db      	asrs	r3, r3, #15
 800217e:	461a      	mov	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	da02      	bge.n	800218c <compensate_humidity+0xec>
 8002186:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800218a:	337f      	adds	r3, #127	; 0x7f
 800218c:	13db      	asrs	r3, r3, #15
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	da00      	bge.n	8002198 <compensate_humidity+0xf8>
 8002196:	337f      	adds	r3, #127	; 0x7f
 8002198:	11db      	asrs	r3, r3, #7
 800219a:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	7e1b      	ldrb	r3, [r3, #24]
 80021a0:	461a      	mov	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	da00      	bge.n	80021ae <compensate_humidity+0x10e>
 80021ac:	330f      	adds	r3, #15
 80021ae:	111b      	asrs	r3, r3, #4
 80021b0:	425b      	negs	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021c0:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80021c8:	bfa8      	it	ge
 80021ca:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80021ce:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da01      	bge.n	80021da <compensate_humidity+0x13a>
 80021d6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80021da:	131b      	asrs	r3, r3, #12
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 80021de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d901      	bls.n	80021ea <compensate_humidity+0x14a>
		humidity = humidity_max;
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	372c      	adds	r7, #44	; 0x2c
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002200:	2388      	movs	r3, #136	; 0x88
 8002202:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]
 800221a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800221c:	f107 010c 	add.w	r1, r7, #12
 8002220:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	221a      	movs	r2, #26
 8002228:	f7fe fee7 	bl	8000ffa <bme280_get_regs>
 800222c:	4603      	mov	r3, r0
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8002232:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11d      	bne.n	8002276 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f84a 	bl	80022da <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002246:	23e1      	movs	r3, #225	; 0xe1
 8002248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800224c:	f107 010c 	add.w	r1, r7, #12
 8002250:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2207      	movs	r2, #7
 8002258:	f7fe fecf 	bl	8000ffa <bme280_get_regs>
 800225c:	4603      	mov	r3, r0
 800225e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8002262:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f8e2 	bl	800243a <parse_humidity_calib_data>
		}
	}

	return rslt;
 8002276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800227a:	4618      	mov	r0, r3
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002282:	b480      	push	{r7}
 8002284:	b087      	sub	sp, #28
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002290:	2301      	movs	r3, #1
 8002292:	75fb      	strb	r3, [r7, #23]
 8002294:	e016      	b.n	80022c4 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	441a      	add	r2, r3
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	440b      	add	r3, r1
 80022a6:	7812      	ldrb	r2, [r2, #0]
 80022a8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	441a      	add	r2, r3
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4619      	mov	r1, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	440b      	add	r3, r1
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	3301      	adds	r3, #1
 80022c2:	75fb      	strb	r3, [r7, #23]
 80022c4:	7dfa      	ldrb	r2, [r7, #23]
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3e4      	bcc.n	8002296 <interleave_reg_addr+0x14>
	}
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3310      	adds	r3, #16
 80022e8:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3301      	adds	r3, #1
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3303      	adds	r3, #3
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b21a      	sxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3302      	adds	r3, #2
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b21b      	sxth	r3, r3
 8002316:	4313      	orrs	r3, r2
 8002318:	b21a      	sxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3305      	adds	r3, #5
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b21a      	sxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b21b      	sxth	r3, r3
 8002330:	4313      	orrs	r3, r2
 8002332:	b21a      	sxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3307      	adds	r3, #7
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b21a      	sxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3306      	adds	r3, #6
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	b21b      	sxth	r3, r3
 800234a:	4313      	orrs	r3, r2
 800234c:	b21b      	sxth	r3, r3
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3309      	adds	r3, #9
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b21a      	sxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3308      	adds	r3, #8
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b21b      	sxth	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b21a      	sxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	330b      	adds	r3, #11
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	b21a      	sxth	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	330a      	adds	r3, #10
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21a      	sxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	330d      	adds	r3, #13
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	b21a      	sxth	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	330c      	adds	r3, #12
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b21b      	sxth	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b21a      	sxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	330f      	adds	r3, #15
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	330e      	adds	r3, #14
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3311      	adds	r3, #17
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	b21a      	sxth	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3310      	adds	r3, #16
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3313      	adds	r3, #19
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b21a      	sxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3312      	adds	r3, #18
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3315      	adds	r3, #21
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	b21a      	sxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3314      	adds	r3, #20
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b21b      	sxth	r3, r3
 8002402:	4313      	orrs	r3, r2
 8002404:	b21a      	sxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3317      	adds	r3, #23
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3316      	adds	r3, #22
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b21b      	sxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b21a      	sxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3319      	adds	r3, #25
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	761a      	strb	r2, [r3, #24]

}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800243a:	b480      	push	{r7}
 800243c:	b087      	sub	sp, #28
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3310      	adds	r3, #16
 8002448:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3301      	adds	r3, #1
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21a      	sxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b21b      	sxth	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	b21a      	sxth	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3302      	adds	r3, #2
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3303      	adds	r3, #3
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	b25b      	sxtb	r3, r3
 8002474:	b29b      	uxth	r3, r3
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	b29b      	uxth	r3, r3
 800247a:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b21b      	sxth	r3, r3
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800248a:	8a7a      	ldrh	r2, [r7, #18]
 800248c:	8a3b      	ldrh	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	b21a      	sxth	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3305      	adds	r3, #5
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b25b      	sxtb	r3, r3
 800249e:	b29b      	uxth	r3, r3
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80024b2:	89fa      	ldrh	r2, [r7, #14]
 80024b4:	89bb      	ldrh	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3306      	adds	r3, #6
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b25a      	sxtb	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	460a      	mov	r2, r1
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	4613      	mov	r3, r2
 80024e6:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 80024ec:	79fa      	ldrb	r2, [r7, #7]
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	4013      	ands	r3, r2
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	e001      	b.n	8002502 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <null_ptr_check+0x26>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <null_ptr_check+0x26>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <null_ptr_check+0x26>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002536:	23ff      	movs	r3, #255	; 0xff
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e001      	b.n	8002540 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002540:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800255e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4313      	orrs	r3, r2
 8002566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4013      	ands	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002574:	68fb      	ldr	r3, [r7, #12]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <bme280_error_codes_print_result>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bme280_error_codes_print_result(const char api_name[], int8_t rslt)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
    if (rslt != BME280_OK)
 8002590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03c      	beq.n	8002612 <bme280_error_codes_print_result+0x8e>
    {
        printf("%s\t", api_name);
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4820      	ldr	r0, [pc, #128]	; (800261c <bme280_error_codes_print_result+0x98>)
 800259c:	f004 fd70 	bl	8007080 <iprintf>

        switch (rslt)
 80025a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d82c      	bhi.n	8002604 <bme280_error_codes_print_result+0x80>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <bme280_error_codes_print_result+0x2c>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025d5 	.word	0x080025d5
 80025b4:	080025f7 	.word	0x080025f7
 80025b8:	080025e9 	.word	0x080025e9
 80025bc:	080025c1 	.word	0x080025c1
        {
            case BME280_E_NULL_PTR:
                printf("Error [%d] : Null pointer error.", rslt);
 80025c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4816      	ldr	r0, [pc, #88]	; (8002620 <bme280_error_codes_print_result+0x9c>)
 80025c8:	f004 fd5a 	bl	8007080 <iprintf>
                printf(
 80025cc:	4815      	ldr	r0, [pc, #84]	; (8002624 <bme280_error_codes_print_result+0xa0>)
 80025ce:	f004 fdbd 	bl	800714c <puts>
                    "It occurs when the user tries to assign value (not address) to a pointer, which has been initialized to NULL.\r\n");
                break;
 80025d2:	e01e      	b.n	8002612 <bme280_error_codes_print_result+0x8e>

            case BME280_E_COMM_FAIL:
                printf("Error [%d] : Communication failure error.", rslt);
 80025d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d8:	4619      	mov	r1, r3
 80025da:	4813      	ldr	r0, [pc, #76]	; (8002628 <bme280_error_codes_print_result+0xa4>)
 80025dc:	f004 fd50 	bl	8007080 <iprintf>
                printf(
 80025e0:	4812      	ldr	r0, [pc, #72]	; (800262c <bme280_error_codes_print_result+0xa8>)
 80025e2:	f004 fdb3 	bl	800714c <puts>
                    "It occurs due to read/write operation failure and also due to power failure during communication\r\n");
                break;
 80025e6:	e014      	b.n	8002612 <bme280_error_codes_print_result+0x8e>

            case BME280_E_DEV_NOT_FOUND:
                printf("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n",
 80025e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4810      	ldr	r0, [pc, #64]	; (8002630 <bme280_error_codes_print_result+0xac>)
 80025f0:	f004 fd46 	bl	8007080 <iprintf>
                       rslt);
                break;
 80025f4:	e00d      	b.n	8002612 <bme280_error_codes_print_result+0x8e>

            case BME280_E_INVALID_LEN:
                printf("Error [%d] : Invalid length error. It occurs when write is done with invalid length\r\n", rslt);
 80025f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fa:	4619      	mov	r1, r3
 80025fc:	480d      	ldr	r0, [pc, #52]	; (8002634 <bme280_error_codes_print_result+0xb0>)
 80025fe:	f004 fd3f 	bl	8007080 <iprintf>
                break;
 8002602:	e006      	b.n	8002612 <bme280_error_codes_print_result+0x8e>

            default:
                printf("Error [%d] : Unknown error code\r\n", rslt);
 8002604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002608:	4619      	mov	r1, r3
 800260a:	480b      	ldr	r0, [pc, #44]	; (8002638 <bme280_error_codes_print_result+0xb4>)
 800260c:	f004 fd38 	bl	8007080 <iprintf>
                break;
 8002610:	bf00      	nop
        }
    }
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	08008f80 	.word	0x08008f80
 8002620:	08008f84 	.word	0x08008f84
 8002624:	08008fa8 	.word	0x08008fa8
 8002628:	08009018 	.word	0x08009018
 800262c:	08009044 	.word	0x08009044
 8002630:	080090a8 	.word	0x080090a8
 8002634:	08009108 	.word	0x08009108
 8002638:	08009160 	.word	0x08009160

0800263c <user_i2c_read>:


int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af02      	add	r7, sp, #8
 8002642:	603a      	str	r2, [r7, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	460b      	mov	r3, r1
 800264c:	71bb      	strb	r3, [r7, #6]
 800264e:	4613      	mov	r3, r2
 8002650:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	b29b      	uxth	r3, r3
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	b299      	uxth	r1, r3
 800265a:	1dba      	adds	r2, r7, #6
 800265c:	230a      	movs	r3, #10
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2301      	movs	r3, #1
 8002662:	4811      	ldr	r0, [pc, #68]	; (80026a8 <user_i2c_read+0x6c>)
 8002664:	f001 f91e 	bl	80038a4 <HAL_I2C_Master_Transmit>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <user_i2c_read+0x38>
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e014      	b.n	800269e <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	b21b      	sxth	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b21b      	sxth	r3, r3
 8002680:	b299      	uxth	r1, r3
 8002682:	88bb      	ldrh	r3, [r7, #4]
 8002684:	220a      	movs	r2, #10
 8002686:	9200      	str	r2, [sp, #0]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4807      	ldr	r0, [pc, #28]	; (80026a8 <user_i2c_read+0x6c>)
 800268c:	f001 fa22 	bl	8003ad4 <HAL_I2C_Master_Receive>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <user_i2c_read+0x60>
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	e000      	b.n	800269e <user_i2c_read+0x62>

  return 0;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200001f8 	.word	0x200001f8

080026ac <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fdb5 	bl	8003224 <HAL_Delay>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	603a      	str	r2, [r7, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	460b      	mov	r3, r1
 80026d4:	71bb      	strb	r3, [r7, #6]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 80026da:	88bb      	ldrh	r3, [r7, #4]
 80026dc:	3301      	adds	r3, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 feea 	bl	80064b8 <malloc>
 80026e4:	4603      	mov	r3, r0
 80026e6:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 80026e8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3301      	adds	r3, #1
 80026f4:	88ba      	ldrh	r2, [r7, #4]
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 fe96 	bl	800742a <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	b29b      	uxth	r3, r3
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	b299      	uxth	r1, r3
 8002706:	88bb      	ldrh	r3, [r7, #4]
 8002708:	3301      	adds	r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	9200      	str	r2, [sp, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4808      	ldr	r0, [pc, #32]	; (8002738 <user_i2c_write+0x74>)
 8002716:	f001 f8c5 	bl	80038a4 <HAL_I2C_Master_Transmit>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <user_i2c_write+0x62>
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	e003      	b.n	800272e <user_i2c_write+0x6a>

  free(buf);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f003 fece 	bl	80064c8 <free>
  return 0;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200001f8 	.word	0x200001f8
 800273c:	00000000 	.word	0x00000000

08002740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002744:	f000 fce8 	bl	8003118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002748:	f000 f906 	bl	8002958 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800274c:	f000 f978 	bl	8002a40 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002750:	f000 fa2e 	bl	8002bb0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8002754:	f000 fa04 	bl	8002b60 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8002758:	f000 f9d0 	bl	8002afc <MX_RTC_Init>
  MX_I2C1_Init();
 800275c:	f000 f98e 	bl	8002a7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* BME280 init */
  dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002760:	4b6f      	ldr	r3, [pc, #444]	; (8002920 <main+0x1e0>)
 8002762:	2276      	movs	r2, #118	; 0x76
 8002764:	705a      	strb	r2, [r3, #1]
  dev.chip_id = BME280_CHIP_ID;
 8002766:	4b6e      	ldr	r3, [pc, #440]	; (8002920 <main+0x1e0>)
 8002768:	2260      	movs	r2, #96	; 0x60
 800276a:	701a      	strb	r2, [r3, #0]
  dev.intf = BME280_I2C_INTF;
 800276c:	4b6c      	ldr	r3, [pc, #432]	; (8002920 <main+0x1e0>)
 800276e:	2201      	movs	r2, #1
 8002770:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 8002772:	4b6b      	ldr	r3, [pc, #428]	; (8002920 <main+0x1e0>)
 8002774:	4a6b      	ldr	r2, [pc, #428]	; (8002924 <main+0x1e4>)
 8002776:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 8002778:	4b69      	ldr	r3, [pc, #420]	; (8002920 <main+0x1e0>)
 800277a:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <main+0x1e8>)
 800277c:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 800277e:	4b68      	ldr	r3, [pc, #416]	; (8002920 <main+0x1e0>)
 8002780:	4a6a      	ldr	r2, [pc, #424]	; (800292c <main+0x1ec>)
 8002782:	60da      	str	r2, [r3, #12]

  result = bme280_init(&dev);
 8002784:	4866      	ldr	r0, [pc, #408]	; (8002920 <main+0x1e0>)
 8002786:	f7fe fbed 	bl	8000f64 <bme280_init>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	4b68      	ldr	r3, [pc, #416]	; (8002930 <main+0x1f0>)
 8002790:	701a      	strb	r2, [r3, #0]
  bme280_error_codes_print_result("bme280_init", result);
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <main+0x1f0>)
 8002794:	f993 3000 	ldrsb.w	r3, [r3]
 8002798:	4619      	mov	r1, r3
 800279a:	4866      	ldr	r0, [pc, #408]	; (8002934 <main+0x1f4>)
 800279c:	f7ff fef2 	bl	8002584 <bme280_error_codes_print_result>

      /* BME280 settings */
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80027a0:	4b5f      	ldr	r3, [pc, #380]	; (8002920 <main+0x1e0>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80027a8:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <main+0x1e0>)
 80027aa:	2205      	movs	r2, #5
 80027ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80027b0:	4b5b      	ldr	r3, [pc, #364]	; (8002920 <main+0x1e0>)
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 80027b8:	4b59      	ldr	r3, [pc, #356]	; (8002920 <main+0x1e0>)
 80027ba:	2204      	movs	r2, #4
 80027bc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  result = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80027c0:	4957      	ldr	r1, [pc, #348]	; (8002920 <main+0x1e0>)
 80027c2:	200f      	movs	r0, #15
 80027c4:	f7fe fcc2 	bl	800114c <bme280_set_sensor_settings>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b58      	ldr	r3, [pc, #352]	; (8002930 <main+0x1f0>)
 80027ce:	701a      	strb	r2, [r3, #0]
  bme280_error_codes_print_result("bme280_set_sensor_settings", result);
 80027d0:	4b57      	ldr	r3, [pc, #348]	; (8002930 <main+0x1f0>)
 80027d2:	f993 3000 	ldrsb.w	r3, [r3]
 80027d6:	4619      	mov	r1, r3
 80027d8:	4857      	ldr	r0, [pc, #348]	; (8002938 <main+0x1f8>)
 80027da:	f7ff fed3 	bl	8002584 <bme280_error_codes_print_result>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* Forced mode setting, switched to SLEEP mode after measurement */
	  result = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 80027de:	4950      	ldr	r1, [pc, #320]	; (8002920 <main+0x1e0>)
 80027e0:	2001      	movs	r0, #1
 80027e2:	f7fe fd08 	bl	80011f6 <bme280_set_sensor_mode>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <main+0x1f0>)
 80027ec:	701a      	strb	r2, [r3, #0]
	  bme280_error_codes_print_result("bme280_set_sensor_mode", result);
 80027ee:	4b50      	ldr	r3, [pc, #320]	; (8002930 <main+0x1f0>)
 80027f0:	f993 3000 	ldrsb.w	r3, [r3]
 80027f4:	4619      	mov	r1, r3
 80027f6:	4851      	ldr	r0, [pc, #324]	; (800293c <main+0x1fc>)
 80027f8:	f7ff fec4 	bl	8002584 <bme280_error_codes_print_result>
	  dev.delay_ms(40);
 80027fc:	4b48      	ldr	r3, [pc, #288]	; (8002920 <main+0x1e0>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2028      	movs	r0, #40	; 0x28
 8002802:	4798      	blx	r3
	  /*Get Data */
	  result = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002804:	4a46      	ldr	r2, [pc, #280]	; (8002920 <main+0x1e0>)
 8002806:	494e      	ldr	r1, [pc, #312]	; (8002940 <main+0x200>)
 8002808:	2007      	movs	r0, #7
 800280a:	f7fe fd70 	bl	80012ee <bme280_get_sensor_data>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <main+0x1f0>)
 8002814:	701a      	strb	r2, [r3, #0]
	  if(result == BME280_OK)
 8002816:	4b46      	ldr	r3, [pc, #280]	; (8002930 <main+0x1f0>)
 8002818:	f993 3000 	ldrsb.w	r3, [r3]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d174      	bne.n	800290a <main+0x1ca>
	   {
		  temperature = comp_data.temperature / 100.0;
 8002820:	4b47      	ldr	r3, [pc, #284]	; (8002940 <main+0x200>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe55 	bl	80004d4 <__aeabi_i2d>
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4b45      	ldr	r3, [pc, #276]	; (8002944 <main+0x204>)
 8002830:	f7fd ffe4 	bl	80007fc <__aeabi_ddiv>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f7fe f98c 	bl	8000b58 <__aeabi_d2f>
 8002840:	4603      	mov	r3, r0
 8002842:	4a41      	ldr	r2, [pc, #260]	; (8002948 <main+0x208>)
 8002844:	6013      	str	r3, [r2, #0]
	      humidity = comp_data.humidity / 1024.0;
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <main+0x200>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fe32 	bl	80004b4 <__aeabi_ui2d>
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	4b3d      	ldr	r3, [pc, #244]	; (800294c <main+0x20c>)
 8002856:	f7fd ffd1 	bl	80007fc <__aeabi_ddiv>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f7fe f979 	bl	8000b58 <__aeabi_d2f>
 8002866:	4603      	mov	r3, r0
 8002868:	4a39      	ldr	r2, [pc, #228]	; (8002950 <main+0x210>)
 800286a:	6013      	str	r3, [r2, #0]
	      pressure = comp_data.pressure / 10000.0;
 800286c:	4b34      	ldr	r3, [pc, #208]	; (8002940 <main+0x200>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fe1f 	bl	80004b4 <__aeabi_ui2d>
 8002876:	a328      	add	r3, pc, #160	; (adr r3, 8002918 <main+0x1d8>)
 8002878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287c:	f7fd ffbe 	bl	80007fc <__aeabi_ddiv>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f7fe f966 	bl	8000b58 <__aeabi_d2f>
 800288c:	4603      	mov	r3, r0
 800288e:	4a31      	ldr	r2, [pc, #196]	; (8002954 <main+0x214>)
 8002890:	6013      	str	r3, [r2, #0]

	      temperature = roundf(temperature*10.0f)/10.0f;
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <main+0x208>)
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	eeb0 0a67 	vmov.f32	s0, s15
 80028a4:	f006 fb3a 	bl	8008f1c <roundf>
 80028a8:	eeb0 7a40 	vmov.f32	s14, s0
 80028ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <main+0x208>)
 80028b6:	edc3 7a00 	vstr	s15, [r3]
	      humidity = roundf(humidity*10.0f)/10.0f;
 80028ba:	4b25      	ldr	r3, [pc, #148]	; (8002950 <main+0x210>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c8:	eeb0 0a67 	vmov.f32	s0, s15
 80028cc:	f006 fb26 	bl	8008f1c <roundf>
 80028d0:	eeb0 7a40 	vmov.f32	s14, s0
 80028d4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028dc:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <main+0x210>)
 80028de:	edc3 7a00 	vstr	s15, [r3]
	      pressure = roundf(pressure*10.0f)/10.0f;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <main+0x214>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	f006 fb12 	bl	8008f1c <roundf>
 80028f8:	eeb0 7a40 	vmov.f32	s14, s0
 80028fc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <main+0x214>)
 8002906:	edc3 7a00 	vstr	s15, [r3]
//	      sprintf(hum_string, "Humidity %03.1f %% ", humidity);
//	      sprintf(temp_string, "Temperature %03.1f C ", temperature);
//	      sprintf(press_string, "Pressure %03.1f hPa ", pressure);
    /* USER CODE BEGIN 3 */
  }
	  HAL_Delay(1000);
 800290a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800290e:	f000 fc89 	bl	8003224 <HAL_Delay>
	  result = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002912:	e764      	b.n	80027de <main+0x9e>
 8002914:	f3af 8000 	nop.w
 8002918:	00000000 	.word	0x00000000
 800291c:	40c38800 	.word	0x40c38800
 8002920:	20000558 	.word	0x20000558
 8002924:	0800263d 	.word	0x0800263d
 8002928:	080026c5 	.word	0x080026c5
 800292c:	080026ad 	.word	0x080026ad
 8002930:	200005a4 	.word	0x200005a4
 8002934:	08009184 	.word	0x08009184
 8002938:	08009190 	.word	0x08009190
 800293c:	080091ac 	.word	0x080091ac
 8002940:	20000598 	.word	0x20000598
 8002944:	40590000 	.word	0x40590000
 8002948:	2000054c 	.word	0x2000054c
 800294c:	40900000 	.word	0x40900000
 8002950:	20000550 	.word	0x20000550
 8002954:	20000554 	.word	0x20000554

08002958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b09a      	sub	sp, #104	; 0x68
 800295c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800295e:	f107 0320 	add.w	r3, r7, #32
 8002962:	2248      	movs	r2, #72	; 0x48
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f004 fcd0 	bl	800730c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	611a      	str	r2, [r3, #16]
 800297a:	615a      	str	r2, [r3, #20]
 800297c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f023 0303 	bic.w	r3, r3, #3
 8002998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <SystemClock_Config+0xe4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029aa:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <SystemClock_Config+0xe4>)
 80029ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <SystemClock_Config+0xe4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80029be:	232f      	movs	r3, #47	; 0x2f
 80029c0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029d2:	2301      	movs	r3, #1
 80029d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80029da:	2300      	movs	r3, #0
 80029dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80029de:	2360      	movs	r3, #96	; 0x60
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029e2:	2305      	movs	r3, #5
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ea:	f107 0320 	add.w	r3, r7, #32
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 f918 	bl	8004c24 <HAL_RCC_OscConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80029fa:	f000 f8e3 	bl	8002bc4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80029fe:	236f      	movs	r3, #111	; 0x6f
 8002a00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a02:	2301      	movs	r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 fc74 	bl	800530c <HAL_RCC_ClockConfig>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002a2a:	f000 f8cb 	bl	8002bc4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002a2e:	f003 fa05 	bl	8005e3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002a32:	bf00      	nop
 8002a34:	3768      	adds	r7, #104	; 0x68
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	58000400 	.word	0x58000400

08002a40 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b094      	sub	sp, #80	; 0x50
 8002a44:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a46:	463b      	mov	r3, r7
 8002a48:	2250      	movs	r2, #80	; 0x50
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 fc5d 	bl	800730c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8002a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a56:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a60:	463b      	mov	r3, r7
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 f874 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8002a6e:	f000 f8a9 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002a72:	bf00      	nop
 8002a74:	3750      	adds	r7, #80	; 0x50
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002a82:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <MX_I2C1_Init+0x78>)
 8002a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <MX_I2C1_Init+0x7c>)
 8002a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ab6:	480e      	ldr	r0, [pc, #56]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002ab8:	f000 fe58 	bl	800376c <HAL_I2C_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ac2:	f000 f87f 	bl	8002bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4809      	ldr	r0, [pc, #36]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002aca:	f001 fb9f 	bl	800420c <HAL_I2CEx_ConfigAnalogFilter>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ad4:	f000 f876 	bl	8002bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_I2C1_Init+0x74>)
 8002adc:	f001 fbe1 	bl	80042a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ae6:	f000 f86d 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200001f8 	.word	0x200001f8
 8002af4:	40005400 	.word	0x40005400
 8002af8:	00303d5b 	.word	0x00303d5b

08002afc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <MX_RTC_Init+0x60>)
 8002b04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b0e:	227f      	movs	r2, #127	; 0x7f
 8002b10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b32:	f003 fa9b 	bl	800606c <HAL_RTC_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002b3c:	f000 f842 	bl	8002bc4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002b40:	2200      	movs	r2, #0
 8002b42:	2100      	movs	r1, #0
 8002b44:	4804      	ldr	r0, [pc, #16]	; (8002b58 <MX_RTC_Init+0x5c>)
 8002b46:	f003 fb91 	bl	800626c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002b50:	f000 f838 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2000024c 	.word	0x2000024c
 8002b5c:	40002800 	.word	0x40002800

08002b60 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <MX_USB_PCD_Init+0x4c>)
 8002b68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b72:	2202      	movs	r2, #2
 8002b74:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b78:	2202      	movs	r2, #2
 8002b7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <MX_USB_PCD_Init+0x48>)
 8002b96:	f001 fbd0 	bl	800433a <HAL_PCD_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002ba0:	f000 f810 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000270 	.word	0x20000270
 8002bac:	40006800 	.word	0x40006800

08002bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	2002      	movs	r0, #2
 8002bb6:	f7ff fccb 	bl	8002550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f7ff fcc8 	bl	8002550 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <Error_Handler+0x8>

08002bce <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_AHB2_GRP1_EnableClock>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c14:	68fb      	ldr	r3, [r7, #12]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4013      	ands	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b09c      	sub	sp, #112	; 0x70
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	2250      	movs	r2, #80	; 0x50
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f004 fb41 	bl	800730c <memset>
  if(hi2c->Instance==I2C1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_I2C_MspInit+0x88>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d126      	bne.n	8002ce2 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c94:	2304      	movs	r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c98:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 ff54 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002cae:	f7ff ff89 	bl	8002bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f7ff ff9c 	bl	8002bf0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbe:	2312      	movs	r3, #18
 8002cc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cca:	2304      	movs	r3, #4
 8002ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4806      	ldr	r0, [pc, #24]	; (8002cf0 <HAL_I2C_MspInit+0x8c>)
 8002cd6:	f000 fbd9 	bl	800348c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cda:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002cde:	f7ff ffa0 	bl	8002c22 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ce2:	bf00      	nop
 8002ce4:	3770      	adds	r7, #112	; 0x70
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40005400 	.word	0x40005400
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b096      	sub	sp, #88	; 0x58
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	2250      	movs	r2, #80	; 0x50
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fb01 	bl	800730c <memset>
  if(hrtc->Instance==RTC)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <HAL_RTC_MspInit+0x68>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d11f      	bne.n	8002d54 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002d14:	f001 fc0a 	bl	800452c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f002 ff11 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002d34:	f7ff ff46 	bl	8002bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d38:	f7ff ff49 	bl	8002bce <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d40:	f7ff ff6f 	bl	8002c22 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 fb6a 	bl	8003422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002d4e:	2003      	movs	r0, #3
 8002d50:	f000 fb81 	bl	8003456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	3758      	adds	r7, #88	; 0x58
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40002800 	.word	0x40002800

08002d60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b09c      	sub	sp, #112	; 0x70
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	2250      	movs	r2, #80	; 0x50
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f004 fac3 	bl	800730c <memset>
  if(hpcd->Instance==USB)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_PCD_MspInit+0xa8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d136      	bne.n	8002dfe <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d94:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002d96:	2318      	movs	r3, #24
 8002d98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002da6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002daa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002db2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002db6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fec7 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002dc8:	f7ff fefc 	bl	8002bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7ff ff0f 	bl	8002bf0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	2300      	movs	r3, #0
 8002de2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002de4:	230a      	movs	r3, #10
 8002de6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002dec:	4619      	mov	r1, r3
 8002dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df2:	f000 fb4b 	bl	800348c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002df6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002dfa:	f7ff ff12 	bl	8002c22 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002dfe:	bf00      	nop
 8002e00:	3770      	adds	r7, #112	; 0x70
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40006800 	.word	0x40006800

08002e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e10:	e7fe      	b.n	8002e10 <NMI_Handler+0x4>

08002e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e16:	e7fe      	b.n	8002e16 <HardFault_Handler+0x4>

08002e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <MemManage_Handler+0x4>

08002e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e22:	e7fe      	b.n	8002e22 <BusFault_Handler+0x4>

08002e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <UsageFault_Handler+0x4>

08002e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e58:	f000 f9b8 	bl	80031cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <RTC_WKUP_IRQHandler+0x10>)
 8002e66:	f003 fabd 	bl	80063e4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000024c 	.word	0x2000024c

08002e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return 1;
 8002e78:	2301      	movs	r3, #1
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_kill>:

int _kill(int pid, int sig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e8e:	f004 fa9f 	bl	80073d0 <__errno>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2216      	movs	r2, #22
 8002e96:	601a      	str	r2, [r3, #0]
  return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <_exit>:

void _exit (int status)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ffe7 	bl	8002e84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eb6:	e7fe      	b.n	8002eb6 <_exit+0x12>

08002eb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e00a      	b.n	8002ee0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eca:	f3af 8000 	nop.w
 8002ece:	4601      	mov	r1, r0
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	60ba      	str	r2, [r7, #8]
 8002ed6:	b2ca      	uxtb	r2, r1
 8002ed8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	dbf0      	blt.n	8002eca <_read+0x12>
  }

  return len;
 8002ee8:	687b      	ldr	r3, [r7, #4]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e009      	b.n	8002f18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	60ba      	str	r2, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3301      	adds	r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	dbf1      	blt.n	8002f04 <_write+0x12>
  }
  return len;
 8002f20:	687b      	ldr	r3, [r7, #4]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <_close>:

int _close(int file)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f52:	605a      	str	r2, [r3, #4]
  return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <_isatty>:

int _isatty(int file)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f9c:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <_sbrk+0x5c>)
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <_sbrk+0x60>)
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <_sbrk+0x64>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <_sbrk+0x68>)
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc4:	f004 fa04 	bl	80073d0 <__errno>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	220c      	movs	r2, #12
 8002fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e009      	b.n	8002fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <_sbrk+0x64>)
 8002fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20030000 	.word	0x20030000
 8002ff4:	00000400 	.word	0x00000400
 8002ff8:	200005a8 	.word	0x200005a8
 8002ffc:	20000700 	.word	0x20000700

08003000 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <SystemInit+0x98>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	4a23      	ldr	r2, [pc, #140]	; (8003098 <SystemInit+0x98>)
 800300c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003028:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800302c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <SystemInit+0x9c>)
 800303a:	4013      	ands	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800304a:	f023 0305 	bic.w	r3, r3, #5
 800304e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800305a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306a:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <SystemInit+0xa0>)
 800306c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <SystemInit+0xa0>)
 8003074:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003084:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00
 800309c:	faf6fefb 	.word	0xfaf6fefb
 80030a0:	22041000 	.word	0x22041000

080030a4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80030a4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a8:	3304      	adds	r3, #4

080030aa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030aa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80030ae:	d3f9      	bcc.n	80030a4 <CopyDataInit>
  bx lr
 80030b0:	4770      	bx	lr

080030b2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80030b2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80030b4:	3004      	adds	r0, #4

080030b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80030b6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80030b8:	d3fb      	bcc.n	80030b2 <FillZerobss>
  bx lr
 80030ba:	4770      	bx	lr

080030bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030bc:	480c      	ldr	r0, [pc, #48]	; (80030f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030c0:	f7ff ff9e 	bl	8003000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <LoopForever+0x6>)
 80030c6:	490c      	ldr	r1, [pc, #48]	; (80030f8 <LoopForever+0xa>)
 80030c8:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <LoopForever+0xe>)
 80030ca:	2300      	movs	r3, #0
 80030cc:	f7ff ffed 	bl	80030aa <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80030d0:	480b      	ldr	r0, [pc, #44]	; (8003100 <LoopForever+0x12>)
 80030d2:	490c      	ldr	r1, [pc, #48]	; (8003104 <LoopForever+0x16>)
 80030d4:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <LoopForever+0x1a>)
 80030d6:	2300      	movs	r3, #0
 80030d8:	f7ff ffe7 	bl	80030aa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80030dc:	480b      	ldr	r0, [pc, #44]	; (800310c <LoopForever+0x1e>)
 80030de:	490c      	ldr	r1, [pc, #48]	; (8003110 <LoopForever+0x22>)
 80030e0:	2300      	movs	r3, #0
 80030e2:	f7ff ffe8 	bl	80030b6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030e6:	f004 f979 	bl	80073dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030ea:	f7ff fb29 	bl	8002740 <main>

080030ee <LoopForever>:

LoopForever:
  b LoopForever
 80030ee:	e7fe      	b.n	80030ee <LoopForever>
  ldr   r0, =_estack
 80030f0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80030f4:	20000008 	.word	0x20000008
 80030f8:	200001dc 	.word	0x200001dc
 80030fc:	080095f4 	.word	0x080095f4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003100:	20030000 	.word	0x20030000
 8003104:	20030000 	.word	0x20030000
 8003108:	080097c8 	.word	0x080097c8
  INIT_BSS _sbss, _ebss
 800310c:	200001dc 	.word	0x200001dc
 8003110:	200006fc 	.word	0x200006fc

08003114 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC1_IRQHandler>
	...

08003118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_Init+0x3c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_Init+0x3c>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312e:	2003      	movs	r0, #3
 8003130:	f000 f96c 	bl	800340c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003134:	2000      	movs	r0, #0
 8003136:	f000 f80f 	bl	8003158 <HAL_InitTick>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	e001      	b.n	800314a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003146:	f7ff fd85 	bl	8002c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800314a:	79fb      	ldrb	r3, [r7, #7]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58004000 	.word	0x58004000

08003158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <HAL_InitTick+0x6c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d024      	beq.n	80031b6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800316c:	f002 fa7c 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_InitTick+0x6c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	4619      	mov	r1, r3
 8003178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f974 	bl	8003472 <HAL_SYSTICK_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d809      	bhi.n	80031aa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003196:	2200      	movs	r2, #0
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	f04f 30ff 	mov.w	r0, #4294967295
 800319e:	f000 f940 	bl	8003422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031a2:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <HAL_InitTick+0x70>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e007      	b.n	80031ba <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	e004      	b.n	80031ba <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e001      	b.n	80031ba <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000010 	.word	0x20000010
 80031c8:	2000000c 	.word	0x2000000c

080031cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_IncTick+0x20>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_IncTick+0x24>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <HAL_IncTick+0x24>)
 80031de:	6013      	str	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000010 	.word	0x20000010
 80031f0:	200005ac 	.word	0x200005ac

080031f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return uwTick;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_GetTick+0x14>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	200005ac 	.word	0x200005ac

0800320c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_GetTickPrio+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	2000000c 	.word	0x2000000c

08003224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff ffe2 	bl	80031f4 <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d005      	beq.n	800324a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_Delay+0x44>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800324a:	bf00      	nop
 800324c:	f7ff ffd2 	bl	80031f4 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d8f7      	bhi.n	800324c <HAL_Delay+0x28>
  {
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000010 	.word	0x20000010

0800326c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <__NVIC_SetPriorityGrouping+0x44>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003288:	4013      	ands	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800329e:	4a04      	ldr	r2, [pc, #16]	; (80032b0 <__NVIC_SetPriorityGrouping+0x44>)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	60d3      	str	r3, [r2, #12]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <__NVIC_GetPriorityGrouping+0x18>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	f003 0307 	and.w	r3, r3, #7
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	db0b      	blt.n	80032fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	f003 021f 	and.w	r2, r3, #31
 80032e8:	4907      	ldr	r1, [pc, #28]	; (8003308 <__NVIC_EnableIRQ+0x38>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2001      	movs	r0, #1
 80032f2:	fa00 f202 	lsl.w	r2, r0, r2
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000e100 	.word	0xe000e100

0800330c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	2b00      	cmp	r3, #0
 800331e:	db0a      	blt.n	8003336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	490c      	ldr	r1, [pc, #48]	; (8003358 <__NVIC_SetPriority+0x4c>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	440b      	add	r3, r1
 8003330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003334:	e00a      	b.n	800334c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4908      	ldr	r1, [pc, #32]	; (800335c <__NVIC_SetPriority+0x50>)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	3b04      	subs	r3, #4
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	440b      	add	r3, r1
 800334a:	761a      	strb	r2, [r3, #24]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000e100 	.word	0xe000e100
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f1c3 0307 	rsb	r3, r3, #7
 800337a:	2b04      	cmp	r3, #4
 800337c:	bf28      	it	cs
 800337e:	2304      	movcs	r3, #4
 8003380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3304      	adds	r3, #4
 8003386:	2b06      	cmp	r3, #6
 8003388:	d902      	bls.n	8003390 <NVIC_EncodePriority+0x30>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3b03      	subs	r3, #3
 800338e:	e000      	b.n	8003392 <NVIC_EncodePriority+0x32>
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	f04f 32ff 	mov.w	r2, #4294967295
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	401a      	ands	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	4313      	orrs	r3, r2
         );
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3724      	adds	r7, #36	; 0x24
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d8:	d301      	bcc.n	80033de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033da:	2301      	movs	r3, #1
 80033dc:	e00f      	b.n	80033fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <SysTick_Config+0x40>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e6:	210f      	movs	r1, #15
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	f7ff ff8e 	bl	800330c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <SysTick_Config+0x40>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <SysTick_Config+0x40>)
 80033f8:	2207      	movs	r2, #7
 80033fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	e000e010 	.word	0xe000e010

0800340c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ff29 	bl	800326c <__NVIC_SetPriorityGrouping>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	4603      	mov	r3, r0
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003430:	f7ff ff40 	bl	80032b4 <__NVIC_GetPriorityGrouping>
 8003434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	6978      	ldr	r0, [r7, #20]
 800343c:	f7ff ff90 	bl	8003360 <NVIC_EncodePriority>
 8003440:	4602      	mov	r2, r0
 8003442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff5f 	bl	800330c <__NVIC_SetPriority>
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff33 	bl	80032d0 <__NVIC_EnableIRQ>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffa4 	bl	80033c8 <SysTick_Config>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800349a:	e14c      	b.n	8003736 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 813e 	beq.w	8003730 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d005      	beq.n	80034cc <HAL_GPIO_Init+0x40>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d130      	bne.n	800352e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003502:	2201      	movs	r2, #1
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 0201 	and.w	r2, r3, #1
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b03      	cmp	r3, #3
 8003538:	d017      	beq.n	800356a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	2203      	movs	r2, #3
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d123      	bne.n	80035be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	08da      	lsrs	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3208      	adds	r2, #8
 800357e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	220f      	movs	r2, #15
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	08da      	lsrs	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3208      	adds	r2, #8
 80035b8:	6939      	ldr	r1, [r7, #16]
 80035ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0203 	and.w	r2, r3, #3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8098 	beq.w	8003730 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003600:	4a54      	ldr	r2, [pc, #336]	; (8003754 <HAL_GPIO_Init+0x2c8>)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	3302      	adds	r3, #2
 8003608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	220f      	movs	r2, #15
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800362a:	d019      	beq.n	8003660 <HAL_GPIO_Init+0x1d4>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a4a      	ldr	r2, [pc, #296]	; (8003758 <HAL_GPIO_Init+0x2cc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <HAL_GPIO_Init+0x1d0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a49      	ldr	r2, [pc, #292]	; (800375c <HAL_GPIO_Init+0x2d0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00d      	beq.n	8003658 <HAL_GPIO_Init+0x1cc>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a48      	ldr	r2, [pc, #288]	; (8003760 <HAL_GPIO_Init+0x2d4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d007      	beq.n	8003654 <HAL_GPIO_Init+0x1c8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a47      	ldr	r2, [pc, #284]	; (8003764 <HAL_GPIO_Init+0x2d8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_GPIO_Init+0x1c4>
 800364c:	2304      	movs	r3, #4
 800364e:	e008      	b.n	8003662 <HAL_GPIO_Init+0x1d6>
 8003650:	2307      	movs	r3, #7
 8003652:	e006      	b.n	8003662 <HAL_GPIO_Init+0x1d6>
 8003654:	2303      	movs	r3, #3
 8003656:	e004      	b.n	8003662 <HAL_GPIO_Init+0x1d6>
 8003658:	2302      	movs	r3, #2
 800365a:	e002      	b.n	8003662 <HAL_GPIO_Init+0x1d6>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_GPIO_Init+0x1d6>
 8003660:	2300      	movs	r3, #0
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	f002 0203 	and.w	r2, r2, #3
 8003668:	0092      	lsls	r2, r2, #2
 800366a:	4093      	lsls	r3, r2
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003672:	4938      	ldr	r1, [pc, #224]	; (8003754 <HAL_GPIO_Init+0x2c8>)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3302      	adds	r3, #2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_GPIO_Init+0x2dc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036a4:	4a30      	ldr	r2, [pc, #192]	; (8003768 <HAL_GPIO_Init+0x2dc>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80036aa:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <HAL_GPIO_Init+0x2dc>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ce:	4a26      	ldr	r2, [pc, #152]	; (8003768 <HAL_GPIO_Init+0x2dc>)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_GPIO_Init+0x2dc>)
 80036d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036fa:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <HAL_GPIO_Init+0x2dc>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003702:	4b19      	ldr	r3, [pc, #100]	; (8003768 <HAL_GPIO_Init+0x2dc>)
 8003704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003728:	4a0f      	ldr	r2, [pc, #60]	; (8003768 <HAL_GPIO_Init+0x2dc>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	3301      	adds	r3, #1
 8003734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	f47f aeab 	bne.w	800349c <HAL_GPIO_Init+0x10>
  }
}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40010000 	.word	0x40010000
 8003758:	48000400 	.word	0x48000400
 800375c:	48000800 	.word	0x48000800
 8003760:	48000c00 	.word	0x48000c00
 8003764:	48001000 	.word	0x48001000
 8003768:	58000800 	.word	0x58000800

0800376c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e08d      	b.n	800389a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fa66 	bl	8002c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	e006      	b.n	80037f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d108      	bne.n	800380e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	e007      	b.n	800381e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800382c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003830:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003840:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69d9      	ldr	r1, [r3, #28]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1a      	ldr	r2, [r3, #32]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	461a      	mov	r2, r3
 80038b0:	460b      	mov	r3, r1
 80038b2:	817b      	strh	r3, [r7, #10]
 80038b4:	4613      	mov	r3, r2
 80038b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	f040 80fd 	bne.w	8003ac0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_I2C_Master_Transmit+0x30>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e0f6      	b.n	8003ac2 <HAL_I2C_Master_Transmit+0x21e>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038dc:	f7ff fc8a 	bl	80031f4 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2319      	movs	r3, #25
 80038e8:	2201      	movs	r2, #1
 80038ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fa0a 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0e1      	b.n	8003ac2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2221      	movs	r2, #33	; 0x21
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2210      	movs	r2, #16
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	893a      	ldrh	r2, [r7, #8]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	2bff      	cmp	r3, #255	; 0xff
 800392e:	d906      	bls.n	800393e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003936:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e007      	b.n	800394e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	2b00      	cmp	r3, #0
 8003954:	d024      	beq.n	80039a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	b2db      	uxtb	r3, r3
 800398c:	3301      	adds	r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	8979      	ldrh	r1, [r7, #10]
 8003992:	4b4e      	ldr	r3, [pc, #312]	; (8003acc <HAL_I2C_Master_Transmit+0x228>)
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fc05 	bl	80041a8 <I2C_TransferConfig>
 800399e:	e066      	b.n	8003a6e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	4b48      	ldr	r3, [pc, #288]	; (8003acc <HAL_I2C_Master_Transmit+0x228>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fbfa 	bl	80041a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80039b4:	e05b      	b.n	8003a6e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f9fd 	bl	8003dba <I2C_WaitOnTXISFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07b      	b.n	8003ac2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d034      	beq.n	8003a6e <HAL_I2C_Master_Transmit+0x1ca>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d130      	bne.n	8003a6e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f976 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e04d      	b.n	8003ac2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2bff      	cmp	r3, #255	; 0xff
 8003a2e:	d90e      	bls.n	8003a4e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	8979      	ldrh	r1, [r7, #10]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fbae 	bl	80041a8 <I2C_TransferConfig>
 8003a4c:	e00f      	b.n	8003a6e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	8979      	ldrh	r1, [r7, #10]
 8003a60:	2300      	movs	r3, #0
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fb9d 	bl	80041a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d19e      	bne.n	80039b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	6a39      	ldr	r1, [r7, #32]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f9e3 	bl	8003e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e01a      	b.n	8003ac2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2220      	movs	r2, #32
 8003a92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_I2C_Master_Transmit+0x22c>)
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	80002000 	.word	0x80002000
 8003ad0:	fe00e800 	.word	0xfe00e800

08003ad4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	817b      	strh	r3, [r7, #10]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	f040 80db 	bne.w	8003cac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_I2C_Master_Receive+0x30>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0d4      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b0c:	f7ff fb72 	bl	80031f4 <HAL_GetTick>
 8003b10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2319      	movs	r3, #25
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8f2 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0bf      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2222      	movs	r2, #34	; 0x22
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	893a      	ldrh	r2, [r7, #8]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2bff      	cmp	r3, #255	; 0xff
 8003b5e:	d90e      	bls.n	8003b7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	22ff      	movs	r2, #255	; 0xff
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	8979      	ldrh	r1, [r7, #10]
 8003b6e:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_I2C_Master_Receive+0x1e4>)
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fb16 	bl	80041a8 <I2C_TransferConfig>
 8003b7c:	e06d      	b.n	8003c5a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	8979      	ldrh	r1, [r7, #10]
 8003b90:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <HAL_I2C_Master_Receive+0x1e4>)
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fb05 	bl	80041a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003b9e:	e05c      	b.n	8003c5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	6a39      	ldr	r1, [r7, #32]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f993 	bl	8003ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e07c      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d034      	beq.n	8003c5a <HAL_I2C_Master_Receive+0x186>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d130      	bne.n	8003c5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f880 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e04d      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2bff      	cmp	r3, #255	; 0xff
 8003c1a:	d90e      	bls.n	8003c3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	22ff      	movs	r2, #255	; 0xff
 8003c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	8979      	ldrh	r1, [r7, #10]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fab8 	bl	80041a8 <I2C_TransferConfig>
 8003c38:	e00f      	b.n	8003c5a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 faa7 	bl	80041a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d19d      	bne.n	8003ba0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8ed 	bl	8003e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e01a      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_I2C_Master_Receive+0x1e8>)
 8003c8c:	400b      	ands	r3, r1
 8003c8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	80002400 	.word	0x80002400
 8003cbc:	fe00e800 	.word	0xfe00e800

08003cc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d103      	bne.n	8003cde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d007      	beq.n	8003cfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	619a      	str	r2, [r3, #24]
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d18:	e03b      	b.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f962 	bl	8003fe8 <I2C_IsErrorOccurred>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e041      	b.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d02d      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7ff fa5d 	bl	80031f4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d122      	bne.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d113      	bne.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00f      	b.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d0b4      	beq.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc6:	e033      	b.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f90b 	bl	8003fe8 <I2C_IsErrorOccurred>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e031      	b.n	8003e40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d025      	beq.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7ff fa06 	bl	80031f4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d11a      	bne.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d013      	beq.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e007      	b.n	8003e40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d1c4      	bne.n	8003dc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e54:	e02f      	b.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f8c4 	bl	8003fe8 <I2C_IsErrorOccurred>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e02d      	b.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6a:	f7ff f9c3 	bl	80031f4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d11a      	bne.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d013      	beq.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f043 0220 	orr.w	r2, r3, #32
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e007      	b.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d1c8      	bne.n	8003e56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003ee0:	e071      	b.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f87e 	bl	8003fe8 <I2C_IsErrorOccurred>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d13b      	bne.n	8003f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d138      	bne.n	8003f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d105      	bne.n	8003f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d121      	bne.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2210      	movs	r2, #16
 8003f38:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2220      	movs	r2, #32
 8003f46:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003f54:	400b      	ands	r3, r1
 8003f56:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
 8003f74:	e002      	b.n	8003f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003f7c:	f7ff f93a 	bl	80031f4 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d119      	bne.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d116      	bne.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d00f      	beq.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d002      	beq.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d083      	beq.n	8003ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	fe00e800 	.word	0xfe00e800

08003fe8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d068      	beq.n	80040e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2210      	movs	r2, #16
 800401a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800401c:	e049      	b.n	80040b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d045      	beq.n	80040b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004026:	f7ff f8e5 	bl	80031f4 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <I2C_IsErrorOccurred+0x54>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d13a      	bne.n	80040b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800404e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800405a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405e:	d121      	bne.n	80040a4 <I2C_IsErrorOccurred+0xbc>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004066:	d01d      	beq.n	80040a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	2b20      	cmp	r3, #32
 800406c:	d01a      	beq.n	80040a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800407c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800407e:	f7ff f8b9 	bl	80031f4 <HAL_GetTick>
 8004082:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004084:	e00e      	b.n	80040a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004086:	f7ff f8b5 	bl	80031f4 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b19      	cmp	r3, #25
 8004092:	d907      	bls.n	80040a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	f043 0320 	orr.w	r3, r3, #32
 800409a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80040a2:	e006      	b.n	80040b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d1e9      	bne.n	8004086 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d003      	beq.n	80040c8 <I2C_IsErrorOccurred+0xe0>
 80040c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0aa      	beq.n	800401e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2220      	movs	r2, #32
 80040d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f043 0304 	orr.w	r3, r3, #4
 80040de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00b      	beq.n	8004110 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f043 0308 	orr.w	r3, r3, #8
 8004120:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800412a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01c      	beq.n	8004196 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff fdaf 	bl	8003cc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <I2C_IsErrorOccurred+0x1bc>)
 800416e:	400b      	ands	r3, r1
 8004170:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800419a:	4618      	mov	r0, r3
 800419c:	3728      	adds	r7, #40	; 0x28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	fe00e800 	.word	0xfe00e800

080041a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	817b      	strh	r3, [r7, #10]
 80041b6:	4613      	mov	r3, r2
 80041b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ba:	897b      	ldrh	r3, [r7, #10]
 80041bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041c0:	7a7b      	ldrb	r3, [r7, #9]
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	0d5b      	lsrs	r3, r3, #21
 80041e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <I2C_TransferConfig+0x60>)
 80041e8:	430b      	orrs	r3, r1
 80041ea:	43db      	mvns	r3, r3
 80041ec:	ea02 0103 	and.w	r1, r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	03ff63ff 	.word	0x03ff63ff

0800420c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d138      	bne.n	8004294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800422c:	2302      	movs	r3, #2
 800422e:	e032      	b.n	8004296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800425e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d139      	bne.n	800432c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e033      	b.n	800432e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2224      	movs	r2, #36	; 0x24
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e000      	b.n	800432e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0c0      	b.n	80044ce <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fe fcfd 	bl	8002d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2203      	movs	r2, #3
 800436a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f002 f866 	bl	8006444 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	e03e      	b.n	80043fc <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800437e:	7bfa      	ldrb	r2, [r7, #15]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	440b      	add	r3, r1
 800438c:	3311      	adds	r3, #17
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	440b      	add	r3, r1
 80043a0:	3310      	adds	r3, #16
 80043a2:	7bfa      	ldrb	r2, [r7, #15]
 80043a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	440b      	add	r3, r1
 80043b4:	3313      	adds	r3, #19
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	440b      	add	r3, r1
 80043c8:	3320      	adds	r3, #32
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	440b      	add	r3, r1
 80043dc:	3324      	adds	r3, #36	; 0x24
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	440b      	add	r3, r1
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	3301      	adds	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	791b      	ldrb	r3, [r3, #4]
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	429a      	cmp	r2, r3
 8004404:	d3bb      	bcc.n	800437e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e044      	b.n	8004496 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	440b      	add	r3, r1
 800441a:	f203 1351 	addw	r3, r3, #337	; 0x151
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	440b      	add	r3, r1
 8004430:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004434:	7bfa      	ldrb	r2, [r7, #15]
 8004436:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	440b      	add	r3, r1
 8004446:	f203 1353 	addw	r3, r3, #339	; 0x153
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800444e:	7bfa      	ldrb	r2, [r7, #15]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	440b      	add	r3, r1
 800445c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	440b      	add	r3, r1
 8004472:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800447a:	7bfa      	ldrb	r2, [r7, #15]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	440b      	add	r3, r1
 8004488:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	3301      	adds	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	791b      	ldrb	r3, [r3, #4]
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	429a      	cmp	r2, r3
 800449e:	d3b5      	bcc.n	800440c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80044ac:	f001 ffe5 	bl	800647a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	7a9b      	ldrb	r3, [r3, #10]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d102      	bne.n	80044cc <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f805 	bl	80044d6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800450e:	b29b      	uxth	r3, r3
 8004510:	f043 0302 	orr.w	r3, r3, #2
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a04      	ldr	r2, [pc, #16]	; (8004548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	6013      	str	r3, [r2, #0]
}
 800453c:	bf00      	nop
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	58000400 	.word	0x58000400

0800454c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_PWREx_GetVoltageRange+0x18>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	58000400 	.word	0x58000400

08004568 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457a:	d101      	bne.n	8004580 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <LL_RCC_HSE_Enable>:
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800459a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <LL_RCC_HSE_Disable>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_HSE_IsReady>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045da:	d101      	bne.n	80045e0 <LL_RCC_HSE_IsReady+0x18>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_RCC_HSE_IsReady+0x1a>
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_HSI_Enable>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fe:	6013      	str	r3, [r2, #0]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <LL_RCC_HSI_Disable>:
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800460e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461c:	6013      	str	r3, [r2, #0]
}
 800461e:	bf00      	nop
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <LL_RCC_HSI_IsReady>:
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800462c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463a:	d101      	bne.n	8004640 <LL_RCC_HSI_IsReady+0x18>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <LL_RCC_HSI_IsReady+0x1a>
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <LL_RCC_HSI_SetCalibTrimming>:
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <LL_RCC_HSI48_Enable>:
{
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_RCC_HSI48_Disable>:
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <LL_RCC_HSI48_IsReady>:
{
 80046ba:	b480      	push	{r7}
 80046bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80046be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d101      	bne.n	80046d2 <LL_RCC_HSI48_IsReady+0x18>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <LL_RCC_HSI48_IsReady+0x1a>
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_RCC_LSE_Enable>:
{
 80046de:	b480      	push	{r7}
 80046e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046f6:	bf00      	nop
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <LL_RCC_LSE_Disable>:
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_RCC_LSE_EnableBypass>:
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800473a:	bf00      	nop
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <LL_RCC_LSE_DisableBypass>:
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800475c:	bf00      	nop
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_RCC_LSE_IsReady>:
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d101      	bne.n	800477e <LL_RCC_LSE_IsReady+0x18>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <LL_RCC_LSE_IsReady+0x1a>
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_RCC_LSI1_Enable>:
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800478e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047a2:	bf00      	nop
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_RCC_LSI1_Disable>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80047b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <LL_RCC_LSI1_IsReady>:
{
 80047ce:	b480      	push	{r7}
 80047d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80047d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d101      	bne.n	80047e6 <LL_RCC_LSI1_IsReady+0x18>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <LL_RCC_LSI1_IsReady+0x1a>
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <LL_RCC_LSI2_Enable>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800480a:	bf00      	nop
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_RCC_LSI2_Disable>:
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <LL_RCC_LSI2_IsReady>:
{
 8004836:	b480      	push	{r7}
 8004838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800483a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b08      	cmp	r3, #8
 8004848:	d101      	bne.n	800484e <LL_RCC_LSI2_IsReady+0x18>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <LL_RCC_LSI2_IsReady+0x1a>
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <LL_RCC_LSI2_SetTrimming>:
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800486a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_RCC_MSI_Enable>:
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6013      	str	r3, [r2, #0]
}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_RCC_MSI_Disable>:
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	6013      	str	r3, [r2, #0]
}
 80048ba:	bf00      	nop
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <LL_RCC_MSI_IsReady>:
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d101      	bne.n	80048da <LL_RCC_MSI_IsReady+0x16>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <LL_RCC_MSI_IsReady+0x18>
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_RCC_MSI_SetRange>:
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <LL_RCC_MSI_GetRange>:
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800491e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2bb0      	cmp	r3, #176	; 0xb0
 8004924:	d901      	bls.n	800492a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004926:	23b0      	movs	r3, #176	; 0xb0
 8004928:	607b      	str	r3, [r7, #4]
  return msiRange;
 800492a:	687b      	ldr	r3, [r7, #4]
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_RCC_SetSysClkSource>:
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800496a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 0203 	bic.w	r2, r3, #3
 8004974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <LL_RCC_GetSysClkSource>:
{
 800498a:	b480      	push	{r7}
 800498c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800498e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <LL_RCC_SetAHBPrescaler>:
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_C2_RCC_SetAHBPrescaler>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_SetAHB4Prescaler>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a06:	f023 020f 	bic.w	r2, r3, #15
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <LL_RCC_SetAPB1Prescaler>:
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_RCC_SetAPB2Prescaler>:
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	608b      	str	r3, [r1, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_GetAHBPrescaler>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_GetAHB4Prescaler>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aba:	6013      	str	r3, [r2, #0]
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad8:	6013      	str	r3, [r2, #0]
}
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af6:	d101      	bne.n	8004afc <LL_RCC_PLL_IsReady+0x18>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <LL_RCC_PLL_IsReady+0x1a>
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7c:	d101      	bne.n	8004b82 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba2:	d101      	bne.n	8004ba8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc8:	d101      	bne.n	8004bce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bec:	d101      	bne.n	8004bf2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c10:	d101      	bne.n	8004c16 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b08d      	sub	sp, #52	; 0x34
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e363      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 808d 	beq.w	8004d5e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c44:	f7ff fea1 	bl	800498a <LL_RCC_GetSysClkSource>
 8004c48:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c4a:	f7ff ff82 	bl	8004b52 <LL_RCC_PLL_GetMainSource>
 8004c4e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_RCC_OscConfig+0x3e>
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d147      	bne.n	8004cec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d144      	bne.n	8004cec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e347      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004c72:	f7ff fe4c 	bl	800490e <LL_RCC_MSI_GetRange>
 8004c76:	4603      	mov	r3, r0
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d914      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fd05 	bl	8005690 <RCC_SetFlashLatencyFromMSIRange>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e336      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fe26 	bl	80048e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fe4a 	bl	8004938 <LL_RCC_MSI_SetCalibTrimming>
 8004ca4:	e013      	b.n	8004cce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fe1b 	bl	80048e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fe3f 	bl	8004938 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fce6 	bl	8005690 <RCC_SetFlashLatencyFromMSIRange>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e317      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cce:	f000 fccb 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4aa4      	ldr	r2, [pc, #656]	; (8004f68 <HAL_RCC_OscConfig+0x344>)
 8004cd6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cd8:	4ba4      	ldr	r3, [pc, #656]	; (8004f6c <HAL_RCC_OscConfig+0x348>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe fa3b 	bl	8003158 <HAL_InitTick>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d039      	beq.n	8004d5c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e308      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01e      	beq.n	8004d32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cf4:	f7ff fdc8 	bl	8004888 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fa7c 	bl	80031f4 <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d00:	f7fe fa78 	bl	80031f4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e2f5      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d12:	f7ff fdd7 	bl	80048c4 <LL_RCC_MSI_IsReady>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f1      	beq.n	8004d00 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fde0 	bl	80048e6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fe04 	bl	8004938 <LL_RCC_MSI_SetCalibTrimming>
 8004d30:	e015      	b.n	8004d5e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d32:	f7ff fdb8 	bl	80048a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d36:	f7fe fa5d 	bl	80031f4 <HAL_GetTick>
 8004d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d3e:	f7fe fa59 	bl	80031f4 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e2d6      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d50:	f7ff fdb8 	bl	80048c4 <LL_RCC_MSI_IsReady>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f1      	bne.n	8004d3e <HAL_RCC_OscConfig+0x11a>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d5c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d047      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6a:	f7ff fe0e 	bl	800498a <LL_RCC_GetSysClkSource>
 8004d6e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d70:	f7ff feef 	bl	8004b52 <LL_RCC_PLL_GetMainSource>
 8004d74:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_OscConfig+0x164>
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d108      	bne.n	8004d94 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d105      	bne.n	8004d94 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d134      	bne.n	8004dfa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e2b4      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	d102      	bne.n	8004da4 <HAL_RCC_OscConfig+0x180>
 8004d9e:	f7ff fbf5 	bl	800458c <LL_RCC_HSE_Enable>
 8004da2:	e001      	b.n	8004da8 <HAL_RCC_OscConfig+0x184>
 8004da4:	f7ff fc01 	bl	80045aa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d012      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fe fa20 	bl	80031f4 <HAL_GetTick>
 8004db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fe fa1c 	bl	80031f4 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e299      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004dca:	f7ff fbfd 	bl	80045c8 <LL_RCC_HSE_IsReady>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f1      	beq.n	8004db8 <HAL_RCC_OscConfig+0x194>
 8004dd4:	e011      	b.n	8004dfa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fe fa0d 	bl	80031f4 <HAL_GetTick>
 8004dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dde:	f7fe fa09 	bl	80031f4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b64      	cmp	r3, #100	; 0x64
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e286      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004df0:	f7ff fbea 	bl	80045c8 <LL_RCC_HSE_IsReady>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f1      	bne.n	8004dde <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d04c      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e06:	f7ff fdc0 	bl	800498a <LL_RCC_GetSysClkSource>
 8004e0a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e0c:	f7ff fea1 	bl	8004b52 <LL_RCC_PLL_GetMainSource>
 8004e10:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_OscConfig+0x200>
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d10e      	bne.n	8004e3c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d10b      	bne.n	8004e3c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e266      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fc09 	bl	800464c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e3a:	e031      	b.n	8004ea0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d019      	beq.n	8004e78 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e44:	f7ff fbd2 	bl	80045ec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fe f9d4 	bl	80031f4 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e50:	f7fe f9d0 	bl	80031f4 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e24d      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e62:	f7ff fbe1 	bl	8004628 <LL_RCC_HSI_IsReady>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f1      	beq.n	8004e50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fbeb 	bl	800464c <LL_RCC_HSI_SetCalibTrimming>
 8004e76:	e013      	b.n	8004ea0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e78:	f7ff fbc7 	bl	800460a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fe f9ba 	bl	80031f4 <HAL_GetTick>
 8004e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7fe f9b6 	bl	80031f4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e233      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e96:	f7ff fbc7 	bl	8004628 <LL_RCC_HSI_IsReady>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f1      	bne.n	8004e84 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a3 	beq.w	8005000 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d076      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d046      	beq.n	8004f5c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004ece:	f7ff fc7e 	bl	80047ce <LL_RCC_LSI1_IsReady>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d113      	bne.n	8004f00 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004ed8:	f7ff fc57 	bl	800478a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004edc:	f7fe f98a 	bl	80031f4 <HAL_GetTick>
 8004ee0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ee4:	f7fe f986 	bl	80031f4 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e203      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ef6:	f7ff fc6a 	bl	80047ce <LL_RCC_LSI1_IsReady>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f1      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004f00:	f7ff fc77 	bl	80047f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fe f976 	bl	80031f4 <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f0c:	f7fe f972 	bl	80031f4 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e1ef      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f1e:	f7ff fc8a 	bl	8004836 <LL_RCC_LSI2_IsReady>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f1      	beq.n	8004f0c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fc94 	bl	800485a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004f32:	f7ff fc3b 	bl	80047ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f36:	f7fe f95d 	bl	80031f4 <HAL_GetTick>
 8004f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f3e:	f7fe f959 	bl	80031f4 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e1d6      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f50:	f7ff fc3d 	bl	80047ce <LL_RCC_LSI1_IsReady>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f1      	bne.n	8004f3e <HAL_RCC_OscConfig+0x31a>
 8004f5a:	e051      	b.n	8005000 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004f5c:	f7ff fc15 	bl	800478a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fe f948 	bl	80031f4 <HAL_GetTick>
 8004f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f66:	e00c      	b.n	8004f82 <HAL_RCC_OscConfig+0x35e>
 8004f68:	20000008 	.word	0x20000008
 8004f6c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f70:	f7fe f940 	bl	80031f4 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1bd      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f82:	f7ff fc24 	bl	80047ce <LL_RCC_LSI1_IsReady>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f1      	beq.n	8004f70 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004f8c:	f7ff fc42 	bl	8004814 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f92:	f7fe f92f 	bl	80031f4 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e1ac      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004fa4:	f7ff fc47 	bl	8004836 <LL_RCC_LSI2_IsReady>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f1      	bne.n	8004f92 <HAL_RCC_OscConfig+0x36e>
 8004fae:	e027      	b.n	8005000 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004fb0:	f7ff fc30 	bl	8004814 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fe f91e 	bl	80031f4 <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fbc:	f7fe f91a 	bl	80031f4 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e197      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004fce:	f7ff fc32 	bl	8004836 <LL_RCC_LSI2_IsReady>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f1      	bne.n	8004fbc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004fd8:	f7ff fbe8 	bl	80047ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fe f90a 	bl	80031f4 <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fe4:	f7fe f906 	bl	80031f4 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e183      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004ff6:	f7ff fbea 	bl	80047ce <LL_RCC_LSI1_IsReady>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f1      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05b      	beq.n	80050c4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800500c:	4ba7      	ldr	r3, [pc, #668]	; (80052ac <HAL_RCC_OscConfig+0x688>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d114      	bne.n	8005042 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005018:	f7ff fa88 	bl	800452c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501c:	f7fe f8ea 	bl	80031f4 <HAL_GetTick>
 8005020:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005024:	f7fe f8e6 	bl	80031f4 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e163      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005036:	4b9d      	ldr	r3, [pc, #628]	; (80052ac <HAL_RCC_OscConfig+0x688>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d102      	bne.n	8005050 <HAL_RCC_OscConfig+0x42c>
 800504a:	f7ff fb48 	bl	80046de <LL_RCC_LSE_Enable>
 800504e:	e00c      	b.n	800506a <HAL_RCC_OscConfig+0x446>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b05      	cmp	r3, #5
 8005056:	d104      	bne.n	8005062 <HAL_RCC_OscConfig+0x43e>
 8005058:	f7ff fb63 	bl	8004722 <LL_RCC_LSE_EnableBypass>
 800505c:	f7ff fb3f 	bl	80046de <LL_RCC_LSE_Enable>
 8005060:	e003      	b.n	800506a <HAL_RCC_OscConfig+0x446>
 8005062:	f7ff fb4d 	bl	8004700 <LL_RCC_LSE_Disable>
 8005066:	f7ff fb6d 	bl	8004744 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d014      	beq.n	800509c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005072:	f7fe f8bf 	bl	80031f4 <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005078:	e00a      	b.n	8005090 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fe f8bb 	bl	80031f4 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e136      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005090:	f7ff fb69 	bl	8004766 <LL_RCC_LSE_IsReady>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0ef      	beq.n	800507a <HAL_RCC_OscConfig+0x456>
 800509a:	e013      	b.n	80050c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509c:	f7fe f8aa 	bl	80031f4 <HAL_GetTick>
 80050a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a4:	f7fe f8a6 	bl	80031f4 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e121      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80050ba:	f7ff fb54 	bl	8004766 <LL_RCC_LSE_IsReady>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ef      	bne.n	80050a4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d02c      	beq.n	800512a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d014      	beq.n	8005102 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050d8:	f7ff facd 	bl	8004676 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050dc:	f7fe f88a 	bl	80031f4 <HAL_GetTick>
 80050e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050e4:	f7fe f886 	bl	80031f4 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e103      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050f6:	f7ff fae0 	bl	80046ba <LL_RCC_HSI48_IsReady>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f1      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4c0>
 8005100:	e013      	b.n	800512a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005102:	f7ff fac9 	bl	8004698 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005106:	f7fe f875 	bl	80031f4 <HAL_GetTick>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800510e:	f7fe f871 	bl	80031f4 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e0ee      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005120:	f7ff facb 	bl	80046ba <LL_RCC_HSI48_IsReady>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f1      	bne.n	800510e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 80e4 	beq.w	80052fc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005134:	f7ff fc29 	bl	800498a <LL_RCC_GetSysClkSource>
 8005138:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	2b02      	cmp	r3, #2
 8005148:	f040 80b4 	bne.w	80052b4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0203 	and.w	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	429a      	cmp	r2, r3
 8005158:	d123      	bne.n	80051a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d11c      	bne.n	80051a2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d114      	bne.n	80051a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d10d      	bne.n	80051a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d106      	bne.n	80051a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800519e:	429a      	cmp	r2, r3
 80051a0:	d05d      	beq.n	800525e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d058      	beq.n	800525a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e0a1      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051ba:	f7ff fc84 	bl	8004ac6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051be:	f7fe f819 	bl	80031f4 <HAL_GetTick>
 80051c2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c6:	f7fe f815 	bl	80031f4 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e092      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ef      	bne.n	80051c6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <HAL_RCC_OscConfig+0x68c>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051f8:	4311      	orrs	r1, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051fe:	0212      	lsls	r2, r2, #8
 8005200:	4311      	orrs	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005206:	4311      	orrs	r1, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800520c:	4311      	orrs	r1, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005212:	430a      	orrs	r2, r1
 8005214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005218:	4313      	orrs	r3, r2
 800521a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800521c:	f7ff fc44 	bl	8004aa8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800522a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005230:	f7fd ffe0 	bl	80031f4 <HAL_GetTick>
 8005234:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005238:	f7fd ffdc 	bl	80031f4 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e059      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0ef      	beq.n	8005238 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005258:	e050      	b.n	80052fc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e04f      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d147      	bne.n	80052fc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800526c:	f7ff fc1c 	bl	8004aa8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005280:	f7fd ffb8 	bl	80031f4 <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005288:	f7fd ffb4 	bl	80031f4 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e031      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ef      	beq.n	8005288 <HAL_RCC_OscConfig+0x664>
 80052a8:	e028      	b.n	80052fc <HAL_RCC_OscConfig+0x6d8>
 80052aa:	bf00      	nop
 80052ac:	58000400 	.word	0x58000400
 80052b0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d01e      	beq.n	80052f8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	f7ff fc04 	bl	8004ac6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fd ff99 	bl	80031f4 <HAL_GetTick>
 80052c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c6:	f7fd ff95 	bl	80031f4 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e012      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1ef      	bne.n	80052c6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCC_OscConfig+0x6e4>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	60cb      	str	r3, [r1, #12]
 80052f6:	e001      	b.n	80052fc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3734      	adds	r7, #52	; 0x34
 8005302:	46bd      	mov	sp, r7
 8005304:	bd90      	pop	{r4, r7, pc}
 8005306:	bf00      	nop
 8005308:	eefefffc 	.word	0xeefefffc

0800530c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e12d      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005320:	4b98      	ldr	r3, [pc, #608]	; (8005584 <HAL_RCC_ClockConfig+0x278>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d91b      	bls.n	8005366 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532e:	4b95      	ldr	r3, [pc, #596]	; (8005584 <HAL_RCC_ClockConfig+0x278>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 0207 	bic.w	r2, r3, #7
 8005336:	4993      	ldr	r1, [pc, #588]	; (8005584 <HAL_RCC_ClockConfig+0x278>)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533e:	f7fd ff59 	bl	80031f4 <HAL_GetTick>
 8005342:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005344:	e008      	b.n	8005358 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005346:	f7fd ff55 	bl	80031f4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e111      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005358:	4b8a      	ldr	r3, [pc, #552]	; (8005584 <HAL_RCC_ClockConfig+0x278>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d1ef      	bne.n	8005346 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fb13 	bl	80049a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800537c:	f7fd ff3a 	bl	80031f4 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005384:	f7fd ff36 	bl	80031f4 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e0f2      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005396:	f7ff fbe8 	bl	8004b6a <LL_RCC_IsActiveFlag_HPRE>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f1      	beq.n	8005384 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d016      	beq.n	80053da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fb0a 	bl	80049ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053b6:	f7fd ff1d 	bl	80031f4 <HAL_GetTick>
 80053ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053be:	f7fd ff19 	bl	80031f4 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e0d5      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053d0:	f7ff fbdd 	bl	8004b8e <LL_RCC_IsActiveFlag_C2HPRE>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f1      	beq.n	80053be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fb03 	bl	80049f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053f0:	f7fd ff00 	bl	80031f4 <HAL_GetTick>
 80053f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053f6:	e008      	b.n	800540a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053f8:	f7fd fefc 	bl	80031f4 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e0b8      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800540a:	f7ff fbd3 	bl	8004bb4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f1      	beq.n	80053f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d016      	beq.n	800544e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fafd 	bl	8004a24 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800542a:	f7fd fee3 	bl	80031f4 <HAL_GetTick>
 800542e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005432:	f7fd fedf 	bl	80031f4 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e09b      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005444:	f7ff fbc9 	bl	8004bda <LL_RCC_IsActiveFlag_PPRE1>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f1      	beq.n	8005432 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d017      	beq.n	800548a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff faf3 	bl	8004a4c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005466:	f7fd fec5 	bl	80031f4 <HAL_GetTick>
 800546a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800546e:	f7fd fec1 	bl	80031f4 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e07d      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005480:	f7ff fbbd 	bl	8004bfe <LL_RCC_IsActiveFlag_PPRE2>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f1      	beq.n	800546e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d043      	beq.n	800551e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d106      	bne.n	80054ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800549e:	f7ff f893 	bl	80045c8 <LL_RCC_HSE_IsReady>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11e      	bne.n	80054e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e067      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d106      	bne.n	80054c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80054b4:	f7ff fb16 	bl	8004ae4 <LL_RCC_PLL_IsReady>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d113      	bne.n	80054e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e05c      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80054ca:	f7ff f9fb 	bl	80048c4 <LL_RCC_MSI_IsReady>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d108      	bne.n	80054e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e051      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80054d8:	f7ff f8a6 	bl	8004628 <LL_RCC_HSI_IsReady>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e04a      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fa39 	bl	8004962 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f0:	f7fd fe80 	bl	80031f4 <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	e00a      	b.n	800550e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f8:	f7fd fe7c 	bl	80031f4 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	f241 3288 	movw	r2, #5000	; 0x1388
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e036      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	f7ff fa3c 	bl	800498a <LL_RCC_GetSysClkSource>
 8005512:	4602      	mov	r2, r0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	429a      	cmp	r2, r3
 800551c:	d1ec      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCC_ClockConfig+0x278>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d21b      	bcs.n	8005564 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552c:	4b15      	ldr	r3, [pc, #84]	; (8005584 <HAL_RCC_ClockConfig+0x278>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 0207 	bic.w	r2, r3, #7
 8005534:	4913      	ldr	r1, [pc, #76]	; (8005584 <HAL_RCC_ClockConfig+0x278>)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553c:	f7fd fe5a 	bl	80031f4 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	e008      	b.n	8005556 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005544:	f7fd fe56 	bl	80031f4 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e012      	b.n	800557c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_ClockConfig+0x278>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d1ef      	bne.n	8005544 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005564:	f000 f880 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 8005568:	4603      	mov	r3, r0
 800556a:	4a07      	ldr	r2, [pc, #28]	; (8005588 <HAL_RCC_ClockConfig+0x27c>)
 800556c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800556e:	f7fd fe4d 	bl	800320c <HAL_GetTickPrio>
 8005572:	4603      	mov	r3, r0
 8005574:	4618      	mov	r0, r3
 8005576:	f7fd fdef 	bl	8003158 <HAL_InitTick>
 800557a:	4603      	mov	r3, r0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	58004000 	.word	0x58004000
 8005588:	20000008 	.word	0x20000008

0800558c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005592:	f7ff f9fa 	bl	800498a <LL_RCC_GetSysClkSource>
 8005596:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800559e:	f7ff f9b6 	bl	800490e <LL_RCC_MSI_GetRange>
 80055a2:	4603      	mov	r3, r0
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <HAL_RCC_GetSysClockFreq+0xcc>)
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e04b      	b.n	800564c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d102      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055ba:	4b28      	ldr	r3, [pc, #160]	; (800565c <HAL_RCC_GetSysClockFreq+0xd0>)
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e045      	b.n	800564c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d10a      	bne.n	80055dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055c6:	f7fe ffcf 	bl	8004568 <LL_RCC_HSE_IsEnabledDiv2>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d102      	bne.n	80055d6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80055d0:	4b23      	ldr	r3, [pc, #140]	; (8005660 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e03a      	b.n	800564c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80055d6:	4b23      	ldr	r3, [pc, #140]	; (8005664 <HAL_RCC_GetSysClockFreq+0xd8>)
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e037      	b.n	800564c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80055dc:	f7ff fab9 	bl	8004b52 <LL_RCC_PLL_GetMainSource>
 80055e0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d003      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x64>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d003      	beq.n	80055f6 <HAL_RCC_GetSysClockFreq+0x6a>
 80055ee:	e00d      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80055f0:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_RCC_GetSysClockFreq+0xd0>)
 80055f2:	60bb      	str	r3, [r7, #8]
        break;
 80055f4:	e015      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055f6:	f7fe ffb7 	bl	8004568 <LL_RCC_HSE_IsEnabledDiv2>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d102      	bne.n	8005606 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005600:	4b17      	ldr	r3, [pc, #92]	; (8005660 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005602:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005604:	e00d      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005606:	4b17      	ldr	r3, [pc, #92]	; (8005664 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005608:	60bb      	str	r3, [r7, #8]
        break;
 800560a:	e00a      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800560c:	f7ff f97f 	bl	800490e <LL_RCC_MSI_GetRange>
 8005610:	4603      	mov	r3, r0
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	4a0f      	ldr	r2, [pc, #60]	; (8005658 <HAL_RCC_GetSysClockFreq+0xcc>)
 800561a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561e:	60bb      	str	r3, [r7, #8]
        break;
 8005620:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005622:	f7ff fa71 	bl	8004b08 <LL_RCC_PLL_GetN>
 8005626:	4602      	mov	r2, r0
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	fb03 f402 	mul.w	r4, r3, r2
 800562e:	f7ff fa84 	bl	8004b3a <LL_RCC_PLL_GetDivider>
 8005632:	4603      	mov	r3, r0
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	3301      	adds	r3, #1
 8005638:	fbb4 f4f3 	udiv	r4, r4, r3
 800563c:	f7ff fa71 	bl	8004b22 <LL_RCC_PLL_GetR>
 8005640:	4603      	mov	r3, r0
 8005642:	0f5b      	lsrs	r3, r3, #29
 8005644:	3301      	adds	r3, #1
 8005646:	fbb4 f3f3 	udiv	r3, r4, r3
 800564a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	bf00      	nop
 8005658:	08009230 	.word	0x08009230
 800565c:	00f42400 	.word	0x00f42400
 8005660:	003d0900 	.word	0x003d0900
 8005664:	007a1200 	.word	0x007a1200

08005668 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005668:	b598      	push	{r3, r4, r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800566c:	f7ff ff8e 	bl	800558c <HAL_RCC_GetSysClockFreq>
 8005670:	4604      	mov	r4, r0
 8005672:	f7ff f9ff 	bl	8004a74 <LL_RCC_GetAHBPrescaler>
 8005676:	4603      	mov	r3, r0
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	4a03      	ldr	r2, [pc, #12]	; (800568c <HAL_RCC_GetHCLKFreq+0x24>)
 8005680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005684:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005688:	4618      	mov	r0, r3
 800568a:	bd98      	pop	{r3, r4, r7, pc}
 800568c:	080091f0 	.word	0x080091f0

08005690 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2bb0      	cmp	r3, #176	; 0xb0
 800569c:	d903      	bls.n	80056a6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e007      	b.n	80056b6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	091b      	lsrs	r3, r3, #4
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80056b6:	f7ff f9e9 	bl	8004a8c <LL_RCC_GetAHB4Prescaler>
 80056ba:	4603      	mov	r3, r0
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	4a0d      	ldr	r2, [pc, #52]	; (80056f8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80056c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	0c9c      	lsrs	r4, r3, #18
 80056da:	f7fe ff37 	bl	800454c <HAL_PWREx_GetVoltageRange>
 80056de:	4603      	mov	r3, r0
 80056e0:	4619      	mov	r1, r3
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f80c 	bl	8005700 <RCC_SetFlashLatency>
 80056e8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd90      	pop	{r4, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	08009230 	.word	0x08009230
 80056f8:	080091f0 	.word	0x080091f0
 80056fc:	431bde83 	.word	0x431bde83

08005700 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b093      	sub	sp, #76	; 0x4c
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800570a:	4b37      	ldr	r3, [pc, #220]	; (80057e8 <RCC_SetFlashLatency+0xe8>)
 800570c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005710:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005716:	4a35      	ldr	r2, [pc, #212]	; (80057ec <RCC_SetFlashLatency+0xec>)
 8005718:	f107 031c 	add.w	r3, r7, #28
 800571c:	ca07      	ldmia	r2, {r0, r1, r2}
 800571e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005722:	4b33      	ldr	r3, [pc, #204]	; (80057f0 <RCC_SetFlashLatency+0xf0>)
 8005724:	f107 040c 	add.w	r4, r7, #12
 8005728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800572a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800572e:	2300      	movs	r3, #0
 8005730:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d11a      	bne.n	8005770 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800573a:	2300      	movs	r3, #0
 800573c:	643b      	str	r3, [r7, #64]	; 0x40
 800573e:	e013      	b.n	8005768 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	3348      	adds	r3, #72	; 0x48
 8005746:	443b      	add	r3, r7
 8005748:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d807      	bhi.n	8005762 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	3348      	adds	r3, #72	; 0x48
 8005758:	443b      	add	r3, r7
 800575a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800575e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005760:	e020      	b.n	80057a4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005764:	3301      	adds	r3, #1
 8005766:	643b      	str	r3, [r7, #64]	; 0x40
 8005768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576a:	2b03      	cmp	r3, #3
 800576c:	d9e8      	bls.n	8005740 <RCC_SetFlashLatency+0x40>
 800576e:	e019      	b.n	80057a4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005770:	2300      	movs	r3, #0
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005774:	e013      	b.n	800579e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	3348      	adds	r3, #72	; 0x48
 800577c:	443b      	add	r3, r7
 800577e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d807      	bhi.n	8005798 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	3348      	adds	r3, #72	; 0x48
 800578e:	443b      	add	r3, r7
 8005790:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005796:	e005      	b.n	80057a4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579a:	3301      	adds	r3, #1
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d9e8      	bls.n	8005776 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80057a4:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <RCC_SetFlashLatency+0xf4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f023 0207 	bic.w	r2, r3, #7
 80057ac:	4911      	ldr	r1, [pc, #68]	; (80057f4 <RCC_SetFlashLatency+0xf4>)
 80057ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057b4:	f7fd fd1e 	bl	80031f4 <HAL_GetTick>
 80057b8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057ba:	e008      	b.n	80057ce <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057bc:	f7fd fd1a 	bl	80031f4 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e007      	b.n	80057de <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <RCC_SetFlashLatency+0xf4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1ef      	bne.n	80057bc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	374c      	adds	r7, #76	; 0x4c
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd90      	pop	{r4, r7, pc}
 80057e6:	bf00      	nop
 80057e8:	080091c4 	.word	0x080091c4
 80057ec:	080091d4 	.word	0x080091d4
 80057f0:	080091e0 	.word	0x080091e0
 80057f4:	58004000 	.word	0x58004000

080057f8 <LL_RCC_LSE_IsEnabled>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <LL_RCC_LSE_IsEnabled+0x18>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <LL_RCC_LSE_IsEnabled+0x1a>
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <LL_RCC_LSE_IsReady>:
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d101      	bne.n	8005834 <LL_RCC_LSE_IsReady+0x18>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <LL_RCC_LSE_IsReady+0x1a>
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <LL_RCC_MSI_EnablePLLMode>:
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800584e:	f043 0304 	orr.w	r3, r3, #4
 8005852:	6013      	str	r3, [r2, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <LL_RCC_SetRFWKPClockSource>:
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <LL_RCC_SetSMPSClockSource>:
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f023 0203 	bic.w	r2, r3, #3
 800589c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <LL_RCC_SetSMPSPrescaler>:
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <LL_RCC_SetUSARTClockSource>:
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ea:	f023 0203 	bic.w	r2, r3, #3
 80058ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <LL_RCC_SetLPUARTClockSource>:
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800590e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800591a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <LL_RCC_SetI2CClockSource>:
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800593a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800594a:	43db      	mvns	r3, r3
 800594c:	401a      	ands	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <LL_RCC_SetLPTIMClockSource>:
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	0c1b      	lsrs	r3, r3, #16
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	43db      	mvns	r3, r3
 8005984:	401a      	ands	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <LL_RCC_SetSAIClockSource>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80059a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <LL_RCC_SetRNGClockSource>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <LL_RCC_SetCLK48ClockSource>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_RCC_SetUSBClockSource>:
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff ffe3 	bl	80059f8 <LL_RCC_SetCLK48ClockSource>
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <LL_RCC_SetADCClockSource>:
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <LL_RCC_SetRTCClockSource>:
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <LL_RCC_GetRTCClockSource>:
{
 8005a92:	b480      	push	{r7}
 8005a94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <LL_RCC_ForceBackupDomainReset>:
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ace:	b480      	push	{r7}
 8005ad0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ae6:	bf00      	nop
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_RCC_PLLSAI1_Enable>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b02:	6013      	str	r3, [r2, #0]
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <LL_RCC_PLLSAI1_Disable>:
{
 8005b0e:	b480      	push	{r7}
 8005b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b20:	6013      	str	r3, [r2, #0]
}
 8005b22:	bf00      	nop
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <LL_RCC_PLLSAI1_IsReady>:
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3e:	d101      	bne.n	8005b44 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b58:	2300      	movs	r3, #0
 8005b5a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d034      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b74:	d021      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005b76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b7a:	d81b      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b80:	d01d      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b86:	d815      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b90:	d110      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ba2:	e00d      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 f94d 	bl	8005e48 <RCCEx_PLLSAI1_ConfigNP>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bb2:	e005      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	77fb      	strb	r3, [r7, #31]
        break;
 8005bb8:	e002      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bba:	bf00      	nop
 8005bbc:	e000      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc0:	7ffb      	ldrb	r3, [r7, #31]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d105      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fee8 	bl	80059a0 <LL_RCC_SetSAIClockSource>
 8005bd0:	e001      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
 8005bd4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d046      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005be2:	f7ff ff56 	bl	8005a92 <LL_RCC_GetRTCClockSource>
 8005be6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d03c      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005bf2:	f7fe fc9b 	bl	800452c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff30 	bl	8005a66 <LL_RCC_SetRTCClockSource>
 8005c06:	e02e      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005c12:	f7ff ff4b 	bl	8005aac <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005c16:	f7ff ff5a 	bl	8005ace <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c32:	f7ff fde1 	bl	80057f8 <LL_RCC_LSE_IsEnabled>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d114      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c3c:	f7fd fada 	bl	80031f4 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c42:	e00b      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c44:	f7fd fad6 	bl	80031f4 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d902      	bls.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	77fb      	strb	r3, [r7, #31]
              break;
 8005c5a:	e004      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c5c:	f7ff fdde 	bl	800581c <LL_RCC_LSE_IsReady>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d1ee      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c66:	7ffb      	ldrb	r3, [r7, #31]
 8005c68:	77bb      	strb	r3, [r7, #30]
 8005c6a:	e001      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	7ffb      	ldrb	r3, [r7, #31]
 8005c6e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fe2a 	bl	80058da <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fe35 	bl	8005906 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fe5d 	bl	800596c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fe52 	bl	800596c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fe2a 	bl	8005932 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d004      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fe1f 	bl	8005932 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d022      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff fe8d 	bl	8005a24 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d12:	d107      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d22:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f8e3 	bl	8005efe <RCCEx_PLLSAI1_ConfigNQ>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d3c:	7ffb      	ldrb	r3, [r7, #31]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005d42:	7ffb      	ldrb	r3, [r7, #31]
 8005d44:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d02b      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d008      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d64:	d003      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fe2a 	bl	80059cc <LL_RCC_SetRNGClockSource>
 8005d78:	e00a      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	2000      	movs	r0, #0
 8005d86:	f7ff fe21 	bl	80059cc <LL_RCC_SetRNGClockSource>
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff fe34 	bl	80059f8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d98:	d107      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005da8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d022      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fe3d 	bl	8005a3a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc8:	d107      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de2:	d10b      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 f8e3 	bl	8005fb4 <RCCEx_PLLSAI1_ConfigNR>
 8005dee:	4603      	mov	r3, r0
 8005df0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005df2:	7ffb      	ldrb	r3, [r7, #31]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005df8:	7ffb      	ldrb	r3, [r7, #31]
 8005dfa:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fd26 	bl	800585e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fd45 	bl	80058b2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fd2c 	bl	800588a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005e32:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005e40:	f7ff fcfe 	bl	8005840 <LL_RCC_MSI_EnablePLLMode>
}
 8005e44:	bf00      	nop
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e54:	f7ff fe5b 	bl	8005b0e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e58:	f7fd f9cc 	bl	80031f4 <HAL_GetTick>
 8005e5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e5e:	e009      	b.n	8005e74 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e60:	f7fd f9c8 	bl	80031f4 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d902      	bls.n	8005e74 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	73fb      	strb	r3, [r7, #15]
      break;
 8005e72:	e004      	b.n	8005e7e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e74:	f7ff fe5a 	bl	8005b2c <LL_RCC_PLLSAI1_IsReady>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d137      	bne.n	8005ef4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005eb2:	f7ff fe1d 	bl	8005af0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb6:	f7fd f99d 	bl	80031f4 <HAL_GetTick>
 8005eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ebc:	e009      	b.n	8005ed2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ebe:	f7fd f999 	bl	80031f4 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d902      	bls.n	8005ed2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	73fb      	strb	r3, [r7, #15]
        break;
 8005ed0:	e004      	b.n	8005edc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ed2:	f7ff fe2b 	bl	8005b2c <LL_RCC_PLLSAI1_IsReady>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d1f0      	bne.n	8005ebe <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d108      	bne.n	8005ef4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f0a:	f7ff fe00 	bl	8005b0e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f0e:	f7fd f971 	bl	80031f4 <HAL_GetTick>
 8005f12:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f14:	e009      	b.n	8005f2a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f16:	f7fd f96d 	bl	80031f4 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d902      	bls.n	8005f2a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	73fb      	strb	r3, [r7, #15]
      break;
 8005f28:	e004      	b.n	8005f34 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f2a:	f7ff fdff 	bl	8005b2c <LL_RCC_PLLSAI1_IsReady>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f0      	bne.n	8005f16 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d137      	bne.n	8005faa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f64:	4313      	orrs	r3, r2
 8005f66:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f68:	f7ff fdc2 	bl	8005af0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6c:	f7fd f942 	bl	80031f4 <HAL_GetTick>
 8005f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f72:	e009      	b.n	8005f88 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f74:	f7fd f93e 	bl	80031f4 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d902      	bls.n	8005f88 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	73fb      	strb	r3, [r7, #15]
        break;
 8005f86:	e004      	b.n	8005f92 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f88:	f7ff fdd0 	bl	8005b2c <LL_RCC_PLLSAI1_IsReady>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d1f0      	bne.n	8005f74 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005fc0:	f7ff fda5 	bl	8005b0e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fc4:	f7fd f916 	bl	80031f4 <HAL_GetTick>
 8005fc8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fca:	e009      	b.n	8005fe0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fcc:	f7fd f912 	bl	80031f4 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d902      	bls.n	8005fe0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fde:	e004      	b.n	8005fea <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fe0:	f7ff fda4 	bl	8005b2c <LL_RCC_PLLSAI1_IsReady>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d137      	bne.n	8006060 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006004:	4313      	orrs	r3, r2
 8006006:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601a:	4313      	orrs	r3, r2
 800601c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800601e:	f7ff fd67 	bl	8005af0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fd f8e7 	bl	80031f4 <HAL_GetTick>
 8006026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006028:	e009      	b.n	800603e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800602a:	f7fd f8e3 	bl	80031f4 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d902      	bls.n	800603e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	73fb      	strb	r3, [r7, #15]
        break;
 800603c:	e004      	b.n	8006048 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800603e:	f7ff fd75 	bl	8005b2c <LL_RCC_PLLSAI1_IsReady>
 8006042:	4603      	mov	r3, r0
 8006044:	2b01      	cmp	r3, #1
 8006046:	d1f0      	bne.n	800602a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d108      	bne.n	8006060 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800604e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800605c:	4313      	orrs	r3, r2
 800605e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e09f      	b.n	80061be <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc fe2e 	bl	8002cf4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80060a0:	4b49      	ldr	r3, [pc, #292]	; (80061c8 <HAL_RTC_Init+0x15c>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d07e      	beq.n	80061aa <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	22ca      	movs	r2, #202	; 0xca
 80060b2:	625a      	str	r2, [r3, #36]	; 0x24
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2253      	movs	r2, #83	; 0x53
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f8ab 	bl	8006218 <RTC_EnterInitMode>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	22ff      	movs	r2, #255	; 0xff
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2204      	movs	r2, #4
 80060d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
 80060dc:	e067      	b.n	80061ae <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6899      	ldr	r1, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	68d2      	ldr	r2, [r2, #12]
 8006118:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6919      	ldr	r1, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	041a      	lsls	r2, r3, #16
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800613c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0203 	bic.w	r2, r2, #3
 800614c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d113      	bne.n	800619c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f829 	bl	80061cc <HAL_RTC_WaitForSynchro>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00d      	beq.n	800619c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	22ff      	movs	r2, #255	; 0xff
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2204      	movs	r2, #4
 800618c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e010      	b.n	80061be <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	22ff      	movs	r2, #255	; 0xff
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e001      	b.n	80061ae <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40002800 	.word	0x40002800

080061cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061e4:	f7fd f806 	bl	80031f4 <HAL_GetTick>
 80061e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061ea:	e009      	b.n	8006200 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061ec:	f7fd f802 	bl	80031f4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061fa:	d901      	bls.n	8006200 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e007      	b.n	8006210 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0ee      	beq.n	80061ec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d119      	bne.n	8006262 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006238:	f7fc ffdc 	bl	80031f4 <HAL_GetTick>
 800623c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800623e:	e009      	b.n	8006254 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006240:	f7fc ffd8 	bl	80031f4 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800624e:	d901      	bls.n	8006254 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e007      	b.n	8006264 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0ee      	beq.n	8006240 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006282:	2302      	movs	r3, #2
 8006284:	e0a8      	b.n	80063d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2202      	movs	r2, #2
 8006292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	22ca      	movs	r2, #202	; 0xca
 800629c:	625a      	str	r2, [r3, #36]	; 0x24
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2253      	movs	r2, #83	; 0x53
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d020      	beq.n	80062f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80062b4:	f7fc ff9e 	bl	80031f4 <HAL_GetTick>
 80062b8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062ba:	e015      	b.n	80062e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062bc:	f7fc ff9a 	bl	80031f4 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ca:	d90d      	bls.n	80062e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	22ff      	movs	r2, #255	; 0xff
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2203      	movs	r2, #3
 80062d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e077      	b.n	80063d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e2      	bne.n	80062bc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006304:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006316:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006318:	f7fc ff6c 	bl	80031f4 <HAL_GetTick>
 800631c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800631e:	e015      	b.n	800634c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006320:	f7fc ff68 	bl	80031f4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800632e:	d90d      	bls.n	800634c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	22ff      	movs	r2, #255	; 0xff
 8006336:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2203      	movs	r2, #3
 800633c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e045      	b.n	80063d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0e2      	beq.n	8006320 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0207 	bic.w	r2, r2, #7
 8006370:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800638a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800638e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006392:	4b13      	ldr	r3, [pc, #76]	; (80063e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a12      	ldr	r2, [pc, #72]	; (80063e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800639c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063bc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	22ff      	movs	r2, #255	; 0xff
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	58000800 	.word	0x58000800

080063e4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00b      	beq.n	8006412 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f818 	bl	8006430 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006410:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8006414:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006418:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	58000800 	.word	0x58000800

08006430 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800644c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006450:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	b29b      	uxth	r3, r3
 800645e:	43db      	mvns	r3, r3
 8006460:	b29b      	uxth	r3, r3
 8006462:	4013      	ands	r3, r2
 8006464:	b29a      	uxth	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <malloc>:
 80064b8:	4b02      	ldr	r3, [pc, #8]	; (80064c4 <malloc+0xc>)
 80064ba:	4601      	mov	r1, r0
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	f000 b82b 	b.w	8006518 <_malloc_r>
 80064c2:	bf00      	nop
 80064c4:	2000006c 	.word	0x2000006c

080064c8 <free>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <free+0xc>)
 80064ca:	4601      	mov	r1, r0
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f001 be35 	b.w	800813c <_free_r>
 80064d2:	bf00      	nop
 80064d4:	2000006c 	.word	0x2000006c

080064d8 <sbrk_aligned>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4e0e      	ldr	r6, [pc, #56]	; (8006514 <sbrk_aligned+0x3c>)
 80064dc:	460c      	mov	r4, r1
 80064de:	6831      	ldr	r1, [r6, #0]
 80064e0:	4605      	mov	r5, r0
 80064e2:	b911      	cbnz	r1, 80064ea <sbrk_aligned+0x12>
 80064e4:	f000 ff52 	bl	800738c <_sbrk_r>
 80064e8:	6030      	str	r0, [r6, #0]
 80064ea:	4621      	mov	r1, r4
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 ff4d 	bl	800738c <_sbrk_r>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d00a      	beq.n	800650c <sbrk_aligned+0x34>
 80064f6:	1cc4      	adds	r4, r0, #3
 80064f8:	f024 0403 	bic.w	r4, r4, #3
 80064fc:	42a0      	cmp	r0, r4
 80064fe:	d007      	beq.n	8006510 <sbrk_aligned+0x38>
 8006500:	1a21      	subs	r1, r4, r0
 8006502:	4628      	mov	r0, r5
 8006504:	f000 ff42 	bl	800738c <_sbrk_r>
 8006508:	3001      	adds	r0, #1
 800650a:	d101      	bne.n	8006510 <sbrk_aligned+0x38>
 800650c:	f04f 34ff 	mov.w	r4, #4294967295
 8006510:	4620      	mov	r0, r4
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	200005b4 	.word	0x200005b4

08006518 <_malloc_r>:
 8006518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800651c:	1ccd      	adds	r5, r1, #3
 800651e:	f025 0503 	bic.w	r5, r5, #3
 8006522:	3508      	adds	r5, #8
 8006524:	2d0c      	cmp	r5, #12
 8006526:	bf38      	it	cc
 8006528:	250c      	movcc	r5, #12
 800652a:	2d00      	cmp	r5, #0
 800652c:	4607      	mov	r7, r0
 800652e:	db01      	blt.n	8006534 <_malloc_r+0x1c>
 8006530:	42a9      	cmp	r1, r5
 8006532:	d905      	bls.n	8006540 <_malloc_r+0x28>
 8006534:	230c      	movs	r3, #12
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	2600      	movs	r6, #0
 800653a:	4630      	mov	r0, r6
 800653c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006540:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006614 <_malloc_r+0xfc>
 8006544:	f000 f868 	bl	8006618 <__malloc_lock>
 8006548:	f8d8 3000 	ldr.w	r3, [r8]
 800654c:	461c      	mov	r4, r3
 800654e:	bb5c      	cbnz	r4, 80065a8 <_malloc_r+0x90>
 8006550:	4629      	mov	r1, r5
 8006552:	4638      	mov	r0, r7
 8006554:	f7ff ffc0 	bl	80064d8 <sbrk_aligned>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	4604      	mov	r4, r0
 800655c:	d155      	bne.n	800660a <_malloc_r+0xf2>
 800655e:	f8d8 4000 	ldr.w	r4, [r8]
 8006562:	4626      	mov	r6, r4
 8006564:	2e00      	cmp	r6, #0
 8006566:	d145      	bne.n	80065f4 <_malloc_r+0xdc>
 8006568:	2c00      	cmp	r4, #0
 800656a:	d048      	beq.n	80065fe <_malloc_r+0xe6>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	4631      	mov	r1, r6
 8006570:	4638      	mov	r0, r7
 8006572:	eb04 0903 	add.w	r9, r4, r3
 8006576:	f000 ff09 	bl	800738c <_sbrk_r>
 800657a:	4581      	cmp	r9, r0
 800657c:	d13f      	bne.n	80065fe <_malloc_r+0xe6>
 800657e:	6821      	ldr	r1, [r4, #0]
 8006580:	1a6d      	subs	r5, r5, r1
 8006582:	4629      	mov	r1, r5
 8006584:	4638      	mov	r0, r7
 8006586:	f7ff ffa7 	bl	80064d8 <sbrk_aligned>
 800658a:	3001      	adds	r0, #1
 800658c:	d037      	beq.n	80065fe <_malloc_r+0xe6>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	442b      	add	r3, r5
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	f8d8 3000 	ldr.w	r3, [r8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d038      	beq.n	800660e <_malloc_r+0xf6>
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	42a2      	cmp	r2, r4
 80065a0:	d12b      	bne.n	80065fa <_malloc_r+0xe2>
 80065a2:	2200      	movs	r2, #0
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	e00f      	b.n	80065c8 <_malloc_r+0xb0>
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	1b52      	subs	r2, r2, r5
 80065ac:	d41f      	bmi.n	80065ee <_malloc_r+0xd6>
 80065ae:	2a0b      	cmp	r2, #11
 80065b0:	d917      	bls.n	80065e2 <_malloc_r+0xca>
 80065b2:	1961      	adds	r1, r4, r5
 80065b4:	42a3      	cmp	r3, r4
 80065b6:	6025      	str	r5, [r4, #0]
 80065b8:	bf18      	it	ne
 80065ba:	6059      	strne	r1, [r3, #4]
 80065bc:	6863      	ldr	r3, [r4, #4]
 80065be:	bf08      	it	eq
 80065c0:	f8c8 1000 	streq.w	r1, [r8]
 80065c4:	5162      	str	r2, [r4, r5]
 80065c6:	604b      	str	r3, [r1, #4]
 80065c8:	4638      	mov	r0, r7
 80065ca:	f104 060b 	add.w	r6, r4, #11
 80065ce:	f000 f829 	bl	8006624 <__malloc_unlock>
 80065d2:	f026 0607 	bic.w	r6, r6, #7
 80065d6:	1d23      	adds	r3, r4, #4
 80065d8:	1af2      	subs	r2, r6, r3
 80065da:	d0ae      	beq.n	800653a <_malloc_r+0x22>
 80065dc:	1b9b      	subs	r3, r3, r6
 80065de:	50a3      	str	r3, [r4, r2]
 80065e0:	e7ab      	b.n	800653a <_malloc_r+0x22>
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	6862      	ldr	r2, [r4, #4]
 80065e6:	d1dd      	bne.n	80065a4 <_malloc_r+0x8c>
 80065e8:	f8c8 2000 	str.w	r2, [r8]
 80065ec:	e7ec      	b.n	80065c8 <_malloc_r+0xb0>
 80065ee:	4623      	mov	r3, r4
 80065f0:	6864      	ldr	r4, [r4, #4]
 80065f2:	e7ac      	b.n	800654e <_malloc_r+0x36>
 80065f4:	4634      	mov	r4, r6
 80065f6:	6876      	ldr	r6, [r6, #4]
 80065f8:	e7b4      	b.n	8006564 <_malloc_r+0x4c>
 80065fa:	4613      	mov	r3, r2
 80065fc:	e7cc      	b.n	8006598 <_malloc_r+0x80>
 80065fe:	230c      	movs	r3, #12
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	4638      	mov	r0, r7
 8006604:	f000 f80e 	bl	8006624 <__malloc_unlock>
 8006608:	e797      	b.n	800653a <_malloc_r+0x22>
 800660a:	6025      	str	r5, [r4, #0]
 800660c:	e7dc      	b.n	80065c8 <_malloc_r+0xb0>
 800660e:	605b      	str	r3, [r3, #4]
 8006610:	deff      	udf	#255	; 0xff
 8006612:	bf00      	nop
 8006614:	200005b0 	.word	0x200005b0

08006618 <__malloc_lock>:
 8006618:	4801      	ldr	r0, [pc, #4]	; (8006620 <__malloc_lock+0x8>)
 800661a:	f000 bf04 	b.w	8007426 <__retarget_lock_acquire_recursive>
 800661e:	bf00      	nop
 8006620:	200006f8 	.word	0x200006f8

08006624 <__malloc_unlock>:
 8006624:	4801      	ldr	r0, [pc, #4]	; (800662c <__malloc_unlock+0x8>)
 8006626:	f000 beff 	b.w	8007428 <__retarget_lock_release_recursive>
 800662a:	bf00      	nop
 800662c:	200006f8 	.word	0x200006f8

08006630 <__cvt>:
 8006630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	ec55 4b10 	vmov	r4, r5, d0
 8006638:	2d00      	cmp	r5, #0
 800663a:	460e      	mov	r6, r1
 800663c:	4619      	mov	r1, r3
 800663e:	462b      	mov	r3, r5
 8006640:	bfbb      	ittet	lt
 8006642:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006646:	461d      	movlt	r5, r3
 8006648:	2300      	movge	r3, #0
 800664a:	232d      	movlt	r3, #45	; 0x2d
 800664c:	700b      	strb	r3, [r1, #0]
 800664e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006650:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006654:	4691      	mov	r9, r2
 8006656:	f023 0820 	bic.w	r8, r3, #32
 800665a:	bfbc      	itt	lt
 800665c:	4622      	movlt	r2, r4
 800665e:	4614      	movlt	r4, r2
 8006660:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006664:	d005      	beq.n	8006672 <__cvt+0x42>
 8006666:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800666a:	d100      	bne.n	800666e <__cvt+0x3e>
 800666c:	3601      	adds	r6, #1
 800666e:	2102      	movs	r1, #2
 8006670:	e000      	b.n	8006674 <__cvt+0x44>
 8006672:	2103      	movs	r1, #3
 8006674:	ab03      	add	r3, sp, #12
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	ab02      	add	r3, sp, #8
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	ec45 4b10 	vmov	d0, r4, r5
 8006680:	4653      	mov	r3, sl
 8006682:	4632      	mov	r2, r6
 8006684:	f000 ff68 	bl	8007558 <_dtoa_r>
 8006688:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800668c:	4607      	mov	r7, r0
 800668e:	d102      	bne.n	8006696 <__cvt+0x66>
 8006690:	f019 0f01 	tst.w	r9, #1
 8006694:	d022      	beq.n	80066dc <__cvt+0xac>
 8006696:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800669a:	eb07 0906 	add.w	r9, r7, r6
 800669e:	d110      	bne.n	80066c2 <__cvt+0x92>
 80066a0:	783b      	ldrb	r3, [r7, #0]
 80066a2:	2b30      	cmp	r3, #48	; 0x30
 80066a4:	d10a      	bne.n	80066bc <__cvt+0x8c>
 80066a6:	2200      	movs	r2, #0
 80066a8:	2300      	movs	r3, #0
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	f7fa f9e3 	bl	8000a78 <__aeabi_dcmpeq>
 80066b2:	b918      	cbnz	r0, 80066bc <__cvt+0x8c>
 80066b4:	f1c6 0601 	rsb	r6, r6, #1
 80066b8:	f8ca 6000 	str.w	r6, [sl]
 80066bc:	f8da 3000 	ldr.w	r3, [sl]
 80066c0:	4499      	add	r9, r3
 80066c2:	2200      	movs	r2, #0
 80066c4:	2300      	movs	r3, #0
 80066c6:	4620      	mov	r0, r4
 80066c8:	4629      	mov	r1, r5
 80066ca:	f7fa f9d5 	bl	8000a78 <__aeabi_dcmpeq>
 80066ce:	b108      	cbz	r0, 80066d4 <__cvt+0xa4>
 80066d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80066d4:	2230      	movs	r2, #48	; 0x30
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	454b      	cmp	r3, r9
 80066da:	d307      	bcc.n	80066ec <__cvt+0xbc>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066e0:	1bdb      	subs	r3, r3, r7
 80066e2:	4638      	mov	r0, r7
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	b004      	add	sp, #16
 80066e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ec:	1c59      	adds	r1, r3, #1
 80066ee:	9103      	str	r1, [sp, #12]
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	e7f0      	b.n	80066d6 <__cvt+0xa6>

080066f4 <__exponent>:
 80066f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066f6:	4603      	mov	r3, r0
 80066f8:	2900      	cmp	r1, #0
 80066fa:	bfb8      	it	lt
 80066fc:	4249      	neglt	r1, r1
 80066fe:	f803 2b02 	strb.w	r2, [r3], #2
 8006702:	bfb4      	ite	lt
 8006704:	222d      	movlt	r2, #45	; 0x2d
 8006706:	222b      	movge	r2, #43	; 0x2b
 8006708:	2909      	cmp	r1, #9
 800670a:	7042      	strb	r2, [r0, #1]
 800670c:	dd2a      	ble.n	8006764 <__exponent+0x70>
 800670e:	f10d 0207 	add.w	r2, sp, #7
 8006712:	4617      	mov	r7, r2
 8006714:	260a      	movs	r6, #10
 8006716:	4694      	mov	ip, r2
 8006718:	fb91 f5f6 	sdiv	r5, r1, r6
 800671c:	fb06 1415 	mls	r4, r6, r5, r1
 8006720:	3430      	adds	r4, #48	; 0x30
 8006722:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006726:	460c      	mov	r4, r1
 8006728:	2c63      	cmp	r4, #99	; 0x63
 800672a:	f102 32ff 	add.w	r2, r2, #4294967295
 800672e:	4629      	mov	r1, r5
 8006730:	dcf1      	bgt.n	8006716 <__exponent+0x22>
 8006732:	3130      	adds	r1, #48	; 0x30
 8006734:	f1ac 0402 	sub.w	r4, ip, #2
 8006738:	f802 1c01 	strb.w	r1, [r2, #-1]
 800673c:	1c41      	adds	r1, r0, #1
 800673e:	4622      	mov	r2, r4
 8006740:	42ba      	cmp	r2, r7
 8006742:	d30a      	bcc.n	800675a <__exponent+0x66>
 8006744:	f10d 0209 	add.w	r2, sp, #9
 8006748:	eba2 020c 	sub.w	r2, r2, ip
 800674c:	42bc      	cmp	r4, r7
 800674e:	bf88      	it	hi
 8006750:	2200      	movhi	r2, #0
 8006752:	4413      	add	r3, r2
 8006754:	1a18      	subs	r0, r3, r0
 8006756:	b003      	add	sp, #12
 8006758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800675e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006762:	e7ed      	b.n	8006740 <__exponent+0x4c>
 8006764:	2330      	movs	r3, #48	; 0x30
 8006766:	3130      	adds	r1, #48	; 0x30
 8006768:	7083      	strb	r3, [r0, #2]
 800676a:	70c1      	strb	r1, [r0, #3]
 800676c:	1d03      	adds	r3, r0, #4
 800676e:	e7f1      	b.n	8006754 <__exponent+0x60>

08006770 <_printf_float>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	ed2d 8b02 	vpush	{d8}
 8006778:	b08d      	sub	sp, #52	; 0x34
 800677a:	460c      	mov	r4, r1
 800677c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006780:	4616      	mov	r6, r2
 8006782:	461f      	mov	r7, r3
 8006784:	4605      	mov	r5, r0
 8006786:	f000 fdc9 	bl	800731c <_localeconv_r>
 800678a:	f8d0 a000 	ldr.w	sl, [r0]
 800678e:	4650      	mov	r0, sl
 8006790:	f7f9 fd46 	bl	8000220 <strlen>
 8006794:	2300      	movs	r3, #0
 8006796:	930a      	str	r3, [sp, #40]	; 0x28
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	f8d8 3000 	ldr.w	r3, [r8]
 80067a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80067a4:	3307      	adds	r3, #7
 80067a6:	f023 0307 	bic.w	r3, r3, #7
 80067aa:	f103 0208 	add.w	r2, r3, #8
 80067ae:	f8c8 2000 	str.w	r2, [r8]
 80067b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067ba:	9307      	str	r3, [sp, #28]
 80067bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80067c0:	ee08 0a10 	vmov	s16, r0
 80067c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80067c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067cc:	4b9e      	ldr	r3, [pc, #632]	; (8006a48 <_printf_float+0x2d8>)
 80067ce:	f04f 32ff 	mov.w	r2, #4294967295
 80067d2:	f7fa f983 	bl	8000adc <__aeabi_dcmpun>
 80067d6:	bb88      	cbnz	r0, 800683c <_printf_float+0xcc>
 80067d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067dc:	4b9a      	ldr	r3, [pc, #616]	; (8006a48 <_printf_float+0x2d8>)
 80067de:	f04f 32ff 	mov.w	r2, #4294967295
 80067e2:	f7fa f95d 	bl	8000aa0 <__aeabi_dcmple>
 80067e6:	bb48      	cbnz	r0, 800683c <_printf_float+0xcc>
 80067e8:	2200      	movs	r2, #0
 80067ea:	2300      	movs	r3, #0
 80067ec:	4640      	mov	r0, r8
 80067ee:	4649      	mov	r1, r9
 80067f0:	f7fa f94c 	bl	8000a8c <__aeabi_dcmplt>
 80067f4:	b110      	cbz	r0, 80067fc <_printf_float+0x8c>
 80067f6:	232d      	movs	r3, #45	; 0x2d
 80067f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fc:	4a93      	ldr	r2, [pc, #588]	; (8006a4c <_printf_float+0x2dc>)
 80067fe:	4b94      	ldr	r3, [pc, #592]	; (8006a50 <_printf_float+0x2e0>)
 8006800:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006804:	bf94      	ite	ls
 8006806:	4690      	movls	r8, r2
 8006808:	4698      	movhi	r8, r3
 800680a:	2303      	movs	r3, #3
 800680c:	6123      	str	r3, [r4, #16]
 800680e:	9b05      	ldr	r3, [sp, #20]
 8006810:	f023 0304 	bic.w	r3, r3, #4
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	f04f 0900 	mov.w	r9, #0
 800681a:	9700      	str	r7, [sp, #0]
 800681c:	4633      	mov	r3, r6
 800681e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006820:	4621      	mov	r1, r4
 8006822:	4628      	mov	r0, r5
 8006824:	f000 f9da 	bl	8006bdc <_printf_common>
 8006828:	3001      	adds	r0, #1
 800682a:	f040 8090 	bne.w	800694e <_printf_float+0x1de>
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	b00d      	add	sp, #52	; 0x34
 8006834:	ecbd 8b02 	vpop	{d8}
 8006838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683c:	4642      	mov	r2, r8
 800683e:	464b      	mov	r3, r9
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	f7fa f94a 	bl	8000adc <__aeabi_dcmpun>
 8006848:	b140      	cbz	r0, 800685c <_printf_float+0xec>
 800684a:	464b      	mov	r3, r9
 800684c:	2b00      	cmp	r3, #0
 800684e:	bfbc      	itt	lt
 8006850:	232d      	movlt	r3, #45	; 0x2d
 8006852:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006856:	4a7f      	ldr	r2, [pc, #508]	; (8006a54 <_printf_float+0x2e4>)
 8006858:	4b7f      	ldr	r3, [pc, #508]	; (8006a58 <_printf_float+0x2e8>)
 800685a:	e7d1      	b.n	8006800 <_printf_float+0x90>
 800685c:	6863      	ldr	r3, [r4, #4]
 800685e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006862:	9206      	str	r2, [sp, #24]
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	d13f      	bne.n	80068e8 <_printf_float+0x178>
 8006868:	2306      	movs	r3, #6
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	9b05      	ldr	r3, [sp, #20]
 800686e:	6861      	ldr	r1, [r4, #4]
 8006870:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006874:	2300      	movs	r3, #0
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	ab0a      	add	r3, sp, #40	; 0x28
 800687a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800687e:	ab09      	add	r3, sp, #36	; 0x24
 8006880:	ec49 8b10 	vmov	d0, r8, r9
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	6022      	str	r2, [r4, #0]
 8006888:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800688c:	4628      	mov	r0, r5
 800688e:	f7ff fecf 	bl	8006630 <__cvt>
 8006892:	9b06      	ldr	r3, [sp, #24]
 8006894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006896:	2b47      	cmp	r3, #71	; 0x47
 8006898:	4680      	mov	r8, r0
 800689a:	d108      	bne.n	80068ae <_printf_float+0x13e>
 800689c:	1cc8      	adds	r0, r1, #3
 800689e:	db02      	blt.n	80068a6 <_printf_float+0x136>
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	4299      	cmp	r1, r3
 80068a4:	dd41      	ble.n	800692a <_printf_float+0x1ba>
 80068a6:	f1ab 0302 	sub.w	r3, fp, #2
 80068aa:	fa5f fb83 	uxtb.w	fp, r3
 80068ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068b2:	d820      	bhi.n	80068f6 <_printf_float+0x186>
 80068b4:	3901      	subs	r1, #1
 80068b6:	465a      	mov	r2, fp
 80068b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068bc:	9109      	str	r1, [sp, #36]	; 0x24
 80068be:	f7ff ff19 	bl	80066f4 <__exponent>
 80068c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c4:	1813      	adds	r3, r2, r0
 80068c6:	2a01      	cmp	r2, #1
 80068c8:	4681      	mov	r9, r0
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	dc02      	bgt.n	80068d4 <_printf_float+0x164>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	07d2      	lsls	r2, r2, #31
 80068d2:	d501      	bpl.n	80068d8 <_printf_float+0x168>
 80068d4:	3301      	adds	r3, #1
 80068d6:	6123      	str	r3, [r4, #16]
 80068d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d09c      	beq.n	800681a <_printf_float+0xaa>
 80068e0:	232d      	movs	r3, #45	; 0x2d
 80068e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e6:	e798      	b.n	800681a <_printf_float+0xaa>
 80068e8:	9a06      	ldr	r2, [sp, #24]
 80068ea:	2a47      	cmp	r2, #71	; 0x47
 80068ec:	d1be      	bne.n	800686c <_printf_float+0xfc>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1bc      	bne.n	800686c <_printf_float+0xfc>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e7b9      	b.n	800686a <_printf_float+0xfa>
 80068f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068fa:	d118      	bne.n	800692e <_printf_float+0x1be>
 80068fc:	2900      	cmp	r1, #0
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	dd0b      	ble.n	800691a <_printf_float+0x1aa>
 8006902:	6121      	str	r1, [r4, #16]
 8006904:	b913      	cbnz	r3, 800690c <_printf_float+0x19c>
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	07d0      	lsls	r0, r2, #31
 800690a:	d502      	bpl.n	8006912 <_printf_float+0x1a2>
 800690c:	3301      	adds	r3, #1
 800690e:	440b      	add	r3, r1
 8006910:	6123      	str	r3, [r4, #16]
 8006912:	65a1      	str	r1, [r4, #88]	; 0x58
 8006914:	f04f 0900 	mov.w	r9, #0
 8006918:	e7de      	b.n	80068d8 <_printf_float+0x168>
 800691a:	b913      	cbnz	r3, 8006922 <_printf_float+0x1b2>
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	07d2      	lsls	r2, r2, #31
 8006920:	d501      	bpl.n	8006926 <_printf_float+0x1b6>
 8006922:	3302      	adds	r3, #2
 8006924:	e7f4      	b.n	8006910 <_printf_float+0x1a0>
 8006926:	2301      	movs	r3, #1
 8006928:	e7f2      	b.n	8006910 <_printf_float+0x1a0>
 800692a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800692e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006930:	4299      	cmp	r1, r3
 8006932:	db05      	blt.n	8006940 <_printf_float+0x1d0>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	6121      	str	r1, [r4, #16]
 8006938:	07d8      	lsls	r0, r3, #31
 800693a:	d5ea      	bpl.n	8006912 <_printf_float+0x1a2>
 800693c:	1c4b      	adds	r3, r1, #1
 800693e:	e7e7      	b.n	8006910 <_printf_float+0x1a0>
 8006940:	2900      	cmp	r1, #0
 8006942:	bfd4      	ite	le
 8006944:	f1c1 0202 	rsble	r2, r1, #2
 8006948:	2201      	movgt	r2, #1
 800694a:	4413      	add	r3, r2
 800694c:	e7e0      	b.n	8006910 <_printf_float+0x1a0>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	055a      	lsls	r2, r3, #21
 8006952:	d407      	bmi.n	8006964 <_printf_float+0x1f4>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	4642      	mov	r2, r8
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	d12c      	bne.n	80069bc <_printf_float+0x24c>
 8006962:	e764      	b.n	800682e <_printf_float+0xbe>
 8006964:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006968:	f240 80e0 	bls.w	8006b2c <_printf_float+0x3bc>
 800696c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006970:	2200      	movs	r2, #0
 8006972:	2300      	movs	r3, #0
 8006974:	f7fa f880 	bl	8000a78 <__aeabi_dcmpeq>
 8006978:	2800      	cmp	r0, #0
 800697a:	d034      	beq.n	80069e6 <_printf_float+0x276>
 800697c:	4a37      	ldr	r2, [pc, #220]	; (8006a5c <_printf_float+0x2ec>)
 800697e:	2301      	movs	r3, #1
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	f43f af51 	beq.w	800682e <_printf_float+0xbe>
 800698c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006990:	429a      	cmp	r2, r3
 8006992:	db02      	blt.n	800699a <_printf_float+0x22a>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	07d8      	lsls	r0, r3, #31
 8006998:	d510      	bpl.n	80069bc <_printf_float+0x24c>
 800699a:	ee18 3a10 	vmov	r3, s16
 800699e:	4652      	mov	r2, sl
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f af41 	beq.w	800682e <_printf_float+0xbe>
 80069ac:	f04f 0800 	mov.w	r8, #0
 80069b0:	f104 091a 	add.w	r9, r4, #26
 80069b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4543      	cmp	r3, r8
 80069ba:	dc09      	bgt.n	80069d0 <_printf_float+0x260>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	079b      	lsls	r3, r3, #30
 80069c0:	f100 8107 	bmi.w	8006bd2 <_printf_float+0x462>
 80069c4:	68e0      	ldr	r0, [r4, #12]
 80069c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c8:	4298      	cmp	r0, r3
 80069ca:	bfb8      	it	lt
 80069cc:	4618      	movlt	r0, r3
 80069ce:	e730      	b.n	8006832 <_printf_float+0xc2>
 80069d0:	2301      	movs	r3, #1
 80069d2:	464a      	mov	r2, r9
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af27 	beq.w	800682e <_printf_float+0xbe>
 80069e0:	f108 0801 	add.w	r8, r8, #1
 80069e4:	e7e6      	b.n	80069b4 <_printf_float+0x244>
 80069e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dc39      	bgt.n	8006a60 <_printf_float+0x2f0>
 80069ec:	4a1b      	ldr	r2, [pc, #108]	; (8006a5c <_printf_float+0x2ec>)
 80069ee:	2301      	movs	r3, #1
 80069f0:	4631      	mov	r1, r6
 80069f2:	4628      	mov	r0, r5
 80069f4:	47b8      	blx	r7
 80069f6:	3001      	adds	r0, #1
 80069f8:	f43f af19 	beq.w	800682e <_printf_float+0xbe>
 80069fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a00:	4313      	orrs	r3, r2
 8006a02:	d102      	bne.n	8006a0a <_printf_float+0x29a>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	07d9      	lsls	r1, r3, #31
 8006a08:	d5d8      	bpl.n	80069bc <_printf_float+0x24c>
 8006a0a:	ee18 3a10 	vmov	r3, s16
 8006a0e:	4652      	mov	r2, sl
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b8      	blx	r7
 8006a16:	3001      	adds	r0, #1
 8006a18:	f43f af09 	beq.w	800682e <_printf_float+0xbe>
 8006a1c:	f04f 0900 	mov.w	r9, #0
 8006a20:	f104 0a1a 	add.w	sl, r4, #26
 8006a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a26:	425b      	negs	r3, r3
 8006a28:	454b      	cmp	r3, r9
 8006a2a:	dc01      	bgt.n	8006a30 <_printf_float+0x2c0>
 8006a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2e:	e792      	b.n	8006956 <_printf_float+0x1e6>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4652      	mov	r2, sl
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f aef7 	beq.w	800682e <_printf_float+0xbe>
 8006a40:	f109 0901 	add.w	r9, r9, #1
 8006a44:	e7ee      	b.n	8006a24 <_printf_float+0x2b4>
 8006a46:	bf00      	nop
 8006a48:	7fefffff 	.word	0x7fefffff
 8006a4c:	08009270 	.word	0x08009270
 8006a50:	08009274 	.word	0x08009274
 8006a54:	08009278 	.word	0x08009278
 8006a58:	0800927c 	.word	0x0800927c
 8006a5c:	08009280 	.word	0x08009280
 8006a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a64:	429a      	cmp	r2, r3
 8006a66:	bfa8      	it	ge
 8006a68:	461a      	movge	r2, r3
 8006a6a:	2a00      	cmp	r2, #0
 8006a6c:	4691      	mov	r9, r2
 8006a6e:	dc37      	bgt.n	8006ae0 <_printf_float+0x370>
 8006a70:	f04f 0b00 	mov.w	fp, #0
 8006a74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a78:	f104 021a 	add.w	r2, r4, #26
 8006a7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a7e:	9305      	str	r3, [sp, #20]
 8006a80:	eba3 0309 	sub.w	r3, r3, r9
 8006a84:	455b      	cmp	r3, fp
 8006a86:	dc33      	bgt.n	8006af0 <_printf_float+0x380>
 8006a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	db3b      	blt.n	8006b08 <_printf_float+0x398>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	07da      	lsls	r2, r3, #31
 8006a94:	d438      	bmi.n	8006b08 <_printf_float+0x398>
 8006a96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a9a:	eba2 0903 	sub.w	r9, r2, r3
 8006a9e:	9b05      	ldr	r3, [sp, #20]
 8006aa0:	1ad2      	subs	r2, r2, r3
 8006aa2:	4591      	cmp	r9, r2
 8006aa4:	bfa8      	it	ge
 8006aa6:	4691      	movge	r9, r2
 8006aa8:	f1b9 0f00 	cmp.w	r9, #0
 8006aac:	dc35      	bgt.n	8006b1a <_printf_float+0x3aa>
 8006aae:	f04f 0800 	mov.w	r8, #0
 8006ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ab6:	f104 0a1a 	add.w	sl, r4, #26
 8006aba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	eba3 0309 	sub.w	r3, r3, r9
 8006ac4:	4543      	cmp	r3, r8
 8006ac6:	f77f af79 	ble.w	80069bc <_printf_float+0x24c>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4652      	mov	r2, sl
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	f43f aeaa 	beq.w	800682e <_printf_float+0xbe>
 8006ada:	f108 0801 	add.w	r8, r8, #1
 8006ade:	e7ec      	b.n	8006aba <_printf_float+0x34a>
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	d1c0      	bne.n	8006a70 <_printf_float+0x300>
 8006aee:	e69e      	b.n	800682e <_printf_float+0xbe>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4631      	mov	r1, r6
 8006af4:	4628      	mov	r0, r5
 8006af6:	9205      	str	r2, [sp, #20]
 8006af8:	47b8      	blx	r7
 8006afa:	3001      	adds	r0, #1
 8006afc:	f43f ae97 	beq.w	800682e <_printf_float+0xbe>
 8006b00:	9a05      	ldr	r2, [sp, #20]
 8006b02:	f10b 0b01 	add.w	fp, fp, #1
 8006b06:	e7b9      	b.n	8006a7c <_printf_float+0x30c>
 8006b08:	ee18 3a10 	vmov	r3, s16
 8006b0c:	4652      	mov	r2, sl
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	d1be      	bne.n	8006a96 <_printf_float+0x326>
 8006b18:	e689      	b.n	800682e <_printf_float+0xbe>
 8006b1a:	9a05      	ldr	r2, [sp, #20]
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	4442      	add	r2, r8
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	d1c1      	bne.n	8006aae <_printf_float+0x33e>
 8006b2a:	e680      	b.n	800682e <_printf_float+0xbe>
 8006b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b2e:	2a01      	cmp	r2, #1
 8006b30:	dc01      	bgt.n	8006b36 <_printf_float+0x3c6>
 8006b32:	07db      	lsls	r3, r3, #31
 8006b34:	d53a      	bpl.n	8006bac <_printf_float+0x43c>
 8006b36:	2301      	movs	r3, #1
 8006b38:	4642      	mov	r2, r8
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	f43f ae74 	beq.w	800682e <_printf_float+0xbe>
 8006b46:	ee18 3a10 	vmov	r3, s16
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b8      	blx	r7
 8006b52:	3001      	adds	r0, #1
 8006b54:	f43f ae6b 	beq.w	800682e <_printf_float+0xbe>
 8006b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006b64:	f7f9 ff88 	bl	8000a78 <__aeabi_dcmpeq>
 8006b68:	b9d8      	cbnz	r0, 8006ba2 <_printf_float+0x432>
 8006b6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006b6e:	f108 0201 	add.w	r2, r8, #1
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d10e      	bne.n	8006b9a <_printf_float+0x42a>
 8006b7c:	e657      	b.n	800682e <_printf_float+0xbe>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4652      	mov	r2, sl
 8006b82:	4631      	mov	r1, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b8      	blx	r7
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f43f ae50 	beq.w	800682e <_printf_float+0xbe>
 8006b8e:	f108 0801 	add.w	r8, r8, #1
 8006b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b94:	3b01      	subs	r3, #1
 8006b96:	4543      	cmp	r3, r8
 8006b98:	dcf1      	bgt.n	8006b7e <_printf_float+0x40e>
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ba0:	e6da      	b.n	8006958 <_printf_float+0x1e8>
 8006ba2:	f04f 0800 	mov.w	r8, #0
 8006ba6:	f104 0a1a 	add.w	sl, r4, #26
 8006baa:	e7f2      	b.n	8006b92 <_printf_float+0x422>
 8006bac:	2301      	movs	r3, #1
 8006bae:	4642      	mov	r2, r8
 8006bb0:	e7df      	b.n	8006b72 <_printf_float+0x402>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	464a      	mov	r2, r9
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f43f ae36 	beq.w	800682e <_printf_float+0xbe>
 8006bc2:	f108 0801 	add.w	r8, r8, #1
 8006bc6:	68e3      	ldr	r3, [r4, #12]
 8006bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bca:	1a5b      	subs	r3, r3, r1
 8006bcc:	4543      	cmp	r3, r8
 8006bce:	dcf0      	bgt.n	8006bb2 <_printf_float+0x442>
 8006bd0:	e6f8      	b.n	80069c4 <_printf_float+0x254>
 8006bd2:	f04f 0800 	mov.w	r8, #0
 8006bd6:	f104 0919 	add.w	r9, r4, #25
 8006bda:	e7f4      	b.n	8006bc6 <_printf_float+0x456>

08006bdc <_printf_common>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	4616      	mov	r6, r2
 8006be2:	4699      	mov	r9, r3
 8006be4:	688a      	ldr	r2, [r1, #8]
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	bfb8      	it	lt
 8006bf0:	4613      	movlt	r3, r2
 8006bf2:	6033      	str	r3, [r6, #0]
 8006bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b10a      	cbz	r2, 8006c02 <_printf_common+0x26>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	0699      	lsls	r1, r3, #26
 8006c06:	bf42      	ittt	mi
 8006c08:	6833      	ldrmi	r3, [r6, #0]
 8006c0a:	3302      	addmi	r3, #2
 8006c0c:	6033      	strmi	r3, [r6, #0]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	f015 0506 	ands.w	r5, r5, #6
 8006c14:	d106      	bne.n	8006c24 <_printf_common+0x48>
 8006c16:	f104 0a19 	add.w	sl, r4, #25
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	6832      	ldr	r2, [r6, #0]
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dc26      	bgt.n	8006c72 <_printf_common+0x96>
 8006c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c28:	1e13      	subs	r3, r2, #0
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	bf18      	it	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	0692      	lsls	r2, r2, #26
 8006c32:	d42b      	bmi.n	8006c8c <_printf_common+0xb0>
 8006c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	47c0      	blx	r8
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d01e      	beq.n	8006c80 <_printf_common+0xa4>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	6922      	ldr	r2, [r4, #16]
 8006c46:	f003 0306 	and.w	r3, r3, #6
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	bf02      	ittt	eq
 8006c4e:	68e5      	ldreq	r5, [r4, #12]
 8006c50:	6833      	ldreq	r3, [r6, #0]
 8006c52:	1aed      	subeq	r5, r5, r3
 8006c54:	68a3      	ldr	r3, [r4, #8]
 8006c56:	bf0c      	ite	eq
 8006c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c5c:	2500      	movne	r5, #0
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	bfc4      	itt	gt
 8006c62:	1a9b      	subgt	r3, r3, r2
 8006c64:	18ed      	addgt	r5, r5, r3
 8006c66:	2600      	movs	r6, #0
 8006c68:	341a      	adds	r4, #26
 8006c6a:	42b5      	cmp	r5, r6
 8006c6c:	d11a      	bne.n	8006ca4 <_printf_common+0xc8>
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e008      	b.n	8006c84 <_printf_common+0xa8>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4652      	mov	r2, sl
 8006c76:	4649      	mov	r1, r9
 8006c78:	4638      	mov	r0, r7
 8006c7a:	47c0      	blx	r8
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d103      	bne.n	8006c88 <_printf_common+0xac>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c88:	3501      	adds	r5, #1
 8006c8a:	e7c6      	b.n	8006c1a <_printf_common+0x3e>
 8006c8c:	18e1      	adds	r1, r4, r3
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	2030      	movs	r0, #48	; 0x30
 8006c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c96:	4422      	add	r2, r4
 8006c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	e7c7      	b.n	8006c34 <_printf_common+0x58>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4622      	mov	r2, r4
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4638      	mov	r0, r7
 8006cac:	47c0      	blx	r8
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d0e6      	beq.n	8006c80 <_printf_common+0xa4>
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	e7d9      	b.n	8006c6a <_printf_common+0x8e>
	...

08006cb8 <_printf_i>:
 8006cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	7e0f      	ldrb	r7, [r1, #24]
 8006cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cc0:	2f78      	cmp	r7, #120	; 0x78
 8006cc2:	4691      	mov	r9, r2
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	469a      	mov	sl, r3
 8006cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cce:	d807      	bhi.n	8006ce0 <_printf_i+0x28>
 8006cd0:	2f62      	cmp	r7, #98	; 0x62
 8006cd2:	d80a      	bhi.n	8006cea <_printf_i+0x32>
 8006cd4:	2f00      	cmp	r7, #0
 8006cd6:	f000 80d4 	beq.w	8006e82 <_printf_i+0x1ca>
 8006cda:	2f58      	cmp	r7, #88	; 0x58
 8006cdc:	f000 80c0 	beq.w	8006e60 <_printf_i+0x1a8>
 8006ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ce8:	e03a      	b.n	8006d60 <_printf_i+0xa8>
 8006cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cee:	2b15      	cmp	r3, #21
 8006cf0:	d8f6      	bhi.n	8006ce0 <_printf_i+0x28>
 8006cf2:	a101      	add	r1, pc, #4	; (adr r1, 8006cf8 <_printf_i+0x40>)
 8006cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cf8:	08006d51 	.word	0x08006d51
 8006cfc:	08006d65 	.word	0x08006d65
 8006d00:	08006ce1 	.word	0x08006ce1
 8006d04:	08006ce1 	.word	0x08006ce1
 8006d08:	08006ce1 	.word	0x08006ce1
 8006d0c:	08006ce1 	.word	0x08006ce1
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006ce1 	.word	0x08006ce1
 8006d18:	08006ce1 	.word	0x08006ce1
 8006d1c:	08006ce1 	.word	0x08006ce1
 8006d20:	08006ce1 	.word	0x08006ce1
 8006d24:	08006e69 	.word	0x08006e69
 8006d28:	08006d91 	.word	0x08006d91
 8006d2c:	08006e23 	.word	0x08006e23
 8006d30:	08006ce1 	.word	0x08006ce1
 8006d34:	08006ce1 	.word	0x08006ce1
 8006d38:	08006e8b 	.word	0x08006e8b
 8006d3c:	08006ce1 	.word	0x08006ce1
 8006d40:	08006d91 	.word	0x08006d91
 8006d44:	08006ce1 	.word	0x08006ce1
 8006d48:	08006ce1 	.word	0x08006ce1
 8006d4c:	08006e2b 	.word	0x08006e2b
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	1d1a      	adds	r2, r3, #4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	602a      	str	r2, [r5, #0]
 8006d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d60:	2301      	movs	r3, #1
 8006d62:	e09f      	b.n	8006ea4 <_printf_i+0x1ec>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	682b      	ldr	r3, [r5, #0]
 8006d68:	0607      	lsls	r7, r0, #24
 8006d6a:	f103 0104 	add.w	r1, r3, #4
 8006d6e:	6029      	str	r1, [r5, #0]
 8006d70:	d501      	bpl.n	8006d76 <_printf_i+0xbe>
 8006d72:	681e      	ldr	r6, [r3, #0]
 8006d74:	e003      	b.n	8006d7e <_printf_i+0xc6>
 8006d76:	0646      	lsls	r6, r0, #25
 8006d78:	d5fb      	bpl.n	8006d72 <_printf_i+0xba>
 8006d7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d7e:	2e00      	cmp	r6, #0
 8006d80:	da03      	bge.n	8006d8a <_printf_i+0xd2>
 8006d82:	232d      	movs	r3, #45	; 0x2d
 8006d84:	4276      	negs	r6, r6
 8006d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d8a:	485a      	ldr	r0, [pc, #360]	; (8006ef4 <_printf_i+0x23c>)
 8006d8c:	230a      	movs	r3, #10
 8006d8e:	e012      	b.n	8006db6 <_printf_i+0xfe>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	6820      	ldr	r0, [r4, #0]
 8006d94:	1d19      	adds	r1, r3, #4
 8006d96:	6029      	str	r1, [r5, #0]
 8006d98:	0605      	lsls	r5, r0, #24
 8006d9a:	d501      	bpl.n	8006da0 <_printf_i+0xe8>
 8006d9c:	681e      	ldr	r6, [r3, #0]
 8006d9e:	e002      	b.n	8006da6 <_printf_i+0xee>
 8006da0:	0641      	lsls	r1, r0, #25
 8006da2:	d5fb      	bpl.n	8006d9c <_printf_i+0xe4>
 8006da4:	881e      	ldrh	r6, [r3, #0]
 8006da6:	4853      	ldr	r0, [pc, #332]	; (8006ef4 <_printf_i+0x23c>)
 8006da8:	2f6f      	cmp	r7, #111	; 0x6f
 8006daa:	bf0c      	ite	eq
 8006dac:	2308      	moveq	r3, #8
 8006dae:	230a      	movne	r3, #10
 8006db0:	2100      	movs	r1, #0
 8006db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006db6:	6865      	ldr	r5, [r4, #4]
 8006db8:	60a5      	str	r5, [r4, #8]
 8006dba:	2d00      	cmp	r5, #0
 8006dbc:	bfa2      	ittt	ge
 8006dbe:	6821      	ldrge	r1, [r4, #0]
 8006dc0:	f021 0104 	bicge.w	r1, r1, #4
 8006dc4:	6021      	strge	r1, [r4, #0]
 8006dc6:	b90e      	cbnz	r6, 8006dcc <_printf_i+0x114>
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	d04b      	beq.n	8006e64 <_printf_i+0x1ac>
 8006dcc:	4615      	mov	r5, r2
 8006dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8006dd6:	5dc7      	ldrb	r7, [r0, r7]
 8006dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ddc:	4637      	mov	r7, r6
 8006dde:	42bb      	cmp	r3, r7
 8006de0:	460e      	mov	r6, r1
 8006de2:	d9f4      	bls.n	8006dce <_printf_i+0x116>
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d10b      	bne.n	8006e00 <_printf_i+0x148>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	07de      	lsls	r6, r3, #31
 8006dec:	d508      	bpl.n	8006e00 <_printf_i+0x148>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	6861      	ldr	r1, [r4, #4]
 8006df2:	4299      	cmp	r1, r3
 8006df4:	bfde      	ittt	le
 8006df6:	2330      	movle	r3, #48	; 0x30
 8006df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e00:	1b52      	subs	r2, r2, r5
 8006e02:	6122      	str	r2, [r4, #16]
 8006e04:	f8cd a000 	str.w	sl, [sp]
 8006e08:	464b      	mov	r3, r9
 8006e0a:	aa03      	add	r2, sp, #12
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f7ff fee4 	bl	8006bdc <_printf_common>
 8006e14:	3001      	adds	r0, #1
 8006e16:	d14a      	bne.n	8006eae <_printf_i+0x1f6>
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	b004      	add	sp, #16
 8006e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	f043 0320 	orr.w	r3, r3, #32
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	4833      	ldr	r0, [pc, #204]	; (8006ef8 <_printf_i+0x240>)
 8006e2c:	2778      	movs	r7, #120	; 0x78
 8006e2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	6829      	ldr	r1, [r5, #0]
 8006e36:	061f      	lsls	r7, r3, #24
 8006e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e3c:	d402      	bmi.n	8006e44 <_printf_i+0x18c>
 8006e3e:	065f      	lsls	r7, r3, #25
 8006e40:	bf48      	it	mi
 8006e42:	b2b6      	uxthmi	r6, r6
 8006e44:	07df      	lsls	r7, r3, #31
 8006e46:	bf48      	it	mi
 8006e48:	f043 0320 	orrmi.w	r3, r3, #32
 8006e4c:	6029      	str	r1, [r5, #0]
 8006e4e:	bf48      	it	mi
 8006e50:	6023      	strmi	r3, [r4, #0]
 8006e52:	b91e      	cbnz	r6, 8006e5c <_printf_i+0x1a4>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	f023 0320 	bic.w	r3, r3, #32
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	e7a7      	b.n	8006db0 <_printf_i+0xf8>
 8006e60:	4824      	ldr	r0, [pc, #144]	; (8006ef4 <_printf_i+0x23c>)
 8006e62:	e7e4      	b.n	8006e2e <_printf_i+0x176>
 8006e64:	4615      	mov	r5, r2
 8006e66:	e7bd      	b.n	8006de4 <_printf_i+0x12c>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	6826      	ldr	r6, [r4, #0]
 8006e6c:	6961      	ldr	r1, [r4, #20]
 8006e6e:	1d18      	adds	r0, r3, #4
 8006e70:	6028      	str	r0, [r5, #0]
 8006e72:	0635      	lsls	r5, r6, #24
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0x1c4>
 8006e78:	6019      	str	r1, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0x1ca>
 8006e7c:	0670      	lsls	r0, r6, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0x1c0>
 8006e80:	8019      	strh	r1, [r3, #0]
 8006e82:	2300      	movs	r3, #0
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	4615      	mov	r5, r2
 8006e88:	e7bc      	b.n	8006e04 <_printf_i+0x14c>
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	1d1a      	adds	r2, r3, #4
 8006e8e:	602a      	str	r2, [r5, #0]
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	6862      	ldr	r2, [r4, #4]
 8006e94:	2100      	movs	r1, #0
 8006e96:	4628      	mov	r0, r5
 8006e98:	f7f9 f972 	bl	8000180 <memchr>
 8006e9c:	b108      	cbz	r0, 8006ea2 <_printf_i+0x1ea>
 8006e9e:	1b40      	subs	r0, r0, r5
 8006ea0:	6060      	str	r0, [r4, #4]
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eac:	e7aa      	b.n	8006e04 <_printf_i+0x14c>
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	47d0      	blx	sl
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d0ad      	beq.n	8006e18 <_printf_i+0x160>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	079b      	lsls	r3, r3, #30
 8006ec0:	d413      	bmi.n	8006eea <_printf_i+0x232>
 8006ec2:	68e0      	ldr	r0, [r4, #12]
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	4298      	cmp	r0, r3
 8006ec8:	bfb8      	it	lt
 8006eca:	4618      	movlt	r0, r3
 8006ecc:	e7a6      	b.n	8006e1c <_printf_i+0x164>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	47d0      	blx	sl
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d09d      	beq.n	8006e18 <_printf_i+0x160>
 8006edc:	3501      	adds	r5, #1
 8006ede:	68e3      	ldr	r3, [r4, #12]
 8006ee0:	9903      	ldr	r1, [sp, #12]
 8006ee2:	1a5b      	subs	r3, r3, r1
 8006ee4:	42ab      	cmp	r3, r5
 8006ee6:	dcf2      	bgt.n	8006ece <_printf_i+0x216>
 8006ee8:	e7eb      	b.n	8006ec2 <_printf_i+0x20a>
 8006eea:	2500      	movs	r5, #0
 8006eec:	f104 0619 	add.w	r6, r4, #25
 8006ef0:	e7f5      	b.n	8006ede <_printf_i+0x226>
 8006ef2:	bf00      	nop
 8006ef4:	08009282 	.word	0x08009282
 8006ef8:	08009293 	.word	0x08009293

08006efc <std>:
 8006efc:	2300      	movs	r3, #0
 8006efe:	b510      	push	{r4, lr}
 8006f00:	4604      	mov	r4, r0
 8006f02:	e9c0 3300 	strd	r3, r3, [r0]
 8006f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f0a:	6083      	str	r3, [r0, #8]
 8006f0c:	8181      	strh	r1, [r0, #12]
 8006f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f10:	81c2      	strh	r2, [r0, #14]
 8006f12:	6183      	str	r3, [r0, #24]
 8006f14:	4619      	mov	r1, r3
 8006f16:	2208      	movs	r2, #8
 8006f18:	305c      	adds	r0, #92	; 0x5c
 8006f1a:	f000 f9f7 	bl	800730c <memset>
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <std+0x58>)
 8006f20:	6263      	str	r3, [r4, #36]	; 0x24
 8006f22:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <std+0x5c>)
 8006f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f26:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <std+0x60>)
 8006f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	; (8006f60 <std+0x64>)
 8006f2c:	6323      	str	r3, [r4, #48]	; 0x30
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <std+0x68>)
 8006f30:	6224      	str	r4, [r4, #32]
 8006f32:	429c      	cmp	r4, r3
 8006f34:	d006      	beq.n	8006f44 <std+0x48>
 8006f36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f3a:	4294      	cmp	r4, r2
 8006f3c:	d002      	beq.n	8006f44 <std+0x48>
 8006f3e:	33d0      	adds	r3, #208	; 0xd0
 8006f40:	429c      	cmp	r4, r3
 8006f42:	d105      	bne.n	8006f50 <std+0x54>
 8006f44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4c:	f000 ba6a 	b.w	8007424 <__retarget_lock_init_recursive>
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop
 8006f54:	0800715d 	.word	0x0800715d
 8006f58:	0800717f 	.word	0x0800717f
 8006f5c:	080071b7 	.word	0x080071b7
 8006f60:	080071db 	.word	0x080071db
 8006f64:	200005b8 	.word	0x200005b8

08006f68 <stdio_exit_handler>:
 8006f68:	4a02      	ldr	r2, [pc, #8]	; (8006f74 <stdio_exit_handler+0xc>)
 8006f6a:	4903      	ldr	r1, [pc, #12]	; (8006f78 <stdio_exit_handler+0x10>)
 8006f6c:	4803      	ldr	r0, [pc, #12]	; (8006f7c <stdio_exit_handler+0x14>)
 8006f6e:	f000 b869 	b.w	8007044 <_fwalk_sglue>
 8006f72:	bf00      	nop
 8006f74:	20000014 	.word	0x20000014
 8006f78:	08008c61 	.word	0x08008c61
 8006f7c:	20000020 	.word	0x20000020

08006f80 <cleanup_stdio>:
 8006f80:	6841      	ldr	r1, [r0, #4]
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <cleanup_stdio+0x34>)
 8006f84:	4299      	cmp	r1, r3
 8006f86:	b510      	push	{r4, lr}
 8006f88:	4604      	mov	r4, r0
 8006f8a:	d001      	beq.n	8006f90 <cleanup_stdio+0x10>
 8006f8c:	f001 fe68 	bl	8008c60 <_fflush_r>
 8006f90:	68a1      	ldr	r1, [r4, #8]
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <cleanup_stdio+0x38>)
 8006f94:	4299      	cmp	r1, r3
 8006f96:	d002      	beq.n	8006f9e <cleanup_stdio+0x1e>
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f001 fe61 	bl	8008c60 <_fflush_r>
 8006f9e:	68e1      	ldr	r1, [r4, #12]
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <cleanup_stdio+0x3c>)
 8006fa2:	4299      	cmp	r1, r3
 8006fa4:	d004      	beq.n	8006fb0 <cleanup_stdio+0x30>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f001 be58 	b.w	8008c60 <_fflush_r>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200005b8 	.word	0x200005b8
 8006fb8:	20000620 	.word	0x20000620
 8006fbc:	20000688 	.word	0x20000688

08006fc0 <global_stdio_init.part.0>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <global_stdio_init.part.0+0x30>)
 8006fc4:	4c0b      	ldr	r4, [pc, #44]	; (8006ff4 <global_stdio_init.part.0+0x34>)
 8006fc6:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <global_stdio_init.part.0+0x38>)
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	4620      	mov	r0, r4
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2104      	movs	r1, #4
 8006fd0:	f7ff ff94 	bl	8006efc <std>
 8006fd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006fd8:	2201      	movs	r2, #1
 8006fda:	2109      	movs	r1, #9
 8006fdc:	f7ff ff8e 	bl	8006efc <std>
 8006fe0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fea:	2112      	movs	r1, #18
 8006fec:	f7ff bf86 	b.w	8006efc <std>
 8006ff0:	200006f0 	.word	0x200006f0
 8006ff4:	200005b8 	.word	0x200005b8
 8006ff8:	08006f69 	.word	0x08006f69

08006ffc <__sfp_lock_acquire>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__sfp_lock_acquire+0x8>)
 8006ffe:	f000 ba12 	b.w	8007426 <__retarget_lock_acquire_recursive>
 8007002:	bf00      	nop
 8007004:	200006f9 	.word	0x200006f9

08007008 <__sfp_lock_release>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sfp_lock_release+0x8>)
 800700a:	f000 ba0d 	b.w	8007428 <__retarget_lock_release_recursive>
 800700e:	bf00      	nop
 8007010:	200006f9 	.word	0x200006f9

08007014 <__sinit>:
 8007014:	b510      	push	{r4, lr}
 8007016:	4604      	mov	r4, r0
 8007018:	f7ff fff0 	bl	8006ffc <__sfp_lock_acquire>
 800701c:	6a23      	ldr	r3, [r4, #32]
 800701e:	b11b      	cbz	r3, 8007028 <__sinit+0x14>
 8007020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007024:	f7ff bff0 	b.w	8007008 <__sfp_lock_release>
 8007028:	4b04      	ldr	r3, [pc, #16]	; (800703c <__sinit+0x28>)
 800702a:	6223      	str	r3, [r4, #32]
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <__sinit+0x2c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f5      	bne.n	8007020 <__sinit+0xc>
 8007034:	f7ff ffc4 	bl	8006fc0 <global_stdio_init.part.0>
 8007038:	e7f2      	b.n	8007020 <__sinit+0xc>
 800703a:	bf00      	nop
 800703c:	08006f81 	.word	0x08006f81
 8007040:	200006f0 	.word	0x200006f0

08007044 <_fwalk_sglue>:
 8007044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007048:	4607      	mov	r7, r0
 800704a:	4688      	mov	r8, r1
 800704c:	4614      	mov	r4, r2
 800704e:	2600      	movs	r6, #0
 8007050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007054:	f1b9 0901 	subs.w	r9, r9, #1
 8007058:	d505      	bpl.n	8007066 <_fwalk_sglue+0x22>
 800705a:	6824      	ldr	r4, [r4, #0]
 800705c:	2c00      	cmp	r4, #0
 800705e:	d1f7      	bne.n	8007050 <_fwalk_sglue+0xc>
 8007060:	4630      	mov	r0, r6
 8007062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d907      	bls.n	800707c <_fwalk_sglue+0x38>
 800706c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007070:	3301      	adds	r3, #1
 8007072:	d003      	beq.n	800707c <_fwalk_sglue+0x38>
 8007074:	4629      	mov	r1, r5
 8007076:	4638      	mov	r0, r7
 8007078:	47c0      	blx	r8
 800707a:	4306      	orrs	r6, r0
 800707c:	3568      	adds	r5, #104	; 0x68
 800707e:	e7e9      	b.n	8007054 <_fwalk_sglue+0x10>

08007080 <iprintf>:
 8007080:	b40f      	push	{r0, r1, r2, r3}
 8007082:	b507      	push	{r0, r1, r2, lr}
 8007084:	4906      	ldr	r1, [pc, #24]	; (80070a0 <iprintf+0x20>)
 8007086:	ab04      	add	r3, sp, #16
 8007088:	6808      	ldr	r0, [r1, #0]
 800708a:	f853 2b04 	ldr.w	r2, [r3], #4
 800708e:	6881      	ldr	r1, [r0, #8]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	f001 fc45 	bl	8008920 <_vfiprintf_r>
 8007096:	b003      	add	sp, #12
 8007098:	f85d eb04 	ldr.w	lr, [sp], #4
 800709c:	b004      	add	sp, #16
 800709e:	4770      	bx	lr
 80070a0:	2000006c 	.word	0x2000006c

080070a4 <_puts_r>:
 80070a4:	6a03      	ldr	r3, [r0, #32]
 80070a6:	b570      	push	{r4, r5, r6, lr}
 80070a8:	6884      	ldr	r4, [r0, #8]
 80070aa:	4605      	mov	r5, r0
 80070ac:	460e      	mov	r6, r1
 80070ae:	b90b      	cbnz	r3, 80070b4 <_puts_r+0x10>
 80070b0:	f7ff ffb0 	bl	8007014 <__sinit>
 80070b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070b6:	07db      	lsls	r3, r3, #31
 80070b8:	d405      	bmi.n	80070c6 <_puts_r+0x22>
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	0598      	lsls	r0, r3, #22
 80070be:	d402      	bmi.n	80070c6 <_puts_r+0x22>
 80070c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070c2:	f000 f9b0 	bl	8007426 <__retarget_lock_acquire_recursive>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	0719      	lsls	r1, r3, #28
 80070ca:	d513      	bpl.n	80070f4 <_puts_r+0x50>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	b18b      	cbz	r3, 80070f4 <_puts_r+0x50>
 80070d0:	3e01      	subs	r6, #1
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070d8:	3b01      	subs	r3, #1
 80070da:	60a3      	str	r3, [r4, #8]
 80070dc:	b9e9      	cbnz	r1, 800711a <_puts_r+0x76>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	da2e      	bge.n	8007140 <_puts_r+0x9c>
 80070e2:	4622      	mov	r2, r4
 80070e4:	210a      	movs	r1, #10
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f87b 	bl	80071e2 <__swbuf_r>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d007      	beq.n	8007100 <_puts_r+0x5c>
 80070f0:	250a      	movs	r5, #10
 80070f2:	e007      	b.n	8007104 <_puts_r+0x60>
 80070f4:	4621      	mov	r1, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 f8b0 	bl	800725c <__swsetup_r>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d0e7      	beq.n	80070d0 <_puts_r+0x2c>
 8007100:	f04f 35ff 	mov.w	r5, #4294967295
 8007104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007106:	07da      	lsls	r2, r3, #31
 8007108:	d405      	bmi.n	8007116 <_puts_r+0x72>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	059b      	lsls	r3, r3, #22
 800710e:	d402      	bmi.n	8007116 <_puts_r+0x72>
 8007110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007112:	f000 f989 	bl	8007428 <__retarget_lock_release_recursive>
 8007116:	4628      	mov	r0, r5
 8007118:	bd70      	pop	{r4, r5, r6, pc}
 800711a:	2b00      	cmp	r3, #0
 800711c:	da04      	bge.n	8007128 <_puts_r+0x84>
 800711e:	69a2      	ldr	r2, [r4, #24]
 8007120:	429a      	cmp	r2, r3
 8007122:	dc06      	bgt.n	8007132 <_puts_r+0x8e>
 8007124:	290a      	cmp	r1, #10
 8007126:	d004      	beq.n	8007132 <_puts_r+0x8e>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	6022      	str	r2, [r4, #0]
 800712e:	7019      	strb	r1, [r3, #0]
 8007130:	e7cf      	b.n	80070d2 <_puts_r+0x2e>
 8007132:	4622      	mov	r2, r4
 8007134:	4628      	mov	r0, r5
 8007136:	f000 f854 	bl	80071e2 <__swbuf_r>
 800713a:	3001      	adds	r0, #1
 800713c:	d1c9      	bne.n	80070d2 <_puts_r+0x2e>
 800713e:	e7df      	b.n	8007100 <_puts_r+0x5c>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	250a      	movs	r5, #10
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	6022      	str	r2, [r4, #0]
 8007148:	701d      	strb	r5, [r3, #0]
 800714a:	e7db      	b.n	8007104 <_puts_r+0x60>

0800714c <puts>:
 800714c:	4b02      	ldr	r3, [pc, #8]	; (8007158 <puts+0xc>)
 800714e:	4601      	mov	r1, r0
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f7ff bfa7 	b.w	80070a4 <_puts_r>
 8007156:	bf00      	nop
 8007158:	2000006c 	.word	0x2000006c

0800715c <__sread>:
 800715c:	b510      	push	{r4, lr}
 800715e:	460c      	mov	r4, r1
 8007160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007164:	f000 f900 	bl	8007368 <_read_r>
 8007168:	2800      	cmp	r0, #0
 800716a:	bfab      	itete	ge
 800716c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800716e:	89a3      	ldrhlt	r3, [r4, #12]
 8007170:	181b      	addge	r3, r3, r0
 8007172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007176:	bfac      	ite	ge
 8007178:	6563      	strge	r3, [r4, #84]	; 0x54
 800717a:	81a3      	strhlt	r3, [r4, #12]
 800717c:	bd10      	pop	{r4, pc}

0800717e <__swrite>:
 800717e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007182:	461f      	mov	r7, r3
 8007184:	898b      	ldrh	r3, [r1, #12]
 8007186:	05db      	lsls	r3, r3, #23
 8007188:	4605      	mov	r5, r0
 800718a:	460c      	mov	r4, r1
 800718c:	4616      	mov	r6, r2
 800718e:	d505      	bpl.n	800719c <__swrite+0x1e>
 8007190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007194:	2302      	movs	r3, #2
 8007196:	2200      	movs	r2, #0
 8007198:	f000 f8d4 	bl	8007344 <_lseek_r>
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	4632      	mov	r2, r6
 80071aa:	463b      	mov	r3, r7
 80071ac:	4628      	mov	r0, r5
 80071ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b2:	f000 b8fb 	b.w	80073ac <_write_r>

080071b6 <__sseek>:
 80071b6:	b510      	push	{r4, lr}
 80071b8:	460c      	mov	r4, r1
 80071ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071be:	f000 f8c1 	bl	8007344 <_lseek_r>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	bf15      	itete	ne
 80071c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80071ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071d2:	81a3      	strheq	r3, [r4, #12]
 80071d4:	bf18      	it	ne
 80071d6:	81a3      	strhne	r3, [r4, #12]
 80071d8:	bd10      	pop	{r4, pc}

080071da <__sclose>:
 80071da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071de:	f000 b8a1 	b.w	8007324 <_close_r>

080071e2 <__swbuf_r>:
 80071e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e4:	460e      	mov	r6, r1
 80071e6:	4614      	mov	r4, r2
 80071e8:	4605      	mov	r5, r0
 80071ea:	b118      	cbz	r0, 80071f4 <__swbuf_r+0x12>
 80071ec:	6a03      	ldr	r3, [r0, #32]
 80071ee:	b90b      	cbnz	r3, 80071f4 <__swbuf_r+0x12>
 80071f0:	f7ff ff10 	bl	8007014 <__sinit>
 80071f4:	69a3      	ldr	r3, [r4, #24]
 80071f6:	60a3      	str	r3, [r4, #8]
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	071a      	lsls	r2, r3, #28
 80071fc:	d525      	bpl.n	800724a <__swbuf_r+0x68>
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	b31b      	cbz	r3, 800724a <__swbuf_r+0x68>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	6922      	ldr	r2, [r4, #16]
 8007206:	1a98      	subs	r0, r3, r2
 8007208:	6963      	ldr	r3, [r4, #20]
 800720a:	b2f6      	uxtb	r6, r6
 800720c:	4283      	cmp	r3, r0
 800720e:	4637      	mov	r7, r6
 8007210:	dc04      	bgt.n	800721c <__swbuf_r+0x3a>
 8007212:	4621      	mov	r1, r4
 8007214:	4628      	mov	r0, r5
 8007216:	f001 fd23 	bl	8008c60 <_fflush_r>
 800721a:	b9e0      	cbnz	r0, 8007256 <__swbuf_r+0x74>
 800721c:	68a3      	ldr	r3, [r4, #8]
 800721e:	3b01      	subs	r3, #1
 8007220:	60a3      	str	r3, [r4, #8]
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	701e      	strb	r6, [r3, #0]
 800722a:	6962      	ldr	r2, [r4, #20]
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	429a      	cmp	r2, r3
 8007230:	d004      	beq.n	800723c <__swbuf_r+0x5a>
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	07db      	lsls	r3, r3, #31
 8007236:	d506      	bpl.n	8007246 <__swbuf_r+0x64>
 8007238:	2e0a      	cmp	r6, #10
 800723a:	d104      	bne.n	8007246 <__swbuf_r+0x64>
 800723c:	4621      	mov	r1, r4
 800723e:	4628      	mov	r0, r5
 8007240:	f001 fd0e 	bl	8008c60 <_fflush_r>
 8007244:	b938      	cbnz	r0, 8007256 <__swbuf_r+0x74>
 8007246:	4638      	mov	r0, r7
 8007248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f000 f805 	bl	800725c <__swsetup_r>
 8007252:	2800      	cmp	r0, #0
 8007254:	d0d5      	beq.n	8007202 <__swbuf_r+0x20>
 8007256:	f04f 37ff 	mov.w	r7, #4294967295
 800725a:	e7f4      	b.n	8007246 <__swbuf_r+0x64>

0800725c <__swsetup_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4b2a      	ldr	r3, [pc, #168]	; (8007308 <__swsetup_r+0xac>)
 8007260:	4605      	mov	r5, r0
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	460c      	mov	r4, r1
 8007266:	b118      	cbz	r0, 8007270 <__swsetup_r+0x14>
 8007268:	6a03      	ldr	r3, [r0, #32]
 800726a:	b90b      	cbnz	r3, 8007270 <__swsetup_r+0x14>
 800726c:	f7ff fed2 	bl	8007014 <__sinit>
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007276:	0718      	lsls	r0, r3, #28
 8007278:	d422      	bmi.n	80072c0 <__swsetup_r+0x64>
 800727a:	06d9      	lsls	r1, r3, #27
 800727c:	d407      	bmi.n	800728e <__swsetup_r+0x32>
 800727e:	2309      	movs	r3, #9
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	f04f 30ff 	mov.w	r0, #4294967295
 800728c:	e034      	b.n	80072f8 <__swsetup_r+0x9c>
 800728e:	0758      	lsls	r0, r3, #29
 8007290:	d512      	bpl.n	80072b8 <__swsetup_r+0x5c>
 8007292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007294:	b141      	cbz	r1, 80072a8 <__swsetup_r+0x4c>
 8007296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800729a:	4299      	cmp	r1, r3
 800729c:	d002      	beq.n	80072a4 <__swsetup_r+0x48>
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 ff4c 	bl	800813c <_free_r>
 80072a4:	2300      	movs	r3, #0
 80072a6:	6363      	str	r3, [r4, #52]	; 0x34
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	2300      	movs	r3, #0
 80072b2:	6063      	str	r3, [r4, #4]
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	f043 0308 	orr.w	r3, r3, #8
 80072be:	81a3      	strh	r3, [r4, #12]
 80072c0:	6923      	ldr	r3, [r4, #16]
 80072c2:	b94b      	cbnz	r3, 80072d8 <__swsetup_r+0x7c>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ce:	d003      	beq.n	80072d8 <__swsetup_r+0x7c>
 80072d0:	4621      	mov	r1, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f001 fd12 	bl	8008cfc <__smakebuf_r>
 80072d8:	89a0      	ldrh	r0, [r4, #12]
 80072da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072de:	f010 0301 	ands.w	r3, r0, #1
 80072e2:	d00a      	beq.n	80072fa <__swsetup_r+0x9e>
 80072e4:	2300      	movs	r3, #0
 80072e6:	60a3      	str	r3, [r4, #8]
 80072e8:	6963      	ldr	r3, [r4, #20]
 80072ea:	425b      	negs	r3, r3
 80072ec:	61a3      	str	r3, [r4, #24]
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	b943      	cbnz	r3, 8007304 <__swsetup_r+0xa8>
 80072f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072f6:	d1c4      	bne.n	8007282 <__swsetup_r+0x26>
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	0781      	lsls	r1, r0, #30
 80072fc:	bf58      	it	pl
 80072fe:	6963      	ldrpl	r3, [r4, #20]
 8007300:	60a3      	str	r3, [r4, #8]
 8007302:	e7f4      	b.n	80072ee <__swsetup_r+0x92>
 8007304:	2000      	movs	r0, #0
 8007306:	e7f7      	b.n	80072f8 <__swsetup_r+0x9c>
 8007308:	2000006c 	.word	0x2000006c

0800730c <memset>:
 800730c:	4402      	add	r2, r0
 800730e:	4603      	mov	r3, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <_localeconv_r>:
 800731c:	4800      	ldr	r0, [pc, #0]	; (8007320 <_localeconv_r+0x4>)
 800731e:	4770      	bx	lr
 8007320:	20000160 	.word	0x20000160

08007324 <_close_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	4d06      	ldr	r5, [pc, #24]	; (8007340 <_close_r+0x1c>)
 8007328:	2300      	movs	r3, #0
 800732a:	4604      	mov	r4, r0
 800732c:	4608      	mov	r0, r1
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	f7fb fdfb 	bl	8002f2a <_close>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_close_r+0x1a>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_close_r+0x1a>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	200006f4 	.word	0x200006f4

08007344 <_lseek_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4d07      	ldr	r5, [pc, #28]	; (8007364 <_lseek_r+0x20>)
 8007348:	4604      	mov	r4, r0
 800734a:	4608      	mov	r0, r1
 800734c:	4611      	mov	r1, r2
 800734e:	2200      	movs	r2, #0
 8007350:	602a      	str	r2, [r5, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f7fb fe10 	bl	8002f78 <_lseek>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d102      	bne.n	8007362 <_lseek_r+0x1e>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b103      	cbz	r3, 8007362 <_lseek_r+0x1e>
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	200006f4 	.word	0x200006f4

08007368 <_read_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4d07      	ldr	r5, [pc, #28]	; (8007388 <_read_r+0x20>)
 800736c:	4604      	mov	r4, r0
 800736e:	4608      	mov	r0, r1
 8007370:	4611      	mov	r1, r2
 8007372:	2200      	movs	r2, #0
 8007374:	602a      	str	r2, [r5, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	f7fb fd9e 	bl	8002eb8 <_read>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_read_r+0x1e>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_read_r+0x1e>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	200006f4 	.word	0x200006f4

0800738c <_sbrk_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d06      	ldr	r5, [pc, #24]	; (80073a8 <_sbrk_r+0x1c>)
 8007390:	2300      	movs	r3, #0
 8007392:	4604      	mov	r4, r0
 8007394:	4608      	mov	r0, r1
 8007396:	602b      	str	r3, [r5, #0]
 8007398:	f7fb fdfc 	bl	8002f94 <_sbrk>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d102      	bne.n	80073a6 <_sbrk_r+0x1a>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	b103      	cbz	r3, 80073a6 <_sbrk_r+0x1a>
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	200006f4 	.word	0x200006f4

080073ac <_write_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4d07      	ldr	r5, [pc, #28]	; (80073cc <_write_r+0x20>)
 80073b0:	4604      	mov	r4, r0
 80073b2:	4608      	mov	r0, r1
 80073b4:	4611      	mov	r1, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	602a      	str	r2, [r5, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f7fb fd99 	bl	8002ef2 <_write>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_write_r+0x1e>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_write_r+0x1e>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	200006f4 	.word	0x200006f4

080073d0 <__errno>:
 80073d0:	4b01      	ldr	r3, [pc, #4]	; (80073d8 <__errno+0x8>)
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	2000006c 	.word	0x2000006c

080073dc <__libc_init_array>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	4d0d      	ldr	r5, [pc, #52]	; (8007414 <__libc_init_array+0x38>)
 80073e0:	4c0d      	ldr	r4, [pc, #52]	; (8007418 <__libc_init_array+0x3c>)
 80073e2:	1b64      	subs	r4, r4, r5
 80073e4:	10a4      	asrs	r4, r4, #2
 80073e6:	2600      	movs	r6, #0
 80073e8:	42a6      	cmp	r6, r4
 80073ea:	d109      	bne.n	8007400 <__libc_init_array+0x24>
 80073ec:	4d0b      	ldr	r5, [pc, #44]	; (800741c <__libc_init_array+0x40>)
 80073ee:	4c0c      	ldr	r4, [pc, #48]	; (8007420 <__libc_init_array+0x44>)
 80073f0:	f001 fdb8 	bl	8008f64 <_init>
 80073f4:	1b64      	subs	r4, r4, r5
 80073f6:	10a4      	asrs	r4, r4, #2
 80073f8:	2600      	movs	r6, #0
 80073fa:	42a6      	cmp	r6, r4
 80073fc:	d105      	bne.n	800740a <__libc_init_array+0x2e>
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	f855 3b04 	ldr.w	r3, [r5], #4
 8007404:	4798      	blx	r3
 8007406:	3601      	adds	r6, #1
 8007408:	e7ee      	b.n	80073e8 <__libc_init_array+0xc>
 800740a:	f855 3b04 	ldr.w	r3, [r5], #4
 800740e:	4798      	blx	r3
 8007410:	3601      	adds	r6, #1
 8007412:	e7f2      	b.n	80073fa <__libc_init_array+0x1e>
 8007414:	080095ec 	.word	0x080095ec
 8007418:	080095ec 	.word	0x080095ec
 800741c:	080095ec 	.word	0x080095ec
 8007420:	080095f0 	.word	0x080095f0

08007424 <__retarget_lock_init_recursive>:
 8007424:	4770      	bx	lr

08007426 <__retarget_lock_acquire_recursive>:
 8007426:	4770      	bx	lr

08007428 <__retarget_lock_release_recursive>:
 8007428:	4770      	bx	lr

0800742a <memcpy>:
 800742a:	440a      	add	r2, r1
 800742c:	4291      	cmp	r1, r2
 800742e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007432:	d100      	bne.n	8007436 <memcpy+0xc>
 8007434:	4770      	bx	lr
 8007436:	b510      	push	{r4, lr}
 8007438:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007440:	4291      	cmp	r1, r2
 8007442:	d1f9      	bne.n	8007438 <memcpy+0xe>
 8007444:	bd10      	pop	{r4, pc}

08007446 <quorem>:
 8007446:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744a:	6903      	ldr	r3, [r0, #16]
 800744c:	690c      	ldr	r4, [r1, #16]
 800744e:	42a3      	cmp	r3, r4
 8007450:	4607      	mov	r7, r0
 8007452:	db7e      	blt.n	8007552 <quorem+0x10c>
 8007454:	3c01      	subs	r4, #1
 8007456:	f101 0814 	add.w	r8, r1, #20
 800745a:	f100 0514 	add.w	r5, r0, #20
 800745e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800746c:	3301      	adds	r3, #1
 800746e:	429a      	cmp	r2, r3
 8007470:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007478:	fbb2 f6f3 	udiv	r6, r2, r3
 800747c:	d331      	bcc.n	80074e2 <quorem+0x9c>
 800747e:	f04f 0e00 	mov.w	lr, #0
 8007482:	4640      	mov	r0, r8
 8007484:	46ac      	mov	ip, r5
 8007486:	46f2      	mov	sl, lr
 8007488:	f850 2b04 	ldr.w	r2, [r0], #4
 800748c:	b293      	uxth	r3, r2
 800748e:	fb06 e303 	mla	r3, r6, r3, lr
 8007492:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007496:	0c1a      	lsrs	r2, r3, #16
 8007498:	b29b      	uxth	r3, r3
 800749a:	ebaa 0303 	sub.w	r3, sl, r3
 800749e:	f8dc a000 	ldr.w	sl, [ip]
 80074a2:	fa13 f38a 	uxtah	r3, r3, sl
 80074a6:	fb06 220e 	mla	r2, r6, lr, r2
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	9b00      	ldr	r3, [sp, #0]
 80074ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074b2:	b292      	uxth	r2, r2
 80074b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80074b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80074c0:	4581      	cmp	r9, r0
 80074c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074c6:	f84c 3b04 	str.w	r3, [ip], #4
 80074ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074ce:	d2db      	bcs.n	8007488 <quorem+0x42>
 80074d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80074d4:	b92b      	cbnz	r3, 80074e2 <quorem+0x9c>
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	3b04      	subs	r3, #4
 80074da:	429d      	cmp	r5, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	d32c      	bcc.n	800753a <quorem+0xf4>
 80074e0:	613c      	str	r4, [r7, #16]
 80074e2:	4638      	mov	r0, r7
 80074e4:	f001 f8f2 	bl	80086cc <__mcmp>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	db22      	blt.n	8007532 <quorem+0xec>
 80074ec:	3601      	adds	r6, #1
 80074ee:	4629      	mov	r1, r5
 80074f0:	2000      	movs	r0, #0
 80074f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80074f6:	f8d1 c000 	ldr.w	ip, [r1]
 80074fa:	b293      	uxth	r3, r2
 80074fc:	1ac3      	subs	r3, r0, r3
 80074fe:	0c12      	lsrs	r2, r2, #16
 8007500:	fa13 f38c 	uxtah	r3, r3, ip
 8007504:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800750c:	b29b      	uxth	r3, r3
 800750e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007512:	45c1      	cmp	r9, r8
 8007514:	f841 3b04 	str.w	r3, [r1], #4
 8007518:	ea4f 4022 	mov.w	r0, r2, asr #16
 800751c:	d2e9      	bcs.n	80074f2 <quorem+0xac>
 800751e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007526:	b922      	cbnz	r2, 8007532 <quorem+0xec>
 8007528:	3b04      	subs	r3, #4
 800752a:	429d      	cmp	r5, r3
 800752c:	461a      	mov	r2, r3
 800752e:	d30a      	bcc.n	8007546 <quorem+0x100>
 8007530:	613c      	str	r4, [r7, #16]
 8007532:	4630      	mov	r0, r6
 8007534:	b003      	add	sp, #12
 8007536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	3b04      	subs	r3, #4
 800753e:	2a00      	cmp	r2, #0
 8007540:	d1ce      	bne.n	80074e0 <quorem+0x9a>
 8007542:	3c01      	subs	r4, #1
 8007544:	e7c9      	b.n	80074da <quorem+0x94>
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	3b04      	subs	r3, #4
 800754a:	2a00      	cmp	r2, #0
 800754c:	d1f0      	bne.n	8007530 <quorem+0xea>
 800754e:	3c01      	subs	r4, #1
 8007550:	e7eb      	b.n	800752a <quorem+0xe4>
 8007552:	2000      	movs	r0, #0
 8007554:	e7ee      	b.n	8007534 <quorem+0xee>
	...

08007558 <_dtoa_r>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	ed2d 8b04 	vpush	{d8-d9}
 8007560:	69c5      	ldr	r5, [r0, #28]
 8007562:	b093      	sub	sp, #76	; 0x4c
 8007564:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007568:	ec57 6b10 	vmov	r6, r7, d0
 800756c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007570:	9107      	str	r1, [sp, #28]
 8007572:	4604      	mov	r4, r0
 8007574:	920a      	str	r2, [sp, #40]	; 0x28
 8007576:	930d      	str	r3, [sp, #52]	; 0x34
 8007578:	b975      	cbnz	r5, 8007598 <_dtoa_r+0x40>
 800757a:	2010      	movs	r0, #16
 800757c:	f7fe ff9c 	bl	80064b8 <malloc>
 8007580:	4602      	mov	r2, r0
 8007582:	61e0      	str	r0, [r4, #28]
 8007584:	b920      	cbnz	r0, 8007590 <_dtoa_r+0x38>
 8007586:	4bae      	ldr	r3, [pc, #696]	; (8007840 <_dtoa_r+0x2e8>)
 8007588:	21ef      	movs	r1, #239	; 0xef
 800758a:	48ae      	ldr	r0, [pc, #696]	; (8007844 <_dtoa_r+0x2ec>)
 800758c:	f001 fc14 	bl	8008db8 <__assert_func>
 8007590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007594:	6005      	str	r5, [r0, #0]
 8007596:	60c5      	str	r5, [r0, #12]
 8007598:	69e3      	ldr	r3, [r4, #28]
 800759a:	6819      	ldr	r1, [r3, #0]
 800759c:	b151      	cbz	r1, 80075b4 <_dtoa_r+0x5c>
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	604a      	str	r2, [r1, #4]
 80075a2:	2301      	movs	r3, #1
 80075a4:	4093      	lsls	r3, r2
 80075a6:	608b      	str	r3, [r1, #8]
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 fe53 	bl	8008254 <_Bfree>
 80075ae:	69e3      	ldr	r3, [r4, #28]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	1e3b      	subs	r3, r7, #0
 80075b6:	bfbb      	ittet	lt
 80075b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	9303      	strlt	r3, [sp, #12]
 80075be:	2300      	movge	r3, #0
 80075c0:	2201      	movlt	r2, #1
 80075c2:	bfac      	ite	ge
 80075c4:	f8c8 3000 	strge.w	r3, [r8]
 80075c8:	f8c8 2000 	strlt.w	r2, [r8]
 80075cc:	4b9e      	ldr	r3, [pc, #632]	; (8007848 <_dtoa_r+0x2f0>)
 80075ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80075d2:	ea33 0308 	bics.w	r3, r3, r8
 80075d6:	d11b      	bne.n	8007610 <_dtoa_r+0xb8>
 80075d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075da:	f242 730f 	movw	r3, #9999	; 0x270f
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80075e4:	4333      	orrs	r3, r6
 80075e6:	f000 8593 	beq.w	8008110 <_dtoa_r+0xbb8>
 80075ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075ec:	b963      	cbnz	r3, 8007608 <_dtoa_r+0xb0>
 80075ee:	4b97      	ldr	r3, [pc, #604]	; (800784c <_dtoa_r+0x2f4>)
 80075f0:	e027      	b.n	8007642 <_dtoa_r+0xea>
 80075f2:	4b97      	ldr	r3, [pc, #604]	; (8007850 <_dtoa_r+0x2f8>)
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	9800      	ldr	r0, [sp, #0]
 80075fe:	b013      	add	sp, #76	; 0x4c
 8007600:	ecbd 8b04 	vpop	{d8-d9}
 8007604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007608:	4b90      	ldr	r3, [pc, #576]	; (800784c <_dtoa_r+0x2f4>)
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	3303      	adds	r3, #3
 800760e:	e7f3      	b.n	80075f8 <_dtoa_r+0xa0>
 8007610:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007614:	2200      	movs	r2, #0
 8007616:	ec51 0b17 	vmov	r0, r1, d7
 800761a:	eeb0 8a47 	vmov.f32	s16, s14
 800761e:	eef0 8a67 	vmov.f32	s17, s15
 8007622:	2300      	movs	r3, #0
 8007624:	f7f9 fa28 	bl	8000a78 <__aeabi_dcmpeq>
 8007628:	4681      	mov	r9, r0
 800762a:	b160      	cbz	r0, 8007646 <_dtoa_r+0xee>
 800762c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800762e:	2301      	movs	r3, #1
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8568 	beq.w	800810a <_dtoa_r+0xbb2>
 800763a:	4b86      	ldr	r3, [pc, #536]	; (8007854 <_dtoa_r+0x2fc>)
 800763c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	3b01      	subs	r3, #1
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	e7da      	b.n	80075fc <_dtoa_r+0xa4>
 8007646:	aa10      	add	r2, sp, #64	; 0x40
 8007648:	a911      	add	r1, sp, #68	; 0x44
 800764a:	4620      	mov	r0, r4
 800764c:	eeb0 0a48 	vmov.f32	s0, s16
 8007650:	eef0 0a68 	vmov.f32	s1, s17
 8007654:	f001 f8e0 	bl	8008818 <__d2b>
 8007658:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800765c:	4682      	mov	sl, r0
 800765e:	2d00      	cmp	r5, #0
 8007660:	d07f      	beq.n	8007762 <_dtoa_r+0x20a>
 8007662:	ee18 3a90 	vmov	r3, s17
 8007666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800766a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800766e:	ec51 0b18 	vmov	r0, r1, d8
 8007672:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800767a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800767e:	4619      	mov	r1, r3
 8007680:	2200      	movs	r2, #0
 8007682:	4b75      	ldr	r3, [pc, #468]	; (8007858 <_dtoa_r+0x300>)
 8007684:	f7f8 fdd8 	bl	8000238 <__aeabi_dsub>
 8007688:	a367      	add	r3, pc, #412	; (adr r3, 8007828 <_dtoa_r+0x2d0>)
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f7f8 ff8b 	bl	80005a8 <__aeabi_dmul>
 8007692:	a367      	add	r3, pc, #412	; (adr r3, 8007830 <_dtoa_r+0x2d8>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f7f8 fdd0 	bl	800023c <__adddf3>
 800769c:	4606      	mov	r6, r0
 800769e:	4628      	mov	r0, r5
 80076a0:	460f      	mov	r7, r1
 80076a2:	f7f8 ff17 	bl	80004d4 <__aeabi_i2d>
 80076a6:	a364      	add	r3, pc, #400	; (adr r3, 8007838 <_dtoa_r+0x2e0>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f7f8 ff7c 	bl	80005a8 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4630      	mov	r0, r6
 80076b6:	4639      	mov	r1, r7
 80076b8:	f7f8 fdc0 	bl	800023c <__adddf3>
 80076bc:	4606      	mov	r6, r0
 80076be:	460f      	mov	r7, r1
 80076c0:	f7f9 fa22 	bl	8000b08 <__aeabi_d2iz>
 80076c4:	2200      	movs	r2, #0
 80076c6:	4683      	mov	fp, r0
 80076c8:	2300      	movs	r3, #0
 80076ca:	4630      	mov	r0, r6
 80076cc:	4639      	mov	r1, r7
 80076ce:	f7f9 f9dd 	bl	8000a8c <__aeabi_dcmplt>
 80076d2:	b148      	cbz	r0, 80076e8 <_dtoa_r+0x190>
 80076d4:	4658      	mov	r0, fp
 80076d6:	f7f8 fefd 	bl	80004d4 <__aeabi_i2d>
 80076da:	4632      	mov	r2, r6
 80076dc:	463b      	mov	r3, r7
 80076de:	f7f9 f9cb 	bl	8000a78 <__aeabi_dcmpeq>
 80076e2:	b908      	cbnz	r0, 80076e8 <_dtoa_r+0x190>
 80076e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076e8:	f1bb 0f16 	cmp.w	fp, #22
 80076ec:	d857      	bhi.n	800779e <_dtoa_r+0x246>
 80076ee:	4b5b      	ldr	r3, [pc, #364]	; (800785c <_dtoa_r+0x304>)
 80076f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	ec51 0b18 	vmov	r0, r1, d8
 80076fc:	f7f9 f9c6 	bl	8000a8c <__aeabi_dcmplt>
 8007700:	2800      	cmp	r0, #0
 8007702:	d04e      	beq.n	80077a2 <_dtoa_r+0x24a>
 8007704:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007708:	2300      	movs	r3, #0
 800770a:	930c      	str	r3, [sp, #48]	; 0x30
 800770c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800770e:	1b5b      	subs	r3, r3, r5
 8007710:	1e5a      	subs	r2, r3, #1
 8007712:	bf45      	ittet	mi
 8007714:	f1c3 0301 	rsbmi	r3, r3, #1
 8007718:	9305      	strmi	r3, [sp, #20]
 800771a:	2300      	movpl	r3, #0
 800771c:	2300      	movmi	r3, #0
 800771e:	9206      	str	r2, [sp, #24]
 8007720:	bf54      	ite	pl
 8007722:	9305      	strpl	r3, [sp, #20]
 8007724:	9306      	strmi	r3, [sp, #24]
 8007726:	f1bb 0f00 	cmp.w	fp, #0
 800772a:	db3c      	blt.n	80077a6 <_dtoa_r+0x24e>
 800772c:	9b06      	ldr	r3, [sp, #24]
 800772e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007732:	445b      	add	r3, fp
 8007734:	9306      	str	r3, [sp, #24]
 8007736:	2300      	movs	r3, #0
 8007738:	9308      	str	r3, [sp, #32]
 800773a:	9b07      	ldr	r3, [sp, #28]
 800773c:	2b09      	cmp	r3, #9
 800773e:	d868      	bhi.n	8007812 <_dtoa_r+0x2ba>
 8007740:	2b05      	cmp	r3, #5
 8007742:	bfc4      	itt	gt
 8007744:	3b04      	subgt	r3, #4
 8007746:	9307      	strgt	r3, [sp, #28]
 8007748:	9b07      	ldr	r3, [sp, #28]
 800774a:	f1a3 0302 	sub.w	r3, r3, #2
 800774e:	bfcc      	ite	gt
 8007750:	2500      	movgt	r5, #0
 8007752:	2501      	movle	r5, #1
 8007754:	2b03      	cmp	r3, #3
 8007756:	f200 8085 	bhi.w	8007864 <_dtoa_r+0x30c>
 800775a:	e8df f003 	tbb	[pc, r3]
 800775e:	3b2e      	.short	0x3b2e
 8007760:	5839      	.short	0x5839
 8007762:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007766:	441d      	add	r5, r3
 8007768:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800776c:	2b20      	cmp	r3, #32
 800776e:	bfc1      	itttt	gt
 8007770:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007774:	fa08 f803 	lslgt.w	r8, r8, r3
 8007778:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800777c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007780:	bfd6      	itet	le
 8007782:	f1c3 0320 	rsble	r3, r3, #32
 8007786:	ea48 0003 	orrgt.w	r0, r8, r3
 800778a:	fa06 f003 	lslle.w	r0, r6, r3
 800778e:	f7f8 fe91 	bl	80004b4 <__aeabi_ui2d>
 8007792:	2201      	movs	r2, #1
 8007794:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007798:	3d01      	subs	r5, #1
 800779a:	920e      	str	r2, [sp, #56]	; 0x38
 800779c:	e76f      	b.n	800767e <_dtoa_r+0x126>
 800779e:	2301      	movs	r3, #1
 80077a0:	e7b3      	b.n	800770a <_dtoa_r+0x1b2>
 80077a2:	900c      	str	r0, [sp, #48]	; 0x30
 80077a4:	e7b2      	b.n	800770c <_dtoa_r+0x1b4>
 80077a6:	9b05      	ldr	r3, [sp, #20]
 80077a8:	eba3 030b 	sub.w	r3, r3, fp
 80077ac:	9305      	str	r3, [sp, #20]
 80077ae:	f1cb 0300 	rsb	r3, fp, #0
 80077b2:	9308      	str	r3, [sp, #32]
 80077b4:	2300      	movs	r3, #0
 80077b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80077b8:	e7bf      	b.n	800773a <_dtoa_r+0x1e2>
 80077ba:	2300      	movs	r3, #0
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dc52      	bgt.n	800786a <_dtoa_r+0x312>
 80077c4:	2301      	movs	r3, #1
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	461a      	mov	r2, r3
 80077cc:	920a      	str	r2, [sp, #40]	; 0x28
 80077ce:	e00b      	b.n	80077e8 <_dtoa_r+0x290>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e7f3      	b.n	80077bc <_dtoa_r+0x264>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077da:	445b      	add	r3, fp
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	3301      	adds	r3, #1
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	bfb8      	it	lt
 80077e6:	2301      	movlt	r3, #1
 80077e8:	69e0      	ldr	r0, [r4, #28]
 80077ea:	2100      	movs	r1, #0
 80077ec:	2204      	movs	r2, #4
 80077ee:	f102 0614 	add.w	r6, r2, #20
 80077f2:	429e      	cmp	r6, r3
 80077f4:	d93d      	bls.n	8007872 <_dtoa_r+0x31a>
 80077f6:	6041      	str	r1, [r0, #4]
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fceb 	bl	80081d4 <_Balloc>
 80077fe:	9000      	str	r0, [sp, #0]
 8007800:	2800      	cmp	r0, #0
 8007802:	d139      	bne.n	8007878 <_dtoa_r+0x320>
 8007804:	4b16      	ldr	r3, [pc, #88]	; (8007860 <_dtoa_r+0x308>)
 8007806:	4602      	mov	r2, r0
 8007808:	f240 11af 	movw	r1, #431	; 0x1af
 800780c:	e6bd      	b.n	800758a <_dtoa_r+0x32>
 800780e:	2301      	movs	r3, #1
 8007810:	e7e1      	b.n	80077d6 <_dtoa_r+0x27e>
 8007812:	2501      	movs	r5, #1
 8007814:	2300      	movs	r3, #0
 8007816:	9307      	str	r3, [sp, #28]
 8007818:	9509      	str	r5, [sp, #36]	; 0x24
 800781a:	f04f 33ff 	mov.w	r3, #4294967295
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	2200      	movs	r2, #0
 8007824:	2312      	movs	r3, #18
 8007826:	e7d1      	b.n	80077cc <_dtoa_r+0x274>
 8007828:	636f4361 	.word	0x636f4361
 800782c:	3fd287a7 	.word	0x3fd287a7
 8007830:	8b60c8b3 	.word	0x8b60c8b3
 8007834:	3fc68a28 	.word	0x3fc68a28
 8007838:	509f79fb 	.word	0x509f79fb
 800783c:	3fd34413 	.word	0x3fd34413
 8007840:	080092b1 	.word	0x080092b1
 8007844:	080092c8 	.word	0x080092c8
 8007848:	7ff00000 	.word	0x7ff00000
 800784c:	080092ad 	.word	0x080092ad
 8007850:	080092a4 	.word	0x080092a4
 8007854:	08009281 	.word	0x08009281
 8007858:	3ff80000 	.word	0x3ff80000
 800785c:	080093b8 	.word	0x080093b8
 8007860:	08009320 	.word	0x08009320
 8007864:	2301      	movs	r3, #1
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	e7d7      	b.n	800781a <_dtoa_r+0x2c2>
 800786a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	e7ba      	b.n	80077e8 <_dtoa_r+0x290>
 8007872:	3101      	adds	r1, #1
 8007874:	0052      	lsls	r2, r2, #1
 8007876:	e7ba      	b.n	80077ee <_dtoa_r+0x296>
 8007878:	69e3      	ldr	r3, [r4, #28]
 800787a:	9a00      	ldr	r2, [sp, #0]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	2b0e      	cmp	r3, #14
 8007882:	f200 80a8 	bhi.w	80079d6 <_dtoa_r+0x47e>
 8007886:	2d00      	cmp	r5, #0
 8007888:	f000 80a5 	beq.w	80079d6 <_dtoa_r+0x47e>
 800788c:	f1bb 0f00 	cmp.w	fp, #0
 8007890:	dd38      	ble.n	8007904 <_dtoa_r+0x3ac>
 8007892:	4bc0      	ldr	r3, [pc, #768]	; (8007b94 <_dtoa_r+0x63c>)
 8007894:	f00b 020f 	and.w	r2, fp, #15
 8007898:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800789c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80078a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80078a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80078a8:	d019      	beq.n	80078de <_dtoa_r+0x386>
 80078aa:	4bbb      	ldr	r3, [pc, #748]	; (8007b98 <_dtoa_r+0x640>)
 80078ac:	ec51 0b18 	vmov	r0, r1, d8
 80078b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078b4:	f7f8 ffa2 	bl	80007fc <__aeabi_ddiv>
 80078b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078bc:	f008 080f 	and.w	r8, r8, #15
 80078c0:	2503      	movs	r5, #3
 80078c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007b98 <_dtoa_r+0x640>
 80078c6:	f1b8 0f00 	cmp.w	r8, #0
 80078ca:	d10a      	bne.n	80078e2 <_dtoa_r+0x38a>
 80078cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d0:	4632      	mov	r2, r6
 80078d2:	463b      	mov	r3, r7
 80078d4:	f7f8 ff92 	bl	80007fc <__aeabi_ddiv>
 80078d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078dc:	e02b      	b.n	8007936 <_dtoa_r+0x3de>
 80078de:	2502      	movs	r5, #2
 80078e0:	e7ef      	b.n	80078c2 <_dtoa_r+0x36a>
 80078e2:	f018 0f01 	tst.w	r8, #1
 80078e6:	d008      	beq.n	80078fa <_dtoa_r+0x3a2>
 80078e8:	4630      	mov	r0, r6
 80078ea:	4639      	mov	r1, r7
 80078ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80078f0:	f7f8 fe5a 	bl	80005a8 <__aeabi_dmul>
 80078f4:	3501      	adds	r5, #1
 80078f6:	4606      	mov	r6, r0
 80078f8:	460f      	mov	r7, r1
 80078fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078fe:	f109 0908 	add.w	r9, r9, #8
 8007902:	e7e0      	b.n	80078c6 <_dtoa_r+0x36e>
 8007904:	f000 809f 	beq.w	8007a46 <_dtoa_r+0x4ee>
 8007908:	f1cb 0600 	rsb	r6, fp, #0
 800790c:	4ba1      	ldr	r3, [pc, #644]	; (8007b94 <_dtoa_r+0x63c>)
 800790e:	4fa2      	ldr	r7, [pc, #648]	; (8007b98 <_dtoa_r+0x640>)
 8007910:	f006 020f 	and.w	r2, r6, #15
 8007914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	ec51 0b18 	vmov	r0, r1, d8
 8007920:	f7f8 fe42 	bl	80005a8 <__aeabi_dmul>
 8007924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007928:	1136      	asrs	r6, r6, #4
 800792a:	2300      	movs	r3, #0
 800792c:	2502      	movs	r5, #2
 800792e:	2e00      	cmp	r6, #0
 8007930:	d17e      	bne.n	8007a30 <_dtoa_r+0x4d8>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1d0      	bne.n	80078d8 <_dtoa_r+0x380>
 8007936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007938:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8084 	beq.w	8007a4a <_dtoa_r+0x4f2>
 8007942:	4b96      	ldr	r3, [pc, #600]	; (8007b9c <_dtoa_r+0x644>)
 8007944:	2200      	movs	r2, #0
 8007946:	4640      	mov	r0, r8
 8007948:	4649      	mov	r1, r9
 800794a:	f7f9 f89f 	bl	8000a8c <__aeabi_dcmplt>
 800794e:	2800      	cmp	r0, #0
 8007950:	d07b      	beq.n	8007a4a <_dtoa_r+0x4f2>
 8007952:	9b04      	ldr	r3, [sp, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d078      	beq.n	8007a4a <_dtoa_r+0x4f2>
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	dd39      	ble.n	80079d2 <_dtoa_r+0x47a>
 800795e:	4b90      	ldr	r3, [pc, #576]	; (8007ba0 <_dtoa_r+0x648>)
 8007960:	2200      	movs	r2, #0
 8007962:	4640      	mov	r0, r8
 8007964:	4649      	mov	r1, r9
 8007966:	f7f8 fe1f 	bl	80005a8 <__aeabi_dmul>
 800796a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800796e:	9e01      	ldr	r6, [sp, #4]
 8007970:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007974:	3501      	adds	r5, #1
 8007976:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800797a:	4628      	mov	r0, r5
 800797c:	f7f8 fdaa 	bl	80004d4 <__aeabi_i2d>
 8007980:	4642      	mov	r2, r8
 8007982:	464b      	mov	r3, r9
 8007984:	f7f8 fe10 	bl	80005a8 <__aeabi_dmul>
 8007988:	4b86      	ldr	r3, [pc, #536]	; (8007ba4 <_dtoa_r+0x64c>)
 800798a:	2200      	movs	r2, #0
 800798c:	f7f8 fc56 	bl	800023c <__adddf3>
 8007990:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007998:	9303      	str	r3, [sp, #12]
 800799a:	2e00      	cmp	r6, #0
 800799c:	d158      	bne.n	8007a50 <_dtoa_r+0x4f8>
 800799e:	4b82      	ldr	r3, [pc, #520]	; (8007ba8 <_dtoa_r+0x650>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f8 fc47 	bl	8000238 <__aeabi_dsub>
 80079aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079ae:	4680      	mov	r8, r0
 80079b0:	4689      	mov	r9, r1
 80079b2:	f7f9 f889 	bl	8000ac8 <__aeabi_dcmpgt>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f040 8296 	bne.w	8007ee8 <_dtoa_r+0x990>
 80079bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80079c0:	4640      	mov	r0, r8
 80079c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079c6:	4649      	mov	r1, r9
 80079c8:	f7f9 f860 	bl	8000a8c <__aeabi_dcmplt>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f040 8289 	bne.w	8007ee4 <_dtoa_r+0x98c>
 80079d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80079d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f2c0 814e 	blt.w	8007c7a <_dtoa_r+0x722>
 80079de:	f1bb 0f0e 	cmp.w	fp, #14
 80079e2:	f300 814a 	bgt.w	8007c7a <_dtoa_r+0x722>
 80079e6:	4b6b      	ldr	r3, [pc, #428]	; (8007b94 <_dtoa_r+0x63c>)
 80079e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f280 80dc 	bge.w	8007bb0 <_dtoa_r+0x658>
 80079f8:	9b04      	ldr	r3, [sp, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f300 80d8 	bgt.w	8007bb0 <_dtoa_r+0x658>
 8007a00:	f040 826f 	bne.w	8007ee2 <_dtoa_r+0x98a>
 8007a04:	4b68      	ldr	r3, [pc, #416]	; (8007ba8 <_dtoa_r+0x650>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	4640      	mov	r0, r8
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	f7f8 fdcc 	bl	80005a8 <__aeabi_dmul>
 8007a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a14:	f7f9 f84e 	bl	8000ab4 <__aeabi_dcmpge>
 8007a18:	9e04      	ldr	r6, [sp, #16]
 8007a1a:	4637      	mov	r7, r6
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f040 8245 	bne.w	8007eac <_dtoa_r+0x954>
 8007a22:	9d00      	ldr	r5, [sp, #0]
 8007a24:	2331      	movs	r3, #49	; 0x31
 8007a26:	f805 3b01 	strb.w	r3, [r5], #1
 8007a2a:	f10b 0b01 	add.w	fp, fp, #1
 8007a2e:	e241      	b.n	8007eb4 <_dtoa_r+0x95c>
 8007a30:	07f2      	lsls	r2, r6, #31
 8007a32:	d505      	bpl.n	8007a40 <_dtoa_r+0x4e8>
 8007a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a38:	f7f8 fdb6 	bl	80005a8 <__aeabi_dmul>
 8007a3c:	3501      	adds	r5, #1
 8007a3e:	2301      	movs	r3, #1
 8007a40:	1076      	asrs	r6, r6, #1
 8007a42:	3708      	adds	r7, #8
 8007a44:	e773      	b.n	800792e <_dtoa_r+0x3d6>
 8007a46:	2502      	movs	r5, #2
 8007a48:	e775      	b.n	8007936 <_dtoa_r+0x3de>
 8007a4a:	9e04      	ldr	r6, [sp, #16]
 8007a4c:	465f      	mov	r7, fp
 8007a4e:	e792      	b.n	8007976 <_dtoa_r+0x41e>
 8007a50:	9900      	ldr	r1, [sp, #0]
 8007a52:	4b50      	ldr	r3, [pc, #320]	; (8007b94 <_dtoa_r+0x63c>)
 8007a54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a58:	4431      	add	r1, r6
 8007a5a:	9102      	str	r1, [sp, #8]
 8007a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a5e:	eeb0 9a47 	vmov.f32	s18, s14
 8007a62:	eef0 9a67 	vmov.f32	s19, s15
 8007a66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	d044      	beq.n	8007afc <_dtoa_r+0x5a4>
 8007a72:	494e      	ldr	r1, [pc, #312]	; (8007bac <_dtoa_r+0x654>)
 8007a74:	2000      	movs	r0, #0
 8007a76:	f7f8 fec1 	bl	80007fc <__aeabi_ddiv>
 8007a7a:	ec53 2b19 	vmov	r2, r3, d9
 8007a7e:	f7f8 fbdb 	bl	8000238 <__aeabi_dsub>
 8007a82:	9d00      	ldr	r5, [sp, #0]
 8007a84:	ec41 0b19 	vmov	d9, r0, r1
 8007a88:	4649      	mov	r1, r9
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	f7f9 f83c 	bl	8000b08 <__aeabi_d2iz>
 8007a90:	4606      	mov	r6, r0
 8007a92:	f7f8 fd1f 	bl	80004d4 <__aeabi_i2d>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f8 fbcb 	bl	8000238 <__aeabi_dsub>
 8007aa2:	3630      	adds	r6, #48	; 0x30
 8007aa4:	f805 6b01 	strb.w	r6, [r5], #1
 8007aa8:	ec53 2b19 	vmov	r2, r3, d9
 8007aac:	4680      	mov	r8, r0
 8007aae:	4689      	mov	r9, r1
 8007ab0:	f7f8 ffec 	bl	8000a8c <__aeabi_dcmplt>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d164      	bne.n	8007b82 <_dtoa_r+0x62a>
 8007ab8:	4642      	mov	r2, r8
 8007aba:	464b      	mov	r3, r9
 8007abc:	4937      	ldr	r1, [pc, #220]	; (8007b9c <_dtoa_r+0x644>)
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f7f8 fbba 	bl	8000238 <__aeabi_dsub>
 8007ac4:	ec53 2b19 	vmov	r2, r3, d9
 8007ac8:	f7f8 ffe0 	bl	8000a8c <__aeabi_dcmplt>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f040 80b6 	bne.w	8007c3e <_dtoa_r+0x6e6>
 8007ad2:	9b02      	ldr	r3, [sp, #8]
 8007ad4:	429d      	cmp	r5, r3
 8007ad6:	f43f af7c 	beq.w	80079d2 <_dtoa_r+0x47a>
 8007ada:	4b31      	ldr	r3, [pc, #196]	; (8007ba0 <_dtoa_r+0x648>)
 8007adc:	ec51 0b19 	vmov	r0, r1, d9
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f7f8 fd61 	bl	80005a8 <__aeabi_dmul>
 8007ae6:	4b2e      	ldr	r3, [pc, #184]	; (8007ba0 <_dtoa_r+0x648>)
 8007ae8:	ec41 0b19 	vmov	d9, r0, r1
 8007aec:	2200      	movs	r2, #0
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 fd59 	bl	80005a8 <__aeabi_dmul>
 8007af6:	4680      	mov	r8, r0
 8007af8:	4689      	mov	r9, r1
 8007afa:	e7c5      	b.n	8007a88 <_dtoa_r+0x530>
 8007afc:	ec51 0b17 	vmov	r0, r1, d7
 8007b00:	f7f8 fd52 	bl	80005a8 <__aeabi_dmul>
 8007b04:	9b02      	ldr	r3, [sp, #8]
 8007b06:	9d00      	ldr	r5, [sp, #0]
 8007b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b0a:	ec41 0b19 	vmov	d9, r0, r1
 8007b0e:	4649      	mov	r1, r9
 8007b10:	4640      	mov	r0, r8
 8007b12:	f7f8 fff9 	bl	8000b08 <__aeabi_d2iz>
 8007b16:	4606      	mov	r6, r0
 8007b18:	f7f8 fcdc 	bl	80004d4 <__aeabi_i2d>
 8007b1c:	3630      	adds	r6, #48	; 0x30
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	f7f8 fb87 	bl	8000238 <__aeabi_dsub>
 8007b2a:	f805 6b01 	strb.w	r6, [r5], #1
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	429d      	cmp	r5, r3
 8007b32:	4680      	mov	r8, r0
 8007b34:	4689      	mov	r9, r1
 8007b36:	f04f 0200 	mov.w	r2, #0
 8007b3a:	d124      	bne.n	8007b86 <_dtoa_r+0x62e>
 8007b3c:	4b1b      	ldr	r3, [pc, #108]	; (8007bac <_dtoa_r+0x654>)
 8007b3e:	ec51 0b19 	vmov	r0, r1, d9
 8007b42:	f7f8 fb7b 	bl	800023c <__adddf3>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	f7f8 ffbb 	bl	8000ac8 <__aeabi_dcmpgt>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d173      	bne.n	8007c3e <_dtoa_r+0x6e6>
 8007b56:	ec53 2b19 	vmov	r2, r3, d9
 8007b5a:	4914      	ldr	r1, [pc, #80]	; (8007bac <_dtoa_r+0x654>)
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f7f8 fb6b 	bl	8000238 <__aeabi_dsub>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4640      	mov	r0, r8
 8007b68:	4649      	mov	r1, r9
 8007b6a:	f7f8 ff8f 	bl	8000a8c <__aeabi_dcmplt>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	f43f af2f 	beq.w	80079d2 <_dtoa_r+0x47a>
 8007b74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b76:	1e6b      	subs	r3, r5, #1
 8007b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b7e:	2b30      	cmp	r3, #48	; 0x30
 8007b80:	d0f8      	beq.n	8007b74 <_dtoa_r+0x61c>
 8007b82:	46bb      	mov	fp, r7
 8007b84:	e04a      	b.n	8007c1c <_dtoa_r+0x6c4>
 8007b86:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <_dtoa_r+0x648>)
 8007b88:	f7f8 fd0e 	bl	80005a8 <__aeabi_dmul>
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	4689      	mov	r9, r1
 8007b90:	e7bd      	b.n	8007b0e <_dtoa_r+0x5b6>
 8007b92:	bf00      	nop
 8007b94:	080093b8 	.word	0x080093b8
 8007b98:	08009390 	.word	0x08009390
 8007b9c:	3ff00000 	.word	0x3ff00000
 8007ba0:	40240000 	.word	0x40240000
 8007ba4:	401c0000 	.word	0x401c0000
 8007ba8:	40140000 	.word	0x40140000
 8007bac:	3fe00000 	.word	0x3fe00000
 8007bb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bb4:	9d00      	ldr	r5, [sp, #0]
 8007bb6:	4642      	mov	r2, r8
 8007bb8:	464b      	mov	r3, r9
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 fe1d 	bl	80007fc <__aeabi_ddiv>
 8007bc2:	f7f8 ffa1 	bl	8000b08 <__aeabi_d2iz>
 8007bc6:	9001      	str	r0, [sp, #4]
 8007bc8:	f7f8 fc84 	bl	80004d4 <__aeabi_i2d>
 8007bcc:	4642      	mov	r2, r8
 8007bce:	464b      	mov	r3, r9
 8007bd0:	f7f8 fcea 	bl	80005a8 <__aeabi_dmul>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f7f8 fb2c 	bl	8000238 <__aeabi_dsub>
 8007be0:	9e01      	ldr	r6, [sp, #4]
 8007be2:	9f04      	ldr	r7, [sp, #16]
 8007be4:	3630      	adds	r6, #48	; 0x30
 8007be6:	f805 6b01 	strb.w	r6, [r5], #1
 8007bea:	9e00      	ldr	r6, [sp, #0]
 8007bec:	1bae      	subs	r6, r5, r6
 8007bee:	42b7      	cmp	r7, r6
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	d134      	bne.n	8007c60 <_dtoa_r+0x708>
 8007bf6:	f7f8 fb21 	bl	800023c <__adddf3>
 8007bfa:	4642      	mov	r2, r8
 8007bfc:	464b      	mov	r3, r9
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460f      	mov	r7, r1
 8007c02:	f7f8 ff61 	bl	8000ac8 <__aeabi_dcmpgt>
 8007c06:	b9c8      	cbnz	r0, 8007c3c <_dtoa_r+0x6e4>
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	4639      	mov	r1, r7
 8007c10:	f7f8 ff32 	bl	8000a78 <__aeabi_dcmpeq>
 8007c14:	b110      	cbz	r0, 8007c1c <_dtoa_r+0x6c4>
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	07db      	lsls	r3, r3, #31
 8007c1a:	d40f      	bmi.n	8007c3c <_dtoa_r+0x6e4>
 8007c1c:	4651      	mov	r1, sl
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 fb18 	bl	8008254 <_Bfree>
 8007c24:	2300      	movs	r3, #0
 8007c26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c28:	702b      	strb	r3, [r5, #0]
 8007c2a:	f10b 0301 	add.w	r3, fp, #1
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f43f ace2 	beq.w	80075fc <_dtoa_r+0xa4>
 8007c38:	601d      	str	r5, [r3, #0]
 8007c3a:	e4df      	b.n	80075fc <_dtoa_r+0xa4>
 8007c3c:	465f      	mov	r7, fp
 8007c3e:	462b      	mov	r3, r5
 8007c40:	461d      	mov	r5, r3
 8007c42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c46:	2a39      	cmp	r2, #57	; 0x39
 8007c48:	d106      	bne.n	8007c58 <_dtoa_r+0x700>
 8007c4a:	9a00      	ldr	r2, [sp, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d1f7      	bne.n	8007c40 <_dtoa_r+0x6e8>
 8007c50:	9900      	ldr	r1, [sp, #0]
 8007c52:	2230      	movs	r2, #48	; 0x30
 8007c54:	3701      	adds	r7, #1
 8007c56:	700a      	strb	r2, [r1, #0]
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	3201      	adds	r2, #1
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e790      	b.n	8007b82 <_dtoa_r+0x62a>
 8007c60:	4ba3      	ldr	r3, [pc, #652]	; (8007ef0 <_dtoa_r+0x998>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	f7f8 fca0 	bl	80005a8 <__aeabi_dmul>
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	f7f8 ff02 	bl	8000a78 <__aeabi_dcmpeq>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d09e      	beq.n	8007bb6 <_dtoa_r+0x65e>
 8007c78:	e7d0      	b.n	8007c1c <_dtoa_r+0x6c4>
 8007c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	f000 80ca 	beq.w	8007e16 <_dtoa_r+0x8be>
 8007c82:	9a07      	ldr	r2, [sp, #28]
 8007c84:	2a01      	cmp	r2, #1
 8007c86:	f300 80ad 	bgt.w	8007de4 <_dtoa_r+0x88c>
 8007c8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	f000 80a5 	beq.w	8007ddc <_dtoa_r+0x884>
 8007c92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c96:	9e08      	ldr	r6, [sp, #32]
 8007c98:	9d05      	ldr	r5, [sp, #20]
 8007c9a:	9a05      	ldr	r2, [sp, #20]
 8007c9c:	441a      	add	r2, r3
 8007c9e:	9205      	str	r2, [sp, #20]
 8007ca0:	9a06      	ldr	r2, [sp, #24]
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	441a      	add	r2, r3
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	9206      	str	r2, [sp, #24]
 8007caa:	f000 fb89 	bl	80083c0 <__i2b>
 8007cae:	4607      	mov	r7, r0
 8007cb0:	b165      	cbz	r5, 8007ccc <_dtoa_r+0x774>
 8007cb2:	9b06      	ldr	r3, [sp, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dd09      	ble.n	8007ccc <_dtoa_r+0x774>
 8007cb8:	42ab      	cmp	r3, r5
 8007cba:	9a05      	ldr	r2, [sp, #20]
 8007cbc:	bfa8      	it	ge
 8007cbe:	462b      	movge	r3, r5
 8007cc0:	1ad2      	subs	r2, r2, r3
 8007cc2:	9205      	str	r2, [sp, #20]
 8007cc4:	9a06      	ldr	r2, [sp, #24]
 8007cc6:	1aed      	subs	r5, r5, r3
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	9306      	str	r3, [sp, #24]
 8007ccc:	9b08      	ldr	r3, [sp, #32]
 8007cce:	b1f3      	cbz	r3, 8007d0e <_dtoa_r+0x7b6>
 8007cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 80a3 	beq.w	8007e1e <_dtoa_r+0x8c6>
 8007cd8:	2e00      	cmp	r6, #0
 8007cda:	dd10      	ble.n	8007cfe <_dtoa_r+0x7a6>
 8007cdc:	4639      	mov	r1, r7
 8007cde:	4632      	mov	r2, r6
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 fc2d 	bl	8008540 <__pow5mult>
 8007ce6:	4652      	mov	r2, sl
 8007ce8:	4601      	mov	r1, r0
 8007cea:	4607      	mov	r7, r0
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fb7d 	bl	80083ec <__multiply>
 8007cf2:	4651      	mov	r1, sl
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f000 faac 	bl	8008254 <_Bfree>
 8007cfc:	46c2      	mov	sl, r8
 8007cfe:	9b08      	ldr	r3, [sp, #32]
 8007d00:	1b9a      	subs	r2, r3, r6
 8007d02:	d004      	beq.n	8007d0e <_dtoa_r+0x7b6>
 8007d04:	4651      	mov	r1, sl
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 fc1a 	bl	8008540 <__pow5mult>
 8007d0c:	4682      	mov	sl, r0
 8007d0e:	2101      	movs	r1, #1
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fb55 	bl	80083c0 <__i2b>
 8007d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	f340 8081 	ble.w	8007e22 <_dtoa_r+0x8ca>
 8007d20:	461a      	mov	r2, r3
 8007d22:	4601      	mov	r1, r0
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 fc0b 	bl	8008540 <__pow5mult>
 8007d2a:	9b07      	ldr	r3, [sp, #28]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	4606      	mov	r6, r0
 8007d30:	dd7a      	ble.n	8007e28 <_dtoa_r+0x8d0>
 8007d32:	f04f 0800 	mov.w	r8, #0
 8007d36:	6933      	ldr	r3, [r6, #16]
 8007d38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d3c:	6918      	ldr	r0, [r3, #16]
 8007d3e:	f000 faf1 	bl	8008324 <__hi0bits>
 8007d42:	f1c0 0020 	rsb	r0, r0, #32
 8007d46:	9b06      	ldr	r3, [sp, #24]
 8007d48:	4418      	add	r0, r3
 8007d4a:	f010 001f 	ands.w	r0, r0, #31
 8007d4e:	f000 8094 	beq.w	8007e7a <_dtoa_r+0x922>
 8007d52:	f1c0 0320 	rsb	r3, r0, #32
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	f340 8085 	ble.w	8007e66 <_dtoa_r+0x90e>
 8007d5c:	9b05      	ldr	r3, [sp, #20]
 8007d5e:	f1c0 001c 	rsb	r0, r0, #28
 8007d62:	4403      	add	r3, r0
 8007d64:	9305      	str	r3, [sp, #20]
 8007d66:	9b06      	ldr	r3, [sp, #24]
 8007d68:	4403      	add	r3, r0
 8007d6a:	4405      	add	r5, r0
 8007d6c:	9306      	str	r3, [sp, #24]
 8007d6e:	9b05      	ldr	r3, [sp, #20]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dd05      	ble.n	8007d80 <_dtoa_r+0x828>
 8007d74:	4651      	mov	r1, sl
 8007d76:	461a      	mov	r2, r3
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fc3b 	bl	80085f4 <__lshift>
 8007d7e:	4682      	mov	sl, r0
 8007d80:	9b06      	ldr	r3, [sp, #24]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dd05      	ble.n	8007d92 <_dtoa_r+0x83a>
 8007d86:	4631      	mov	r1, r6
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 fc32 	bl	80085f4 <__lshift>
 8007d90:	4606      	mov	r6, r0
 8007d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d072      	beq.n	8007e7e <_dtoa_r+0x926>
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f000 fc96 	bl	80086cc <__mcmp>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	da6c      	bge.n	8007e7e <_dtoa_r+0x926>
 8007da4:	2300      	movs	r3, #0
 8007da6:	4651      	mov	r1, sl
 8007da8:	220a      	movs	r2, #10
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 fa74 	bl	8008298 <__multadd>
 8007db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007db6:	4682      	mov	sl, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 81b0 	beq.w	800811e <_dtoa_r+0xbc6>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	220a      	movs	r2, #10
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 fa67 	bl	8008298 <__multadd>
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	4607      	mov	r7, r0
 8007dd0:	f300 8096 	bgt.w	8007f00 <_dtoa_r+0x9a8>
 8007dd4:	9b07      	ldr	r3, [sp, #28]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	dc59      	bgt.n	8007e8e <_dtoa_r+0x936>
 8007dda:	e091      	b.n	8007f00 <_dtoa_r+0x9a8>
 8007ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007de2:	e758      	b.n	8007c96 <_dtoa_r+0x73e>
 8007de4:	9b04      	ldr	r3, [sp, #16]
 8007de6:	1e5e      	subs	r6, r3, #1
 8007de8:	9b08      	ldr	r3, [sp, #32]
 8007dea:	42b3      	cmp	r3, r6
 8007dec:	bfbf      	itttt	lt
 8007dee:	9b08      	ldrlt	r3, [sp, #32]
 8007df0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007df2:	9608      	strlt	r6, [sp, #32]
 8007df4:	1af3      	sublt	r3, r6, r3
 8007df6:	bfb4      	ite	lt
 8007df8:	18d2      	addlt	r2, r2, r3
 8007dfa:	1b9e      	subge	r6, r3, r6
 8007dfc:	9b04      	ldr	r3, [sp, #16]
 8007dfe:	bfbc      	itt	lt
 8007e00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007e02:	2600      	movlt	r6, #0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bfb7      	itett	lt
 8007e08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007e0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007e10:	1a9d      	sublt	r5, r3, r2
 8007e12:	2300      	movlt	r3, #0
 8007e14:	e741      	b.n	8007c9a <_dtoa_r+0x742>
 8007e16:	9e08      	ldr	r6, [sp, #32]
 8007e18:	9d05      	ldr	r5, [sp, #20]
 8007e1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007e1c:	e748      	b.n	8007cb0 <_dtoa_r+0x758>
 8007e1e:	9a08      	ldr	r2, [sp, #32]
 8007e20:	e770      	b.n	8007d04 <_dtoa_r+0x7ac>
 8007e22:	9b07      	ldr	r3, [sp, #28]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	dc19      	bgt.n	8007e5c <_dtoa_r+0x904>
 8007e28:	9b02      	ldr	r3, [sp, #8]
 8007e2a:	b9bb      	cbnz	r3, 8007e5c <_dtoa_r+0x904>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e32:	b99b      	cbnz	r3, 8007e5c <_dtoa_r+0x904>
 8007e34:	9b03      	ldr	r3, [sp, #12]
 8007e36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e3a:	0d1b      	lsrs	r3, r3, #20
 8007e3c:	051b      	lsls	r3, r3, #20
 8007e3e:	b183      	cbz	r3, 8007e62 <_dtoa_r+0x90a>
 8007e40:	9b05      	ldr	r3, [sp, #20]
 8007e42:	3301      	adds	r3, #1
 8007e44:	9305      	str	r3, [sp, #20]
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	9306      	str	r3, [sp, #24]
 8007e4c:	f04f 0801 	mov.w	r8, #1
 8007e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f47f af6f 	bne.w	8007d36 <_dtoa_r+0x7de>
 8007e58:	2001      	movs	r0, #1
 8007e5a:	e774      	b.n	8007d46 <_dtoa_r+0x7ee>
 8007e5c:	f04f 0800 	mov.w	r8, #0
 8007e60:	e7f6      	b.n	8007e50 <_dtoa_r+0x8f8>
 8007e62:	4698      	mov	r8, r3
 8007e64:	e7f4      	b.n	8007e50 <_dtoa_r+0x8f8>
 8007e66:	d082      	beq.n	8007d6e <_dtoa_r+0x816>
 8007e68:	9a05      	ldr	r2, [sp, #20]
 8007e6a:	331c      	adds	r3, #28
 8007e6c:	441a      	add	r2, r3
 8007e6e:	9205      	str	r2, [sp, #20]
 8007e70:	9a06      	ldr	r2, [sp, #24]
 8007e72:	441a      	add	r2, r3
 8007e74:	441d      	add	r5, r3
 8007e76:	9206      	str	r2, [sp, #24]
 8007e78:	e779      	b.n	8007d6e <_dtoa_r+0x816>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	e7f4      	b.n	8007e68 <_dtoa_r+0x910>
 8007e7e:	9b04      	ldr	r3, [sp, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	dc37      	bgt.n	8007ef4 <_dtoa_r+0x99c>
 8007e84:	9b07      	ldr	r3, [sp, #28]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	dd34      	ble.n	8007ef4 <_dtoa_r+0x99c>
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	b963      	cbnz	r3, 8007eac <_dtoa_r+0x954>
 8007e92:	4631      	mov	r1, r6
 8007e94:	2205      	movs	r2, #5
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 f9fe 	bl	8008298 <__multadd>
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	4650      	mov	r0, sl
 8007ea2:	f000 fc13 	bl	80086cc <__mcmp>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f73f adbb 	bgt.w	8007a22 <_dtoa_r+0x4ca>
 8007eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eae:	9d00      	ldr	r5, [sp, #0]
 8007eb0:	ea6f 0b03 	mvn.w	fp, r3
 8007eb4:	f04f 0800 	mov.w	r8, #0
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 f9ca 	bl	8008254 <_Bfree>
 8007ec0:	2f00      	cmp	r7, #0
 8007ec2:	f43f aeab 	beq.w	8007c1c <_dtoa_r+0x6c4>
 8007ec6:	f1b8 0f00 	cmp.w	r8, #0
 8007eca:	d005      	beq.n	8007ed8 <_dtoa_r+0x980>
 8007ecc:	45b8      	cmp	r8, r7
 8007ece:	d003      	beq.n	8007ed8 <_dtoa_r+0x980>
 8007ed0:	4641      	mov	r1, r8
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 f9be 	bl	8008254 <_Bfree>
 8007ed8:	4639      	mov	r1, r7
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 f9ba 	bl	8008254 <_Bfree>
 8007ee0:	e69c      	b.n	8007c1c <_dtoa_r+0x6c4>
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	4637      	mov	r7, r6
 8007ee6:	e7e1      	b.n	8007eac <_dtoa_r+0x954>
 8007ee8:	46bb      	mov	fp, r7
 8007eea:	4637      	mov	r7, r6
 8007eec:	e599      	b.n	8007a22 <_dtoa_r+0x4ca>
 8007eee:	bf00      	nop
 8007ef0:	40240000 	.word	0x40240000
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80c8 	beq.w	800808c <_dtoa_r+0xb34>
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	dd05      	ble.n	8007f10 <_dtoa_r+0x9b8>
 8007f04:	4639      	mov	r1, r7
 8007f06:	462a      	mov	r2, r5
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fb73 	bl	80085f4 <__lshift>
 8007f0e:	4607      	mov	r7, r0
 8007f10:	f1b8 0f00 	cmp.w	r8, #0
 8007f14:	d05b      	beq.n	8007fce <_dtoa_r+0xa76>
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 f95b 	bl	80081d4 <_Balloc>
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b928      	cbnz	r0, 8007f2e <_dtoa_r+0x9d6>
 8007f22:	4b83      	ldr	r3, [pc, #524]	; (8008130 <_dtoa_r+0xbd8>)
 8007f24:	4602      	mov	r2, r0
 8007f26:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007f2a:	f7ff bb2e 	b.w	800758a <_dtoa_r+0x32>
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	3202      	adds	r2, #2
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	f107 010c 	add.w	r1, r7, #12
 8007f38:	300c      	adds	r0, #12
 8007f3a:	f7ff fa76 	bl	800742a <memcpy>
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4629      	mov	r1, r5
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 fb56 	bl	80085f4 <__lshift>
 8007f48:	9b00      	ldr	r3, [sp, #0]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	9304      	str	r3, [sp, #16]
 8007f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f52:	4413      	add	r3, r2
 8007f54:	9308      	str	r3, [sp, #32]
 8007f56:	9b02      	ldr	r3, [sp, #8]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	46b8      	mov	r8, r7
 8007f5e:	9306      	str	r3, [sp, #24]
 8007f60:	4607      	mov	r7, r0
 8007f62:	9b04      	ldr	r3, [sp, #16]
 8007f64:	4631      	mov	r1, r6
 8007f66:	3b01      	subs	r3, #1
 8007f68:	4650      	mov	r0, sl
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	f7ff fa6b 	bl	8007446 <quorem>
 8007f70:	4641      	mov	r1, r8
 8007f72:	9002      	str	r0, [sp, #8]
 8007f74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f78:	4650      	mov	r0, sl
 8007f7a:	f000 fba7 	bl	80086cc <__mcmp>
 8007f7e:	463a      	mov	r2, r7
 8007f80:	9005      	str	r0, [sp, #20]
 8007f82:	4631      	mov	r1, r6
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fbbd 	bl	8008704 <__mdiff>
 8007f8a:	68c2      	ldr	r2, [r0, #12]
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	bb02      	cbnz	r2, 8007fd2 <_dtoa_r+0xa7a>
 8007f90:	4601      	mov	r1, r0
 8007f92:	4650      	mov	r0, sl
 8007f94:	f000 fb9a 	bl	80086cc <__mcmp>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa0:	f000 f958 	bl	8008254 <_Bfree>
 8007fa4:	9b07      	ldr	r3, [sp, #28]
 8007fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa8:	9d04      	ldr	r5, [sp, #16]
 8007faa:	ea43 0102 	orr.w	r1, r3, r2
 8007fae:	9b06      	ldr	r3, [sp, #24]
 8007fb0:	4319      	orrs	r1, r3
 8007fb2:	d110      	bne.n	8007fd6 <_dtoa_r+0xa7e>
 8007fb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fb8:	d029      	beq.n	800800e <_dtoa_r+0xab6>
 8007fba:	9b05      	ldr	r3, [sp, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dd02      	ble.n	8007fc6 <_dtoa_r+0xa6e>
 8007fc0:	9b02      	ldr	r3, [sp, #8]
 8007fc2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	f883 9000 	strb.w	r9, [r3]
 8007fcc:	e774      	b.n	8007eb8 <_dtoa_r+0x960>
 8007fce:	4638      	mov	r0, r7
 8007fd0:	e7ba      	b.n	8007f48 <_dtoa_r+0x9f0>
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	e7e1      	b.n	8007f9a <_dtoa_r+0xa42>
 8007fd6:	9b05      	ldr	r3, [sp, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	db04      	blt.n	8007fe6 <_dtoa_r+0xa8e>
 8007fdc:	9907      	ldr	r1, [sp, #28]
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	9906      	ldr	r1, [sp, #24]
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	d120      	bne.n	8008028 <_dtoa_r+0xad0>
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	dded      	ble.n	8007fc6 <_dtoa_r+0xa6e>
 8007fea:	4651      	mov	r1, sl
 8007fec:	2201      	movs	r2, #1
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 fb00 	bl	80085f4 <__lshift>
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	f000 fb68 	bl	80086cc <__mcmp>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	dc03      	bgt.n	8008008 <_dtoa_r+0xab0>
 8008000:	d1e1      	bne.n	8007fc6 <_dtoa_r+0xa6e>
 8008002:	f019 0f01 	tst.w	r9, #1
 8008006:	d0de      	beq.n	8007fc6 <_dtoa_r+0xa6e>
 8008008:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800800c:	d1d8      	bne.n	8007fc0 <_dtoa_r+0xa68>
 800800e:	9a01      	ldr	r2, [sp, #4]
 8008010:	2339      	movs	r3, #57	; 0x39
 8008012:	7013      	strb	r3, [r2, #0]
 8008014:	462b      	mov	r3, r5
 8008016:	461d      	mov	r5, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800801e:	2a39      	cmp	r2, #57	; 0x39
 8008020:	d06c      	beq.n	80080fc <_dtoa_r+0xba4>
 8008022:	3201      	adds	r2, #1
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e747      	b.n	8007eb8 <_dtoa_r+0x960>
 8008028:	2a00      	cmp	r2, #0
 800802a:	dd07      	ble.n	800803c <_dtoa_r+0xae4>
 800802c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008030:	d0ed      	beq.n	800800e <_dtoa_r+0xab6>
 8008032:	9a01      	ldr	r2, [sp, #4]
 8008034:	f109 0301 	add.w	r3, r9, #1
 8008038:	7013      	strb	r3, [r2, #0]
 800803a:	e73d      	b.n	8007eb8 <_dtoa_r+0x960>
 800803c:	9b04      	ldr	r3, [sp, #16]
 800803e:	9a08      	ldr	r2, [sp, #32]
 8008040:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008044:	4293      	cmp	r3, r2
 8008046:	d043      	beq.n	80080d0 <_dtoa_r+0xb78>
 8008048:	4651      	mov	r1, sl
 800804a:	2300      	movs	r3, #0
 800804c:	220a      	movs	r2, #10
 800804e:	4620      	mov	r0, r4
 8008050:	f000 f922 	bl	8008298 <__multadd>
 8008054:	45b8      	cmp	r8, r7
 8008056:	4682      	mov	sl, r0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	f04f 020a 	mov.w	r2, #10
 8008060:	4641      	mov	r1, r8
 8008062:	4620      	mov	r0, r4
 8008064:	d107      	bne.n	8008076 <_dtoa_r+0xb1e>
 8008066:	f000 f917 	bl	8008298 <__multadd>
 800806a:	4680      	mov	r8, r0
 800806c:	4607      	mov	r7, r0
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	3301      	adds	r3, #1
 8008072:	9304      	str	r3, [sp, #16]
 8008074:	e775      	b.n	8007f62 <_dtoa_r+0xa0a>
 8008076:	f000 f90f 	bl	8008298 <__multadd>
 800807a:	4639      	mov	r1, r7
 800807c:	4680      	mov	r8, r0
 800807e:	2300      	movs	r3, #0
 8008080:	220a      	movs	r2, #10
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f908 	bl	8008298 <__multadd>
 8008088:	4607      	mov	r7, r0
 800808a:	e7f0      	b.n	800806e <_dtoa_r+0xb16>
 800808c:	9b04      	ldr	r3, [sp, #16]
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	9d00      	ldr	r5, [sp, #0]
 8008092:	4631      	mov	r1, r6
 8008094:	4650      	mov	r0, sl
 8008096:	f7ff f9d6 	bl	8007446 <quorem>
 800809a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800809e:	9b00      	ldr	r3, [sp, #0]
 80080a0:	f805 9b01 	strb.w	r9, [r5], #1
 80080a4:	1aea      	subs	r2, r5, r3
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	4293      	cmp	r3, r2
 80080aa:	dd07      	ble.n	80080bc <_dtoa_r+0xb64>
 80080ac:	4651      	mov	r1, sl
 80080ae:	2300      	movs	r3, #0
 80080b0:	220a      	movs	r2, #10
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 f8f0 	bl	8008298 <__multadd>
 80080b8:	4682      	mov	sl, r0
 80080ba:	e7ea      	b.n	8008092 <_dtoa_r+0xb3a>
 80080bc:	9b01      	ldr	r3, [sp, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bfc8      	it	gt
 80080c2:	461d      	movgt	r5, r3
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	bfd8      	it	le
 80080c8:	2501      	movle	r5, #1
 80080ca:	441d      	add	r5, r3
 80080cc:	f04f 0800 	mov.w	r8, #0
 80080d0:	4651      	mov	r1, sl
 80080d2:	2201      	movs	r2, #1
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fa8d 	bl	80085f4 <__lshift>
 80080da:	4631      	mov	r1, r6
 80080dc:	4682      	mov	sl, r0
 80080de:	f000 faf5 	bl	80086cc <__mcmp>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	dc96      	bgt.n	8008014 <_dtoa_r+0xabc>
 80080e6:	d102      	bne.n	80080ee <_dtoa_r+0xb96>
 80080e8:	f019 0f01 	tst.w	r9, #1
 80080ec:	d192      	bne.n	8008014 <_dtoa_r+0xabc>
 80080ee:	462b      	mov	r3, r5
 80080f0:	461d      	mov	r5, r3
 80080f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080f6:	2a30      	cmp	r2, #48	; 0x30
 80080f8:	d0fa      	beq.n	80080f0 <_dtoa_r+0xb98>
 80080fa:	e6dd      	b.n	8007eb8 <_dtoa_r+0x960>
 80080fc:	9a00      	ldr	r2, [sp, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d189      	bne.n	8008016 <_dtoa_r+0xabe>
 8008102:	f10b 0b01 	add.w	fp, fp, #1
 8008106:	2331      	movs	r3, #49	; 0x31
 8008108:	e796      	b.n	8008038 <_dtoa_r+0xae0>
 800810a:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <_dtoa_r+0xbdc>)
 800810c:	f7ff ba99 	b.w	8007642 <_dtoa_r+0xea>
 8008110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008112:	2b00      	cmp	r3, #0
 8008114:	f47f aa6d 	bne.w	80075f2 <_dtoa_r+0x9a>
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <_dtoa_r+0xbe0>)
 800811a:	f7ff ba92 	b.w	8007642 <_dtoa_r+0xea>
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	dcb5      	bgt.n	8008090 <_dtoa_r+0xb38>
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	2b02      	cmp	r3, #2
 8008128:	f73f aeb1 	bgt.w	8007e8e <_dtoa_r+0x936>
 800812c:	e7b0      	b.n	8008090 <_dtoa_r+0xb38>
 800812e:	bf00      	nop
 8008130:	08009320 	.word	0x08009320
 8008134:	08009280 	.word	0x08009280
 8008138:	080092a4 	.word	0x080092a4

0800813c <_free_r>:
 800813c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800813e:	2900      	cmp	r1, #0
 8008140:	d044      	beq.n	80081cc <_free_r+0x90>
 8008142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008146:	9001      	str	r0, [sp, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f1a1 0404 	sub.w	r4, r1, #4
 800814e:	bfb8      	it	lt
 8008150:	18e4      	addlt	r4, r4, r3
 8008152:	f7fe fa61 	bl	8006618 <__malloc_lock>
 8008156:	4a1e      	ldr	r2, [pc, #120]	; (80081d0 <_free_r+0x94>)
 8008158:	9801      	ldr	r0, [sp, #4]
 800815a:	6813      	ldr	r3, [r2, #0]
 800815c:	b933      	cbnz	r3, 800816c <_free_r+0x30>
 800815e:	6063      	str	r3, [r4, #4]
 8008160:	6014      	str	r4, [r2, #0]
 8008162:	b003      	add	sp, #12
 8008164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008168:	f7fe ba5c 	b.w	8006624 <__malloc_unlock>
 800816c:	42a3      	cmp	r3, r4
 800816e:	d908      	bls.n	8008182 <_free_r+0x46>
 8008170:	6825      	ldr	r5, [r4, #0]
 8008172:	1961      	adds	r1, r4, r5
 8008174:	428b      	cmp	r3, r1
 8008176:	bf01      	itttt	eq
 8008178:	6819      	ldreq	r1, [r3, #0]
 800817a:	685b      	ldreq	r3, [r3, #4]
 800817c:	1949      	addeq	r1, r1, r5
 800817e:	6021      	streq	r1, [r4, #0]
 8008180:	e7ed      	b.n	800815e <_free_r+0x22>
 8008182:	461a      	mov	r2, r3
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	b10b      	cbz	r3, 800818c <_free_r+0x50>
 8008188:	42a3      	cmp	r3, r4
 800818a:	d9fa      	bls.n	8008182 <_free_r+0x46>
 800818c:	6811      	ldr	r1, [r2, #0]
 800818e:	1855      	adds	r5, r2, r1
 8008190:	42a5      	cmp	r5, r4
 8008192:	d10b      	bne.n	80081ac <_free_r+0x70>
 8008194:	6824      	ldr	r4, [r4, #0]
 8008196:	4421      	add	r1, r4
 8008198:	1854      	adds	r4, r2, r1
 800819a:	42a3      	cmp	r3, r4
 800819c:	6011      	str	r1, [r2, #0]
 800819e:	d1e0      	bne.n	8008162 <_free_r+0x26>
 80081a0:	681c      	ldr	r4, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	6053      	str	r3, [r2, #4]
 80081a6:	440c      	add	r4, r1
 80081a8:	6014      	str	r4, [r2, #0]
 80081aa:	e7da      	b.n	8008162 <_free_r+0x26>
 80081ac:	d902      	bls.n	80081b4 <_free_r+0x78>
 80081ae:	230c      	movs	r3, #12
 80081b0:	6003      	str	r3, [r0, #0]
 80081b2:	e7d6      	b.n	8008162 <_free_r+0x26>
 80081b4:	6825      	ldr	r5, [r4, #0]
 80081b6:	1961      	adds	r1, r4, r5
 80081b8:	428b      	cmp	r3, r1
 80081ba:	bf04      	itt	eq
 80081bc:	6819      	ldreq	r1, [r3, #0]
 80081be:	685b      	ldreq	r3, [r3, #4]
 80081c0:	6063      	str	r3, [r4, #4]
 80081c2:	bf04      	itt	eq
 80081c4:	1949      	addeq	r1, r1, r5
 80081c6:	6021      	streq	r1, [r4, #0]
 80081c8:	6054      	str	r4, [r2, #4]
 80081ca:	e7ca      	b.n	8008162 <_free_r+0x26>
 80081cc:	b003      	add	sp, #12
 80081ce:	bd30      	pop	{r4, r5, pc}
 80081d0:	200005b0 	.word	0x200005b0

080081d4 <_Balloc>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	69c6      	ldr	r6, [r0, #28]
 80081d8:	4604      	mov	r4, r0
 80081da:	460d      	mov	r5, r1
 80081dc:	b976      	cbnz	r6, 80081fc <_Balloc+0x28>
 80081de:	2010      	movs	r0, #16
 80081e0:	f7fe f96a 	bl	80064b8 <malloc>
 80081e4:	4602      	mov	r2, r0
 80081e6:	61e0      	str	r0, [r4, #28]
 80081e8:	b920      	cbnz	r0, 80081f4 <_Balloc+0x20>
 80081ea:	4b18      	ldr	r3, [pc, #96]	; (800824c <_Balloc+0x78>)
 80081ec:	4818      	ldr	r0, [pc, #96]	; (8008250 <_Balloc+0x7c>)
 80081ee:	216b      	movs	r1, #107	; 0x6b
 80081f0:	f000 fde2 	bl	8008db8 <__assert_func>
 80081f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081f8:	6006      	str	r6, [r0, #0]
 80081fa:	60c6      	str	r6, [r0, #12]
 80081fc:	69e6      	ldr	r6, [r4, #28]
 80081fe:	68f3      	ldr	r3, [r6, #12]
 8008200:	b183      	cbz	r3, 8008224 <_Balloc+0x50>
 8008202:	69e3      	ldr	r3, [r4, #28]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800820a:	b9b8      	cbnz	r0, 800823c <_Balloc+0x68>
 800820c:	2101      	movs	r1, #1
 800820e:	fa01 f605 	lsl.w	r6, r1, r5
 8008212:	1d72      	adds	r2, r6, #5
 8008214:	0092      	lsls	r2, r2, #2
 8008216:	4620      	mov	r0, r4
 8008218:	f000 fdec 	bl	8008df4 <_calloc_r>
 800821c:	b160      	cbz	r0, 8008238 <_Balloc+0x64>
 800821e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008222:	e00e      	b.n	8008242 <_Balloc+0x6e>
 8008224:	2221      	movs	r2, #33	; 0x21
 8008226:	2104      	movs	r1, #4
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fde3 	bl	8008df4 <_calloc_r>
 800822e:	69e3      	ldr	r3, [r4, #28]
 8008230:	60f0      	str	r0, [r6, #12]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e4      	bne.n	8008202 <_Balloc+0x2e>
 8008238:	2000      	movs	r0, #0
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	6802      	ldr	r2, [r0, #0]
 800823e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008242:	2300      	movs	r3, #0
 8008244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008248:	e7f7      	b.n	800823a <_Balloc+0x66>
 800824a:	bf00      	nop
 800824c:	080092b1 	.word	0x080092b1
 8008250:	08009331 	.word	0x08009331

08008254 <_Bfree>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	69c6      	ldr	r6, [r0, #28]
 8008258:	4605      	mov	r5, r0
 800825a:	460c      	mov	r4, r1
 800825c:	b976      	cbnz	r6, 800827c <_Bfree+0x28>
 800825e:	2010      	movs	r0, #16
 8008260:	f7fe f92a 	bl	80064b8 <malloc>
 8008264:	4602      	mov	r2, r0
 8008266:	61e8      	str	r0, [r5, #28]
 8008268:	b920      	cbnz	r0, 8008274 <_Bfree+0x20>
 800826a:	4b09      	ldr	r3, [pc, #36]	; (8008290 <_Bfree+0x3c>)
 800826c:	4809      	ldr	r0, [pc, #36]	; (8008294 <_Bfree+0x40>)
 800826e:	218f      	movs	r1, #143	; 0x8f
 8008270:	f000 fda2 	bl	8008db8 <__assert_func>
 8008274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008278:	6006      	str	r6, [r0, #0]
 800827a:	60c6      	str	r6, [r0, #12]
 800827c:	b13c      	cbz	r4, 800828e <_Bfree+0x3a>
 800827e:	69eb      	ldr	r3, [r5, #28]
 8008280:	6862      	ldr	r2, [r4, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008288:	6021      	str	r1, [r4, #0]
 800828a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	080092b1 	.word	0x080092b1
 8008294:	08009331 	.word	0x08009331

08008298 <__multadd>:
 8008298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829c:	690d      	ldr	r5, [r1, #16]
 800829e:	4607      	mov	r7, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	461e      	mov	r6, r3
 80082a4:	f101 0c14 	add.w	ip, r1, #20
 80082a8:	2000      	movs	r0, #0
 80082aa:	f8dc 3000 	ldr.w	r3, [ip]
 80082ae:	b299      	uxth	r1, r3
 80082b0:	fb02 6101 	mla	r1, r2, r1, r6
 80082b4:	0c1e      	lsrs	r6, r3, #16
 80082b6:	0c0b      	lsrs	r3, r1, #16
 80082b8:	fb02 3306 	mla	r3, r2, r6, r3
 80082bc:	b289      	uxth	r1, r1
 80082be:	3001      	adds	r0, #1
 80082c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082c4:	4285      	cmp	r5, r0
 80082c6:	f84c 1b04 	str.w	r1, [ip], #4
 80082ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082ce:	dcec      	bgt.n	80082aa <__multadd+0x12>
 80082d0:	b30e      	cbz	r6, 8008316 <__multadd+0x7e>
 80082d2:	68a3      	ldr	r3, [r4, #8]
 80082d4:	42ab      	cmp	r3, r5
 80082d6:	dc19      	bgt.n	800830c <__multadd+0x74>
 80082d8:	6861      	ldr	r1, [r4, #4]
 80082da:	4638      	mov	r0, r7
 80082dc:	3101      	adds	r1, #1
 80082de:	f7ff ff79 	bl	80081d4 <_Balloc>
 80082e2:	4680      	mov	r8, r0
 80082e4:	b928      	cbnz	r0, 80082f2 <__multadd+0x5a>
 80082e6:	4602      	mov	r2, r0
 80082e8:	4b0c      	ldr	r3, [pc, #48]	; (800831c <__multadd+0x84>)
 80082ea:	480d      	ldr	r0, [pc, #52]	; (8008320 <__multadd+0x88>)
 80082ec:	21ba      	movs	r1, #186	; 0xba
 80082ee:	f000 fd63 	bl	8008db8 <__assert_func>
 80082f2:	6922      	ldr	r2, [r4, #16]
 80082f4:	3202      	adds	r2, #2
 80082f6:	f104 010c 	add.w	r1, r4, #12
 80082fa:	0092      	lsls	r2, r2, #2
 80082fc:	300c      	adds	r0, #12
 80082fe:	f7ff f894 	bl	800742a <memcpy>
 8008302:	4621      	mov	r1, r4
 8008304:	4638      	mov	r0, r7
 8008306:	f7ff ffa5 	bl	8008254 <_Bfree>
 800830a:	4644      	mov	r4, r8
 800830c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008310:	3501      	adds	r5, #1
 8008312:	615e      	str	r6, [r3, #20]
 8008314:	6125      	str	r5, [r4, #16]
 8008316:	4620      	mov	r0, r4
 8008318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831c:	08009320 	.word	0x08009320
 8008320:	08009331 	.word	0x08009331

08008324 <__hi0bits>:
 8008324:	0c03      	lsrs	r3, r0, #16
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	b9d3      	cbnz	r3, 8008360 <__hi0bits+0x3c>
 800832a:	0400      	lsls	r0, r0, #16
 800832c:	2310      	movs	r3, #16
 800832e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008332:	bf04      	itt	eq
 8008334:	0200      	lsleq	r0, r0, #8
 8008336:	3308      	addeq	r3, #8
 8008338:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800833c:	bf04      	itt	eq
 800833e:	0100      	lsleq	r0, r0, #4
 8008340:	3304      	addeq	r3, #4
 8008342:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008346:	bf04      	itt	eq
 8008348:	0080      	lsleq	r0, r0, #2
 800834a:	3302      	addeq	r3, #2
 800834c:	2800      	cmp	r0, #0
 800834e:	db05      	blt.n	800835c <__hi0bits+0x38>
 8008350:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008354:	f103 0301 	add.w	r3, r3, #1
 8008358:	bf08      	it	eq
 800835a:	2320      	moveq	r3, #32
 800835c:	4618      	mov	r0, r3
 800835e:	4770      	bx	lr
 8008360:	2300      	movs	r3, #0
 8008362:	e7e4      	b.n	800832e <__hi0bits+0xa>

08008364 <__lo0bits>:
 8008364:	6803      	ldr	r3, [r0, #0]
 8008366:	f013 0207 	ands.w	r2, r3, #7
 800836a:	d00c      	beq.n	8008386 <__lo0bits+0x22>
 800836c:	07d9      	lsls	r1, r3, #31
 800836e:	d422      	bmi.n	80083b6 <__lo0bits+0x52>
 8008370:	079a      	lsls	r2, r3, #30
 8008372:	bf49      	itett	mi
 8008374:	085b      	lsrmi	r3, r3, #1
 8008376:	089b      	lsrpl	r3, r3, #2
 8008378:	6003      	strmi	r3, [r0, #0]
 800837a:	2201      	movmi	r2, #1
 800837c:	bf5c      	itt	pl
 800837e:	6003      	strpl	r3, [r0, #0]
 8008380:	2202      	movpl	r2, #2
 8008382:	4610      	mov	r0, r2
 8008384:	4770      	bx	lr
 8008386:	b299      	uxth	r1, r3
 8008388:	b909      	cbnz	r1, 800838e <__lo0bits+0x2a>
 800838a:	0c1b      	lsrs	r3, r3, #16
 800838c:	2210      	movs	r2, #16
 800838e:	b2d9      	uxtb	r1, r3
 8008390:	b909      	cbnz	r1, 8008396 <__lo0bits+0x32>
 8008392:	3208      	adds	r2, #8
 8008394:	0a1b      	lsrs	r3, r3, #8
 8008396:	0719      	lsls	r1, r3, #28
 8008398:	bf04      	itt	eq
 800839a:	091b      	lsreq	r3, r3, #4
 800839c:	3204      	addeq	r2, #4
 800839e:	0799      	lsls	r1, r3, #30
 80083a0:	bf04      	itt	eq
 80083a2:	089b      	lsreq	r3, r3, #2
 80083a4:	3202      	addeq	r2, #2
 80083a6:	07d9      	lsls	r1, r3, #31
 80083a8:	d403      	bmi.n	80083b2 <__lo0bits+0x4e>
 80083aa:	085b      	lsrs	r3, r3, #1
 80083ac:	f102 0201 	add.w	r2, r2, #1
 80083b0:	d003      	beq.n	80083ba <__lo0bits+0x56>
 80083b2:	6003      	str	r3, [r0, #0]
 80083b4:	e7e5      	b.n	8008382 <__lo0bits+0x1e>
 80083b6:	2200      	movs	r2, #0
 80083b8:	e7e3      	b.n	8008382 <__lo0bits+0x1e>
 80083ba:	2220      	movs	r2, #32
 80083bc:	e7e1      	b.n	8008382 <__lo0bits+0x1e>
	...

080083c0 <__i2b>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	460c      	mov	r4, r1
 80083c4:	2101      	movs	r1, #1
 80083c6:	f7ff ff05 	bl	80081d4 <_Balloc>
 80083ca:	4602      	mov	r2, r0
 80083cc:	b928      	cbnz	r0, 80083da <__i2b+0x1a>
 80083ce:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <__i2b+0x24>)
 80083d0:	4805      	ldr	r0, [pc, #20]	; (80083e8 <__i2b+0x28>)
 80083d2:	f240 1145 	movw	r1, #325	; 0x145
 80083d6:	f000 fcef 	bl	8008db8 <__assert_func>
 80083da:	2301      	movs	r3, #1
 80083dc:	6144      	str	r4, [r0, #20]
 80083de:	6103      	str	r3, [r0, #16]
 80083e0:	bd10      	pop	{r4, pc}
 80083e2:	bf00      	nop
 80083e4:	08009320 	.word	0x08009320
 80083e8:	08009331 	.word	0x08009331

080083ec <__multiply>:
 80083ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f0:	4691      	mov	r9, r2
 80083f2:	690a      	ldr	r2, [r1, #16]
 80083f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	bfb8      	it	lt
 80083fc:	460b      	movlt	r3, r1
 80083fe:	460c      	mov	r4, r1
 8008400:	bfbc      	itt	lt
 8008402:	464c      	movlt	r4, r9
 8008404:	4699      	movlt	r9, r3
 8008406:	6927      	ldr	r7, [r4, #16]
 8008408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800840c:	68a3      	ldr	r3, [r4, #8]
 800840e:	6861      	ldr	r1, [r4, #4]
 8008410:	eb07 060a 	add.w	r6, r7, sl
 8008414:	42b3      	cmp	r3, r6
 8008416:	b085      	sub	sp, #20
 8008418:	bfb8      	it	lt
 800841a:	3101      	addlt	r1, #1
 800841c:	f7ff feda 	bl	80081d4 <_Balloc>
 8008420:	b930      	cbnz	r0, 8008430 <__multiply+0x44>
 8008422:	4602      	mov	r2, r0
 8008424:	4b44      	ldr	r3, [pc, #272]	; (8008538 <__multiply+0x14c>)
 8008426:	4845      	ldr	r0, [pc, #276]	; (800853c <__multiply+0x150>)
 8008428:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800842c:	f000 fcc4 	bl	8008db8 <__assert_func>
 8008430:	f100 0514 	add.w	r5, r0, #20
 8008434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008438:	462b      	mov	r3, r5
 800843a:	2200      	movs	r2, #0
 800843c:	4543      	cmp	r3, r8
 800843e:	d321      	bcc.n	8008484 <__multiply+0x98>
 8008440:	f104 0314 	add.w	r3, r4, #20
 8008444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008448:	f109 0314 	add.w	r3, r9, #20
 800844c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008450:	9202      	str	r2, [sp, #8]
 8008452:	1b3a      	subs	r2, r7, r4
 8008454:	3a15      	subs	r2, #21
 8008456:	f022 0203 	bic.w	r2, r2, #3
 800845a:	3204      	adds	r2, #4
 800845c:	f104 0115 	add.w	r1, r4, #21
 8008460:	428f      	cmp	r7, r1
 8008462:	bf38      	it	cc
 8008464:	2204      	movcc	r2, #4
 8008466:	9201      	str	r2, [sp, #4]
 8008468:	9a02      	ldr	r2, [sp, #8]
 800846a:	9303      	str	r3, [sp, #12]
 800846c:	429a      	cmp	r2, r3
 800846e:	d80c      	bhi.n	800848a <__multiply+0x9e>
 8008470:	2e00      	cmp	r6, #0
 8008472:	dd03      	ble.n	800847c <__multiply+0x90>
 8008474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008478:	2b00      	cmp	r3, #0
 800847a:	d05b      	beq.n	8008534 <__multiply+0x148>
 800847c:	6106      	str	r6, [r0, #16]
 800847e:	b005      	add	sp, #20
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008484:	f843 2b04 	str.w	r2, [r3], #4
 8008488:	e7d8      	b.n	800843c <__multiply+0x50>
 800848a:	f8b3 a000 	ldrh.w	sl, [r3]
 800848e:	f1ba 0f00 	cmp.w	sl, #0
 8008492:	d024      	beq.n	80084de <__multiply+0xf2>
 8008494:	f104 0e14 	add.w	lr, r4, #20
 8008498:	46a9      	mov	r9, r5
 800849a:	f04f 0c00 	mov.w	ip, #0
 800849e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084a2:	f8d9 1000 	ldr.w	r1, [r9]
 80084a6:	fa1f fb82 	uxth.w	fp, r2
 80084aa:	b289      	uxth	r1, r1
 80084ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80084b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084b4:	f8d9 2000 	ldr.w	r2, [r9]
 80084b8:	4461      	add	r1, ip
 80084ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084be:	fb0a c20b 	mla	r2, sl, fp, ip
 80084c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084c6:	b289      	uxth	r1, r1
 80084c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084cc:	4577      	cmp	r7, lr
 80084ce:	f849 1b04 	str.w	r1, [r9], #4
 80084d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084d6:	d8e2      	bhi.n	800849e <__multiply+0xb2>
 80084d8:	9a01      	ldr	r2, [sp, #4]
 80084da:	f845 c002 	str.w	ip, [r5, r2]
 80084de:	9a03      	ldr	r2, [sp, #12]
 80084e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084e4:	3304      	adds	r3, #4
 80084e6:	f1b9 0f00 	cmp.w	r9, #0
 80084ea:	d021      	beq.n	8008530 <__multiply+0x144>
 80084ec:	6829      	ldr	r1, [r5, #0]
 80084ee:	f104 0c14 	add.w	ip, r4, #20
 80084f2:	46ae      	mov	lr, r5
 80084f4:	f04f 0a00 	mov.w	sl, #0
 80084f8:	f8bc b000 	ldrh.w	fp, [ip]
 80084fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008500:	fb09 220b 	mla	r2, r9, fp, r2
 8008504:	4452      	add	r2, sl
 8008506:	b289      	uxth	r1, r1
 8008508:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800850c:	f84e 1b04 	str.w	r1, [lr], #4
 8008510:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008514:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008518:	f8be 1000 	ldrh.w	r1, [lr]
 800851c:	fb09 110a 	mla	r1, r9, sl, r1
 8008520:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008524:	4567      	cmp	r7, ip
 8008526:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800852a:	d8e5      	bhi.n	80084f8 <__multiply+0x10c>
 800852c:	9a01      	ldr	r2, [sp, #4]
 800852e:	50a9      	str	r1, [r5, r2]
 8008530:	3504      	adds	r5, #4
 8008532:	e799      	b.n	8008468 <__multiply+0x7c>
 8008534:	3e01      	subs	r6, #1
 8008536:	e79b      	b.n	8008470 <__multiply+0x84>
 8008538:	08009320 	.word	0x08009320
 800853c:	08009331 	.word	0x08009331

08008540 <__pow5mult>:
 8008540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008544:	4615      	mov	r5, r2
 8008546:	f012 0203 	ands.w	r2, r2, #3
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	d007      	beq.n	8008560 <__pow5mult+0x20>
 8008550:	4c25      	ldr	r4, [pc, #148]	; (80085e8 <__pow5mult+0xa8>)
 8008552:	3a01      	subs	r2, #1
 8008554:	2300      	movs	r3, #0
 8008556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800855a:	f7ff fe9d 	bl	8008298 <__multadd>
 800855e:	4607      	mov	r7, r0
 8008560:	10ad      	asrs	r5, r5, #2
 8008562:	d03d      	beq.n	80085e0 <__pow5mult+0xa0>
 8008564:	69f4      	ldr	r4, [r6, #28]
 8008566:	b97c      	cbnz	r4, 8008588 <__pow5mult+0x48>
 8008568:	2010      	movs	r0, #16
 800856a:	f7fd ffa5 	bl	80064b8 <malloc>
 800856e:	4602      	mov	r2, r0
 8008570:	61f0      	str	r0, [r6, #28]
 8008572:	b928      	cbnz	r0, 8008580 <__pow5mult+0x40>
 8008574:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <__pow5mult+0xac>)
 8008576:	481e      	ldr	r0, [pc, #120]	; (80085f0 <__pow5mult+0xb0>)
 8008578:	f240 11b3 	movw	r1, #435	; 0x1b3
 800857c:	f000 fc1c 	bl	8008db8 <__assert_func>
 8008580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008584:	6004      	str	r4, [r0, #0]
 8008586:	60c4      	str	r4, [r0, #12]
 8008588:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800858c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008590:	b94c      	cbnz	r4, 80085a6 <__pow5mult+0x66>
 8008592:	f240 2171 	movw	r1, #625	; 0x271
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff ff12 	bl	80083c0 <__i2b>
 800859c:	2300      	movs	r3, #0
 800859e:	f8c8 0008 	str.w	r0, [r8, #8]
 80085a2:	4604      	mov	r4, r0
 80085a4:	6003      	str	r3, [r0, #0]
 80085a6:	f04f 0900 	mov.w	r9, #0
 80085aa:	07eb      	lsls	r3, r5, #31
 80085ac:	d50a      	bpl.n	80085c4 <__pow5mult+0x84>
 80085ae:	4639      	mov	r1, r7
 80085b0:	4622      	mov	r2, r4
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7ff ff1a 	bl	80083ec <__multiply>
 80085b8:	4639      	mov	r1, r7
 80085ba:	4680      	mov	r8, r0
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff fe49 	bl	8008254 <_Bfree>
 80085c2:	4647      	mov	r7, r8
 80085c4:	106d      	asrs	r5, r5, #1
 80085c6:	d00b      	beq.n	80085e0 <__pow5mult+0xa0>
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	b938      	cbnz	r0, 80085dc <__pow5mult+0x9c>
 80085cc:	4622      	mov	r2, r4
 80085ce:	4621      	mov	r1, r4
 80085d0:	4630      	mov	r0, r6
 80085d2:	f7ff ff0b 	bl	80083ec <__multiply>
 80085d6:	6020      	str	r0, [r4, #0]
 80085d8:	f8c0 9000 	str.w	r9, [r0]
 80085dc:	4604      	mov	r4, r0
 80085de:	e7e4      	b.n	80085aa <__pow5mult+0x6a>
 80085e0:	4638      	mov	r0, r7
 80085e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e6:	bf00      	nop
 80085e8:	08009480 	.word	0x08009480
 80085ec:	080092b1 	.word	0x080092b1
 80085f0:	08009331 	.word	0x08009331

080085f4 <__lshift>:
 80085f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	460c      	mov	r4, r1
 80085fa:	6849      	ldr	r1, [r1, #4]
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	4607      	mov	r7, r0
 8008606:	4691      	mov	r9, r2
 8008608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800860c:	f108 0601 	add.w	r6, r8, #1
 8008610:	42b3      	cmp	r3, r6
 8008612:	db0b      	blt.n	800862c <__lshift+0x38>
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff fddd 	bl	80081d4 <_Balloc>
 800861a:	4605      	mov	r5, r0
 800861c:	b948      	cbnz	r0, 8008632 <__lshift+0x3e>
 800861e:	4602      	mov	r2, r0
 8008620:	4b28      	ldr	r3, [pc, #160]	; (80086c4 <__lshift+0xd0>)
 8008622:	4829      	ldr	r0, [pc, #164]	; (80086c8 <__lshift+0xd4>)
 8008624:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008628:	f000 fbc6 	bl	8008db8 <__assert_func>
 800862c:	3101      	adds	r1, #1
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	e7ee      	b.n	8008610 <__lshift+0x1c>
 8008632:	2300      	movs	r3, #0
 8008634:	f100 0114 	add.w	r1, r0, #20
 8008638:	f100 0210 	add.w	r2, r0, #16
 800863c:	4618      	mov	r0, r3
 800863e:	4553      	cmp	r3, sl
 8008640:	db33      	blt.n	80086aa <__lshift+0xb6>
 8008642:	6920      	ldr	r0, [r4, #16]
 8008644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008648:	f104 0314 	add.w	r3, r4, #20
 800864c:	f019 091f 	ands.w	r9, r9, #31
 8008650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008654:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008658:	d02b      	beq.n	80086b2 <__lshift+0xbe>
 800865a:	f1c9 0e20 	rsb	lr, r9, #32
 800865e:	468a      	mov	sl, r1
 8008660:	2200      	movs	r2, #0
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	fa00 f009 	lsl.w	r0, r0, r9
 8008668:	4310      	orrs	r0, r2
 800866a:	f84a 0b04 	str.w	r0, [sl], #4
 800866e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008672:	459c      	cmp	ip, r3
 8008674:	fa22 f20e 	lsr.w	r2, r2, lr
 8008678:	d8f3      	bhi.n	8008662 <__lshift+0x6e>
 800867a:	ebac 0304 	sub.w	r3, ip, r4
 800867e:	3b15      	subs	r3, #21
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	3304      	adds	r3, #4
 8008686:	f104 0015 	add.w	r0, r4, #21
 800868a:	4584      	cmp	ip, r0
 800868c:	bf38      	it	cc
 800868e:	2304      	movcc	r3, #4
 8008690:	50ca      	str	r2, [r1, r3]
 8008692:	b10a      	cbz	r2, 8008698 <__lshift+0xa4>
 8008694:	f108 0602 	add.w	r6, r8, #2
 8008698:	3e01      	subs	r6, #1
 800869a:	4638      	mov	r0, r7
 800869c:	612e      	str	r6, [r5, #16]
 800869e:	4621      	mov	r1, r4
 80086a0:	f7ff fdd8 	bl	8008254 <_Bfree>
 80086a4:	4628      	mov	r0, r5
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80086ae:	3301      	adds	r3, #1
 80086b0:	e7c5      	b.n	800863e <__lshift+0x4a>
 80086b2:	3904      	subs	r1, #4
 80086b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80086bc:	459c      	cmp	ip, r3
 80086be:	d8f9      	bhi.n	80086b4 <__lshift+0xc0>
 80086c0:	e7ea      	b.n	8008698 <__lshift+0xa4>
 80086c2:	bf00      	nop
 80086c4:	08009320 	.word	0x08009320
 80086c8:	08009331 	.word	0x08009331

080086cc <__mcmp>:
 80086cc:	b530      	push	{r4, r5, lr}
 80086ce:	6902      	ldr	r2, [r0, #16]
 80086d0:	690c      	ldr	r4, [r1, #16]
 80086d2:	1b12      	subs	r2, r2, r4
 80086d4:	d10e      	bne.n	80086f4 <__mcmp+0x28>
 80086d6:	f100 0314 	add.w	r3, r0, #20
 80086da:	3114      	adds	r1, #20
 80086dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086ec:	42a5      	cmp	r5, r4
 80086ee:	d003      	beq.n	80086f8 <__mcmp+0x2c>
 80086f0:	d305      	bcc.n	80086fe <__mcmp+0x32>
 80086f2:	2201      	movs	r2, #1
 80086f4:	4610      	mov	r0, r2
 80086f6:	bd30      	pop	{r4, r5, pc}
 80086f8:	4283      	cmp	r3, r0
 80086fa:	d3f3      	bcc.n	80086e4 <__mcmp+0x18>
 80086fc:	e7fa      	b.n	80086f4 <__mcmp+0x28>
 80086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008702:	e7f7      	b.n	80086f4 <__mcmp+0x28>

08008704 <__mdiff>:
 8008704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	460c      	mov	r4, r1
 800870a:	4606      	mov	r6, r0
 800870c:	4611      	mov	r1, r2
 800870e:	4620      	mov	r0, r4
 8008710:	4690      	mov	r8, r2
 8008712:	f7ff ffdb 	bl	80086cc <__mcmp>
 8008716:	1e05      	subs	r5, r0, #0
 8008718:	d110      	bne.n	800873c <__mdiff+0x38>
 800871a:	4629      	mov	r1, r5
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff fd59 	bl	80081d4 <_Balloc>
 8008722:	b930      	cbnz	r0, 8008732 <__mdiff+0x2e>
 8008724:	4b3a      	ldr	r3, [pc, #232]	; (8008810 <__mdiff+0x10c>)
 8008726:	4602      	mov	r2, r0
 8008728:	f240 2137 	movw	r1, #567	; 0x237
 800872c:	4839      	ldr	r0, [pc, #228]	; (8008814 <__mdiff+0x110>)
 800872e:	f000 fb43 	bl	8008db8 <__assert_func>
 8008732:	2301      	movs	r3, #1
 8008734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	bfa4      	itt	ge
 800873e:	4643      	movge	r3, r8
 8008740:	46a0      	movge	r8, r4
 8008742:	4630      	mov	r0, r6
 8008744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008748:	bfa6      	itte	ge
 800874a:	461c      	movge	r4, r3
 800874c:	2500      	movge	r5, #0
 800874e:	2501      	movlt	r5, #1
 8008750:	f7ff fd40 	bl	80081d4 <_Balloc>
 8008754:	b920      	cbnz	r0, 8008760 <__mdiff+0x5c>
 8008756:	4b2e      	ldr	r3, [pc, #184]	; (8008810 <__mdiff+0x10c>)
 8008758:	4602      	mov	r2, r0
 800875a:	f240 2145 	movw	r1, #581	; 0x245
 800875e:	e7e5      	b.n	800872c <__mdiff+0x28>
 8008760:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008764:	6926      	ldr	r6, [r4, #16]
 8008766:	60c5      	str	r5, [r0, #12]
 8008768:	f104 0914 	add.w	r9, r4, #20
 800876c:	f108 0514 	add.w	r5, r8, #20
 8008770:	f100 0e14 	add.w	lr, r0, #20
 8008774:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008778:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800877c:	f108 0210 	add.w	r2, r8, #16
 8008780:	46f2      	mov	sl, lr
 8008782:	2100      	movs	r1, #0
 8008784:	f859 3b04 	ldr.w	r3, [r9], #4
 8008788:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800878c:	fa11 f88b 	uxtah	r8, r1, fp
 8008790:	b299      	uxth	r1, r3
 8008792:	0c1b      	lsrs	r3, r3, #16
 8008794:	eba8 0801 	sub.w	r8, r8, r1
 8008798:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800879c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087a0:	fa1f f888 	uxth.w	r8, r8
 80087a4:	1419      	asrs	r1, r3, #16
 80087a6:	454e      	cmp	r6, r9
 80087a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087ac:	f84a 3b04 	str.w	r3, [sl], #4
 80087b0:	d8e8      	bhi.n	8008784 <__mdiff+0x80>
 80087b2:	1b33      	subs	r3, r6, r4
 80087b4:	3b15      	subs	r3, #21
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	3304      	adds	r3, #4
 80087bc:	3415      	adds	r4, #21
 80087be:	42a6      	cmp	r6, r4
 80087c0:	bf38      	it	cc
 80087c2:	2304      	movcc	r3, #4
 80087c4:	441d      	add	r5, r3
 80087c6:	4473      	add	r3, lr
 80087c8:	469e      	mov	lr, r3
 80087ca:	462e      	mov	r6, r5
 80087cc:	4566      	cmp	r6, ip
 80087ce:	d30e      	bcc.n	80087ee <__mdiff+0xea>
 80087d0:	f10c 0203 	add.w	r2, ip, #3
 80087d4:	1b52      	subs	r2, r2, r5
 80087d6:	f022 0203 	bic.w	r2, r2, #3
 80087da:	3d03      	subs	r5, #3
 80087dc:	45ac      	cmp	ip, r5
 80087de:	bf38      	it	cc
 80087e0:	2200      	movcc	r2, #0
 80087e2:	4413      	add	r3, r2
 80087e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80087e8:	b17a      	cbz	r2, 800880a <__mdiff+0x106>
 80087ea:	6107      	str	r7, [r0, #16]
 80087ec:	e7a4      	b.n	8008738 <__mdiff+0x34>
 80087ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80087f2:	fa11 f288 	uxtah	r2, r1, r8
 80087f6:	1414      	asrs	r4, r2, #16
 80087f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087fc:	b292      	uxth	r2, r2
 80087fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008802:	f84e 2b04 	str.w	r2, [lr], #4
 8008806:	1421      	asrs	r1, r4, #16
 8008808:	e7e0      	b.n	80087cc <__mdiff+0xc8>
 800880a:	3f01      	subs	r7, #1
 800880c:	e7ea      	b.n	80087e4 <__mdiff+0xe0>
 800880e:	bf00      	nop
 8008810:	08009320 	.word	0x08009320
 8008814:	08009331 	.word	0x08009331

08008818 <__d2b>:
 8008818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800881c:	460f      	mov	r7, r1
 800881e:	2101      	movs	r1, #1
 8008820:	ec59 8b10 	vmov	r8, r9, d0
 8008824:	4616      	mov	r6, r2
 8008826:	f7ff fcd5 	bl	80081d4 <_Balloc>
 800882a:	4604      	mov	r4, r0
 800882c:	b930      	cbnz	r0, 800883c <__d2b+0x24>
 800882e:	4602      	mov	r2, r0
 8008830:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <__d2b+0xac>)
 8008832:	4825      	ldr	r0, [pc, #148]	; (80088c8 <__d2b+0xb0>)
 8008834:	f240 310f 	movw	r1, #783	; 0x30f
 8008838:	f000 fabe 	bl	8008db8 <__assert_func>
 800883c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008844:	bb2d      	cbnz	r5, 8008892 <__d2b+0x7a>
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	f1b8 0300 	subs.w	r3, r8, #0
 800884c:	d026      	beq.n	800889c <__d2b+0x84>
 800884e:	4668      	mov	r0, sp
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	f7ff fd87 	bl	8008364 <__lo0bits>
 8008856:	e9dd 1200 	ldrd	r1, r2, [sp]
 800885a:	b1e8      	cbz	r0, 8008898 <__d2b+0x80>
 800885c:	f1c0 0320 	rsb	r3, r0, #32
 8008860:	fa02 f303 	lsl.w	r3, r2, r3
 8008864:	430b      	orrs	r3, r1
 8008866:	40c2      	lsrs	r2, r0
 8008868:	6163      	str	r3, [r4, #20]
 800886a:	9201      	str	r2, [sp, #4]
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	61a3      	str	r3, [r4, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	bf14      	ite	ne
 8008874:	2202      	movne	r2, #2
 8008876:	2201      	moveq	r2, #1
 8008878:	6122      	str	r2, [r4, #16]
 800887a:	b1bd      	cbz	r5, 80088ac <__d2b+0x94>
 800887c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008880:	4405      	add	r5, r0
 8008882:	603d      	str	r5, [r7, #0]
 8008884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008888:	6030      	str	r0, [r6, #0]
 800888a:	4620      	mov	r0, r4
 800888c:	b003      	add	sp, #12
 800888e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008896:	e7d6      	b.n	8008846 <__d2b+0x2e>
 8008898:	6161      	str	r1, [r4, #20]
 800889a:	e7e7      	b.n	800886c <__d2b+0x54>
 800889c:	a801      	add	r0, sp, #4
 800889e:	f7ff fd61 	bl	8008364 <__lo0bits>
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	6163      	str	r3, [r4, #20]
 80088a6:	3020      	adds	r0, #32
 80088a8:	2201      	movs	r2, #1
 80088aa:	e7e5      	b.n	8008878 <__d2b+0x60>
 80088ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088b4:	6038      	str	r0, [r7, #0]
 80088b6:	6918      	ldr	r0, [r3, #16]
 80088b8:	f7ff fd34 	bl	8008324 <__hi0bits>
 80088bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088c0:	e7e2      	b.n	8008888 <__d2b+0x70>
 80088c2:	bf00      	nop
 80088c4:	08009320 	.word	0x08009320
 80088c8:	08009331 	.word	0x08009331

080088cc <__sfputc_r>:
 80088cc:	6893      	ldr	r3, [r2, #8]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	b410      	push	{r4}
 80088d4:	6093      	str	r3, [r2, #8]
 80088d6:	da08      	bge.n	80088ea <__sfputc_r+0x1e>
 80088d8:	6994      	ldr	r4, [r2, #24]
 80088da:	42a3      	cmp	r3, r4
 80088dc:	db01      	blt.n	80088e2 <__sfputc_r+0x16>
 80088de:	290a      	cmp	r1, #10
 80088e0:	d103      	bne.n	80088ea <__sfputc_r+0x1e>
 80088e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088e6:	f7fe bc7c 	b.w	80071e2 <__swbuf_r>
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	1c58      	adds	r0, r3, #1
 80088ee:	6010      	str	r0, [r2, #0]
 80088f0:	7019      	strb	r1, [r3, #0]
 80088f2:	4608      	mov	r0, r1
 80088f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <__sfputs_r>:
 80088fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fc:	4606      	mov	r6, r0
 80088fe:	460f      	mov	r7, r1
 8008900:	4614      	mov	r4, r2
 8008902:	18d5      	adds	r5, r2, r3
 8008904:	42ac      	cmp	r4, r5
 8008906:	d101      	bne.n	800890c <__sfputs_r+0x12>
 8008908:	2000      	movs	r0, #0
 800890a:	e007      	b.n	800891c <__sfputs_r+0x22>
 800890c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008910:	463a      	mov	r2, r7
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ffda 	bl	80088cc <__sfputc_r>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d1f3      	bne.n	8008904 <__sfputs_r+0xa>
 800891c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008920 <_vfiprintf_r>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	460d      	mov	r5, r1
 8008926:	b09d      	sub	sp, #116	; 0x74
 8008928:	4614      	mov	r4, r2
 800892a:	4698      	mov	r8, r3
 800892c:	4606      	mov	r6, r0
 800892e:	b118      	cbz	r0, 8008938 <_vfiprintf_r+0x18>
 8008930:	6a03      	ldr	r3, [r0, #32]
 8008932:	b90b      	cbnz	r3, 8008938 <_vfiprintf_r+0x18>
 8008934:	f7fe fb6e 	bl	8007014 <__sinit>
 8008938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800893a:	07d9      	lsls	r1, r3, #31
 800893c:	d405      	bmi.n	800894a <_vfiprintf_r+0x2a>
 800893e:	89ab      	ldrh	r3, [r5, #12]
 8008940:	059a      	lsls	r2, r3, #22
 8008942:	d402      	bmi.n	800894a <_vfiprintf_r+0x2a>
 8008944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008946:	f7fe fd6e 	bl	8007426 <__retarget_lock_acquire_recursive>
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	071b      	lsls	r3, r3, #28
 800894e:	d501      	bpl.n	8008954 <_vfiprintf_r+0x34>
 8008950:	692b      	ldr	r3, [r5, #16]
 8008952:	b99b      	cbnz	r3, 800897c <_vfiprintf_r+0x5c>
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f7fe fc80 	bl	800725c <__swsetup_r>
 800895c:	b170      	cbz	r0, 800897c <_vfiprintf_r+0x5c>
 800895e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008960:	07dc      	lsls	r4, r3, #31
 8008962:	d504      	bpl.n	800896e <_vfiprintf_r+0x4e>
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	b01d      	add	sp, #116	; 0x74
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	89ab      	ldrh	r3, [r5, #12]
 8008970:	0598      	lsls	r0, r3, #22
 8008972:	d4f7      	bmi.n	8008964 <_vfiprintf_r+0x44>
 8008974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008976:	f7fe fd57 	bl	8007428 <__retarget_lock_release_recursive>
 800897a:	e7f3      	b.n	8008964 <_vfiprintf_r+0x44>
 800897c:	2300      	movs	r3, #0
 800897e:	9309      	str	r3, [sp, #36]	; 0x24
 8008980:	2320      	movs	r3, #32
 8008982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008986:	f8cd 800c 	str.w	r8, [sp, #12]
 800898a:	2330      	movs	r3, #48	; 0x30
 800898c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008b40 <_vfiprintf_r+0x220>
 8008990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008994:	f04f 0901 	mov.w	r9, #1
 8008998:	4623      	mov	r3, r4
 800899a:	469a      	mov	sl, r3
 800899c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a0:	b10a      	cbz	r2, 80089a6 <_vfiprintf_r+0x86>
 80089a2:	2a25      	cmp	r2, #37	; 0x25
 80089a4:	d1f9      	bne.n	800899a <_vfiprintf_r+0x7a>
 80089a6:	ebba 0b04 	subs.w	fp, sl, r4
 80089aa:	d00b      	beq.n	80089c4 <_vfiprintf_r+0xa4>
 80089ac:	465b      	mov	r3, fp
 80089ae:	4622      	mov	r2, r4
 80089b0:	4629      	mov	r1, r5
 80089b2:	4630      	mov	r0, r6
 80089b4:	f7ff ffa1 	bl	80088fa <__sfputs_r>
 80089b8:	3001      	adds	r0, #1
 80089ba:	f000 80a9 	beq.w	8008b10 <_vfiprintf_r+0x1f0>
 80089be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089c0:	445a      	add	r2, fp
 80089c2:	9209      	str	r2, [sp, #36]	; 0x24
 80089c4:	f89a 3000 	ldrb.w	r3, [sl]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 80a1 	beq.w	8008b10 <_vfiprintf_r+0x1f0>
 80089ce:	2300      	movs	r3, #0
 80089d0:	f04f 32ff 	mov.w	r2, #4294967295
 80089d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089d8:	f10a 0a01 	add.w	sl, sl, #1
 80089dc:	9304      	str	r3, [sp, #16]
 80089de:	9307      	str	r3, [sp, #28]
 80089e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089e4:	931a      	str	r3, [sp, #104]	; 0x68
 80089e6:	4654      	mov	r4, sl
 80089e8:	2205      	movs	r2, #5
 80089ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ee:	4854      	ldr	r0, [pc, #336]	; (8008b40 <_vfiprintf_r+0x220>)
 80089f0:	f7f7 fbc6 	bl	8000180 <memchr>
 80089f4:	9a04      	ldr	r2, [sp, #16]
 80089f6:	b9d8      	cbnz	r0, 8008a30 <_vfiprintf_r+0x110>
 80089f8:	06d1      	lsls	r1, r2, #27
 80089fa:	bf44      	itt	mi
 80089fc:	2320      	movmi	r3, #32
 80089fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a02:	0713      	lsls	r3, r2, #28
 8008a04:	bf44      	itt	mi
 8008a06:	232b      	movmi	r3, #43	; 0x2b
 8008a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a10:	2b2a      	cmp	r3, #42	; 0x2a
 8008a12:	d015      	beq.n	8008a40 <_vfiprintf_r+0x120>
 8008a14:	9a07      	ldr	r2, [sp, #28]
 8008a16:	4654      	mov	r4, sl
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f04f 0c0a 	mov.w	ip, #10
 8008a1e:	4621      	mov	r1, r4
 8008a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a24:	3b30      	subs	r3, #48	; 0x30
 8008a26:	2b09      	cmp	r3, #9
 8008a28:	d94d      	bls.n	8008ac6 <_vfiprintf_r+0x1a6>
 8008a2a:	b1b0      	cbz	r0, 8008a5a <_vfiprintf_r+0x13a>
 8008a2c:	9207      	str	r2, [sp, #28]
 8008a2e:	e014      	b.n	8008a5a <_vfiprintf_r+0x13a>
 8008a30:	eba0 0308 	sub.w	r3, r0, r8
 8008a34:	fa09 f303 	lsl.w	r3, r9, r3
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	9304      	str	r3, [sp, #16]
 8008a3c:	46a2      	mov	sl, r4
 8008a3e:	e7d2      	b.n	80089e6 <_vfiprintf_r+0xc6>
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	1d19      	adds	r1, r3, #4
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	9103      	str	r1, [sp, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bfbb      	ittet	lt
 8008a4c:	425b      	neglt	r3, r3
 8008a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a52:	9307      	strge	r3, [sp, #28]
 8008a54:	9307      	strlt	r3, [sp, #28]
 8008a56:	bfb8      	it	lt
 8008a58:	9204      	strlt	r2, [sp, #16]
 8008a5a:	7823      	ldrb	r3, [r4, #0]
 8008a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a5e:	d10c      	bne.n	8008a7a <_vfiprintf_r+0x15a>
 8008a60:	7863      	ldrb	r3, [r4, #1]
 8008a62:	2b2a      	cmp	r3, #42	; 0x2a
 8008a64:	d134      	bne.n	8008ad0 <_vfiprintf_r+0x1b0>
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	1d1a      	adds	r2, r3, #4
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	9203      	str	r2, [sp, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bfb8      	it	lt
 8008a72:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a76:	3402      	adds	r4, #2
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008b50 <_vfiprintf_r+0x230>
 8008a7e:	7821      	ldrb	r1, [r4, #0]
 8008a80:	2203      	movs	r2, #3
 8008a82:	4650      	mov	r0, sl
 8008a84:	f7f7 fb7c 	bl	8000180 <memchr>
 8008a88:	b138      	cbz	r0, 8008a9a <_vfiprintf_r+0x17a>
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	eba0 000a 	sub.w	r0, r0, sl
 8008a90:	2240      	movs	r2, #64	; 0x40
 8008a92:	4082      	lsls	r2, r0
 8008a94:	4313      	orrs	r3, r2
 8008a96:	3401      	adds	r4, #1
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a9e:	4829      	ldr	r0, [pc, #164]	; (8008b44 <_vfiprintf_r+0x224>)
 8008aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aa4:	2206      	movs	r2, #6
 8008aa6:	f7f7 fb6b 	bl	8000180 <memchr>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d03f      	beq.n	8008b2e <_vfiprintf_r+0x20e>
 8008aae:	4b26      	ldr	r3, [pc, #152]	; (8008b48 <_vfiprintf_r+0x228>)
 8008ab0:	bb1b      	cbnz	r3, 8008afa <_vfiprintf_r+0x1da>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	3307      	adds	r3, #7
 8008ab6:	f023 0307 	bic.w	r3, r3, #7
 8008aba:	3308      	adds	r3, #8
 8008abc:	9303      	str	r3, [sp, #12]
 8008abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac0:	443b      	add	r3, r7
 8008ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac4:	e768      	b.n	8008998 <_vfiprintf_r+0x78>
 8008ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aca:	460c      	mov	r4, r1
 8008acc:	2001      	movs	r0, #1
 8008ace:	e7a6      	b.n	8008a1e <_vfiprintf_r+0xfe>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	3401      	adds	r4, #1
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	f04f 0c0a 	mov.w	ip, #10
 8008adc:	4620      	mov	r0, r4
 8008ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae2:	3a30      	subs	r2, #48	; 0x30
 8008ae4:	2a09      	cmp	r2, #9
 8008ae6:	d903      	bls.n	8008af0 <_vfiprintf_r+0x1d0>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0c6      	beq.n	8008a7a <_vfiprintf_r+0x15a>
 8008aec:	9105      	str	r1, [sp, #20]
 8008aee:	e7c4      	b.n	8008a7a <_vfiprintf_r+0x15a>
 8008af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008af4:	4604      	mov	r4, r0
 8008af6:	2301      	movs	r3, #1
 8008af8:	e7f0      	b.n	8008adc <_vfiprintf_r+0x1bc>
 8008afa:	ab03      	add	r3, sp, #12
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	462a      	mov	r2, r5
 8008b00:	4b12      	ldr	r3, [pc, #72]	; (8008b4c <_vfiprintf_r+0x22c>)
 8008b02:	a904      	add	r1, sp, #16
 8008b04:	4630      	mov	r0, r6
 8008b06:	f7fd fe33 	bl	8006770 <_printf_float>
 8008b0a:	4607      	mov	r7, r0
 8008b0c:	1c78      	adds	r0, r7, #1
 8008b0e:	d1d6      	bne.n	8008abe <_vfiprintf_r+0x19e>
 8008b10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b12:	07d9      	lsls	r1, r3, #31
 8008b14:	d405      	bmi.n	8008b22 <_vfiprintf_r+0x202>
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	059a      	lsls	r2, r3, #22
 8008b1a:	d402      	bmi.n	8008b22 <_vfiprintf_r+0x202>
 8008b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1e:	f7fe fc83 	bl	8007428 <__retarget_lock_release_recursive>
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	065b      	lsls	r3, r3, #25
 8008b26:	f53f af1d 	bmi.w	8008964 <_vfiprintf_r+0x44>
 8008b2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b2c:	e71c      	b.n	8008968 <_vfiprintf_r+0x48>
 8008b2e:	ab03      	add	r3, sp, #12
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	462a      	mov	r2, r5
 8008b34:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <_vfiprintf_r+0x22c>)
 8008b36:	a904      	add	r1, sp, #16
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7fe f8bd 	bl	8006cb8 <_printf_i>
 8008b3e:	e7e4      	b.n	8008b0a <_vfiprintf_r+0x1ea>
 8008b40:	0800948c 	.word	0x0800948c
 8008b44:	08009496 	.word	0x08009496
 8008b48:	08006771 	.word	0x08006771
 8008b4c:	080088fb 	.word	0x080088fb
 8008b50:	08009492 	.word	0x08009492

08008b54 <__sflush_r>:
 8008b54:	898a      	ldrh	r2, [r1, #12]
 8008b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	0710      	lsls	r0, r2, #28
 8008b5e:	460c      	mov	r4, r1
 8008b60:	d458      	bmi.n	8008c14 <__sflush_r+0xc0>
 8008b62:	684b      	ldr	r3, [r1, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dc05      	bgt.n	8008b74 <__sflush_r+0x20>
 8008b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dc02      	bgt.n	8008b74 <__sflush_r+0x20>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	d0f9      	beq.n	8008b6e <__sflush_r+0x1a>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b80:	682f      	ldr	r7, [r5, #0]
 8008b82:	6a21      	ldr	r1, [r4, #32]
 8008b84:	602b      	str	r3, [r5, #0]
 8008b86:	d032      	beq.n	8008bee <__sflush_r+0x9a>
 8008b88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	075a      	lsls	r2, r3, #29
 8008b8e:	d505      	bpl.n	8008b9c <__sflush_r+0x48>
 8008b90:	6863      	ldr	r3, [r4, #4]
 8008b92:	1ac0      	subs	r0, r0, r3
 8008b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b96:	b10b      	cbz	r3, 8008b9c <__sflush_r+0x48>
 8008b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b9a:	1ac0      	subs	r0, r0, r3
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba2:	6a21      	ldr	r1, [r4, #32]
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b0      	blx	r6
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	d106      	bne.n	8008bbc <__sflush_r+0x68>
 8008bae:	6829      	ldr	r1, [r5, #0]
 8008bb0:	291d      	cmp	r1, #29
 8008bb2:	d82b      	bhi.n	8008c0c <__sflush_r+0xb8>
 8008bb4:	4a29      	ldr	r2, [pc, #164]	; (8008c5c <__sflush_r+0x108>)
 8008bb6:	410a      	asrs	r2, r1
 8008bb8:	07d6      	lsls	r6, r2, #31
 8008bba:	d427      	bmi.n	8008c0c <__sflush_r+0xb8>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	6062      	str	r2, [r4, #4]
 8008bc0:	04d9      	lsls	r1, r3, #19
 8008bc2:	6922      	ldr	r2, [r4, #16]
 8008bc4:	6022      	str	r2, [r4, #0]
 8008bc6:	d504      	bpl.n	8008bd2 <__sflush_r+0x7e>
 8008bc8:	1c42      	adds	r2, r0, #1
 8008bca:	d101      	bne.n	8008bd0 <__sflush_r+0x7c>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b903      	cbnz	r3, 8008bd2 <__sflush_r+0x7e>
 8008bd0:	6560      	str	r0, [r4, #84]	; 0x54
 8008bd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd4:	602f      	str	r7, [r5, #0]
 8008bd6:	2900      	cmp	r1, #0
 8008bd8:	d0c9      	beq.n	8008b6e <__sflush_r+0x1a>
 8008bda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bde:	4299      	cmp	r1, r3
 8008be0:	d002      	beq.n	8008be8 <__sflush_r+0x94>
 8008be2:	4628      	mov	r0, r5
 8008be4:	f7ff faaa 	bl	800813c <_free_r>
 8008be8:	2000      	movs	r0, #0
 8008bea:	6360      	str	r0, [r4, #52]	; 0x34
 8008bec:	e7c0      	b.n	8008b70 <__sflush_r+0x1c>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b0      	blx	r6
 8008bf4:	1c41      	adds	r1, r0, #1
 8008bf6:	d1c8      	bne.n	8008b8a <__sflush_r+0x36>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0c5      	beq.n	8008b8a <__sflush_r+0x36>
 8008bfe:	2b1d      	cmp	r3, #29
 8008c00:	d001      	beq.n	8008c06 <__sflush_r+0xb2>
 8008c02:	2b16      	cmp	r3, #22
 8008c04:	d101      	bne.n	8008c0a <__sflush_r+0xb6>
 8008c06:	602f      	str	r7, [r5, #0]
 8008c08:	e7b1      	b.n	8008b6e <__sflush_r+0x1a>
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c10:	81a3      	strh	r3, [r4, #12]
 8008c12:	e7ad      	b.n	8008b70 <__sflush_r+0x1c>
 8008c14:	690f      	ldr	r7, [r1, #16]
 8008c16:	2f00      	cmp	r7, #0
 8008c18:	d0a9      	beq.n	8008b6e <__sflush_r+0x1a>
 8008c1a:	0793      	lsls	r3, r2, #30
 8008c1c:	680e      	ldr	r6, [r1, #0]
 8008c1e:	bf08      	it	eq
 8008c20:	694b      	ldreq	r3, [r1, #20]
 8008c22:	600f      	str	r7, [r1, #0]
 8008c24:	bf18      	it	ne
 8008c26:	2300      	movne	r3, #0
 8008c28:	eba6 0807 	sub.w	r8, r6, r7
 8008c2c:	608b      	str	r3, [r1, #8]
 8008c2e:	f1b8 0f00 	cmp.w	r8, #0
 8008c32:	dd9c      	ble.n	8008b6e <__sflush_r+0x1a>
 8008c34:	6a21      	ldr	r1, [r4, #32]
 8008c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c38:	4643      	mov	r3, r8
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b0      	blx	r6
 8008c40:	2800      	cmp	r0, #0
 8008c42:	dc06      	bgt.n	8008c52 <__sflush_r+0xfe>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	e78e      	b.n	8008b70 <__sflush_r+0x1c>
 8008c52:	4407      	add	r7, r0
 8008c54:	eba8 0800 	sub.w	r8, r8, r0
 8008c58:	e7e9      	b.n	8008c2e <__sflush_r+0xda>
 8008c5a:	bf00      	nop
 8008c5c:	dfbffffe 	.word	0xdfbffffe

08008c60 <_fflush_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	690b      	ldr	r3, [r1, #16]
 8008c64:	4605      	mov	r5, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	b913      	cbnz	r3, 8008c70 <_fflush_r+0x10>
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	b118      	cbz	r0, 8008c7a <_fflush_r+0x1a>
 8008c72:	6a03      	ldr	r3, [r0, #32]
 8008c74:	b90b      	cbnz	r3, 8008c7a <_fflush_r+0x1a>
 8008c76:	f7fe f9cd 	bl	8007014 <__sinit>
 8008c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0f3      	beq.n	8008c6a <_fflush_r+0xa>
 8008c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c84:	07d0      	lsls	r0, r2, #31
 8008c86:	d404      	bmi.n	8008c92 <_fflush_r+0x32>
 8008c88:	0599      	lsls	r1, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_fflush_r+0x32>
 8008c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8e:	f7fe fbca 	bl	8007426 <__retarget_lock_acquire_recursive>
 8008c92:	4628      	mov	r0, r5
 8008c94:	4621      	mov	r1, r4
 8008c96:	f7ff ff5d 	bl	8008b54 <__sflush_r>
 8008c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c9c:	07da      	lsls	r2, r3, #31
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	d4e4      	bmi.n	8008c6c <_fflush_r+0xc>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	059b      	lsls	r3, r3, #22
 8008ca6:	d4e1      	bmi.n	8008c6c <_fflush_r+0xc>
 8008ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008caa:	f7fe fbbd 	bl	8007428 <__retarget_lock_release_recursive>
 8008cae:	e7dd      	b.n	8008c6c <_fflush_r+0xc>

08008cb0 <__swhatbuf_r>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	b096      	sub	sp, #88	; 0x58
 8008cbc:	4615      	mov	r5, r2
 8008cbe:	461e      	mov	r6, r3
 8008cc0:	da0d      	bge.n	8008cde <__swhatbuf_r+0x2e>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cc8:	f04f 0100 	mov.w	r1, #0
 8008ccc:	bf0c      	ite	eq
 8008cce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008cd2:	2340      	movne	r3, #64	; 0x40
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	6031      	str	r1, [r6, #0]
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	b016      	add	sp, #88	; 0x58
 8008cdc:	bd70      	pop	{r4, r5, r6, pc}
 8008cde:	466a      	mov	r2, sp
 8008ce0:	f000 f848 	bl	8008d74 <_fstat_r>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	dbec      	blt.n	8008cc2 <__swhatbuf_r+0x12>
 8008ce8:	9901      	ldr	r1, [sp, #4]
 8008cea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008cee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008cf2:	4259      	negs	r1, r3
 8008cf4:	4159      	adcs	r1, r3
 8008cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cfa:	e7eb      	b.n	8008cd4 <__swhatbuf_r+0x24>

08008cfc <__smakebuf_r>:
 8008cfc:	898b      	ldrh	r3, [r1, #12]
 8008cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d00:	079d      	lsls	r5, r3, #30
 8008d02:	4606      	mov	r6, r0
 8008d04:	460c      	mov	r4, r1
 8008d06:	d507      	bpl.n	8008d18 <__smakebuf_r+0x1c>
 8008d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	6123      	str	r3, [r4, #16]
 8008d10:	2301      	movs	r3, #1
 8008d12:	6163      	str	r3, [r4, #20]
 8008d14:	b002      	add	sp, #8
 8008d16:	bd70      	pop	{r4, r5, r6, pc}
 8008d18:	ab01      	add	r3, sp, #4
 8008d1a:	466a      	mov	r2, sp
 8008d1c:	f7ff ffc8 	bl	8008cb0 <__swhatbuf_r>
 8008d20:	9900      	ldr	r1, [sp, #0]
 8008d22:	4605      	mov	r5, r0
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7fd fbf7 	bl	8006518 <_malloc_r>
 8008d2a:	b948      	cbnz	r0, 8008d40 <__smakebuf_r+0x44>
 8008d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d30:	059a      	lsls	r2, r3, #22
 8008d32:	d4ef      	bmi.n	8008d14 <__smakebuf_r+0x18>
 8008d34:	f023 0303 	bic.w	r3, r3, #3
 8008d38:	f043 0302 	orr.w	r3, r3, #2
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	e7e3      	b.n	8008d08 <__smakebuf_r+0xc>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	6020      	str	r0, [r4, #0]
 8008d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d48:	81a3      	strh	r3, [r4, #12]
 8008d4a:	9b00      	ldr	r3, [sp, #0]
 8008d4c:	6163      	str	r3, [r4, #20]
 8008d4e:	9b01      	ldr	r3, [sp, #4]
 8008d50:	6120      	str	r0, [r4, #16]
 8008d52:	b15b      	cbz	r3, 8008d6c <__smakebuf_r+0x70>
 8008d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f000 f81d 	bl	8008d98 <_isatty_r>
 8008d5e:	b128      	cbz	r0, 8008d6c <__smakebuf_r+0x70>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f023 0303 	bic.w	r3, r3, #3
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	431d      	orrs	r5, r3
 8008d70:	81a5      	strh	r5, [r4, #12]
 8008d72:	e7cf      	b.n	8008d14 <__smakebuf_r+0x18>

08008d74 <_fstat_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d07      	ldr	r5, [pc, #28]	; (8008d94 <_fstat_r+0x20>)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	4611      	mov	r1, r2
 8008d80:	602b      	str	r3, [r5, #0]
 8008d82:	f7fa f8de 	bl	8002f42 <_fstat>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	d102      	bne.n	8008d90 <_fstat_r+0x1c>
 8008d8a:	682b      	ldr	r3, [r5, #0]
 8008d8c:	b103      	cbz	r3, 8008d90 <_fstat_r+0x1c>
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	bd38      	pop	{r3, r4, r5, pc}
 8008d92:	bf00      	nop
 8008d94:	200006f4 	.word	0x200006f4

08008d98 <_isatty_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d06      	ldr	r5, [pc, #24]	; (8008db4 <_isatty_r+0x1c>)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4608      	mov	r0, r1
 8008da2:	602b      	str	r3, [r5, #0]
 8008da4:	f7fa f8dd 	bl	8002f62 <_isatty>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_isatty_r+0x1a>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_isatty_r+0x1a>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	200006f4 	.word	0x200006f4

08008db8 <__assert_func>:
 8008db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dba:	4614      	mov	r4, r2
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <__assert_func+0x2c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	68d8      	ldr	r0, [r3, #12]
 8008dc6:	b14c      	cbz	r4, 8008ddc <__assert_func+0x24>
 8008dc8:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <__assert_func+0x30>)
 8008dca:	9100      	str	r1, [sp, #0]
 8008dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dd0:	4906      	ldr	r1, [pc, #24]	; (8008dec <__assert_func+0x34>)
 8008dd2:	462b      	mov	r3, r5
 8008dd4:	f000 f844 	bl	8008e60 <fiprintf>
 8008dd8:	f000 f854 	bl	8008e84 <abort>
 8008ddc:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <__assert_func+0x38>)
 8008dde:	461c      	mov	r4, r3
 8008de0:	e7f3      	b.n	8008dca <__assert_func+0x12>
 8008de2:	bf00      	nop
 8008de4:	2000006c 	.word	0x2000006c
 8008de8:	080094a7 	.word	0x080094a7
 8008dec:	080094b4 	.word	0x080094b4
 8008df0:	080094e2 	.word	0x080094e2

08008df4 <_calloc_r>:
 8008df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df6:	fba1 2402 	umull	r2, r4, r1, r2
 8008dfa:	b94c      	cbnz	r4, 8008e10 <_calloc_r+0x1c>
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	9201      	str	r2, [sp, #4]
 8008e00:	f7fd fb8a 	bl	8006518 <_malloc_r>
 8008e04:	9a01      	ldr	r2, [sp, #4]
 8008e06:	4605      	mov	r5, r0
 8008e08:	b930      	cbnz	r0, 8008e18 <_calloc_r+0x24>
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	b003      	add	sp, #12
 8008e0e:	bd30      	pop	{r4, r5, pc}
 8008e10:	220c      	movs	r2, #12
 8008e12:	6002      	str	r2, [r0, #0]
 8008e14:	2500      	movs	r5, #0
 8008e16:	e7f8      	b.n	8008e0a <_calloc_r+0x16>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f7fe fa77 	bl	800730c <memset>
 8008e1e:	e7f4      	b.n	8008e0a <_calloc_r+0x16>

08008e20 <__ascii_mbtowc>:
 8008e20:	b082      	sub	sp, #8
 8008e22:	b901      	cbnz	r1, 8008e26 <__ascii_mbtowc+0x6>
 8008e24:	a901      	add	r1, sp, #4
 8008e26:	b142      	cbz	r2, 8008e3a <__ascii_mbtowc+0x1a>
 8008e28:	b14b      	cbz	r3, 8008e3e <__ascii_mbtowc+0x1e>
 8008e2a:	7813      	ldrb	r3, [r2, #0]
 8008e2c:	600b      	str	r3, [r1, #0]
 8008e2e:	7812      	ldrb	r2, [r2, #0]
 8008e30:	1e10      	subs	r0, r2, #0
 8008e32:	bf18      	it	ne
 8008e34:	2001      	movne	r0, #1
 8008e36:	b002      	add	sp, #8
 8008e38:	4770      	bx	lr
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	e7fb      	b.n	8008e36 <__ascii_mbtowc+0x16>
 8008e3e:	f06f 0001 	mvn.w	r0, #1
 8008e42:	e7f8      	b.n	8008e36 <__ascii_mbtowc+0x16>

08008e44 <__ascii_wctomb>:
 8008e44:	b149      	cbz	r1, 8008e5a <__ascii_wctomb+0x16>
 8008e46:	2aff      	cmp	r2, #255	; 0xff
 8008e48:	bf85      	ittet	hi
 8008e4a:	238a      	movhi	r3, #138	; 0x8a
 8008e4c:	6003      	strhi	r3, [r0, #0]
 8008e4e:	700a      	strbls	r2, [r1, #0]
 8008e50:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e54:	bf98      	it	ls
 8008e56:	2001      	movls	r0, #1
 8008e58:	4770      	bx	lr
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	4770      	bx	lr
	...

08008e60 <fiprintf>:
 8008e60:	b40e      	push	{r1, r2, r3}
 8008e62:	b503      	push	{r0, r1, lr}
 8008e64:	4601      	mov	r1, r0
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	4805      	ldr	r0, [pc, #20]	; (8008e80 <fiprintf+0x20>)
 8008e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6e:	6800      	ldr	r0, [r0, #0]
 8008e70:	9301      	str	r3, [sp, #4]
 8008e72:	f7ff fd55 	bl	8008920 <_vfiprintf_r>
 8008e76:	b002      	add	sp, #8
 8008e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e7c:	b003      	add	sp, #12
 8008e7e:	4770      	bx	lr
 8008e80:	2000006c 	.word	0x2000006c

08008e84 <abort>:
 8008e84:	b508      	push	{r3, lr}
 8008e86:	2006      	movs	r0, #6
 8008e88:	f000 f82c 	bl	8008ee4 <raise>
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f7fa f809 	bl	8002ea4 <_exit>

08008e92 <_raise_r>:
 8008e92:	291f      	cmp	r1, #31
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4604      	mov	r4, r0
 8008e98:	460d      	mov	r5, r1
 8008e9a:	d904      	bls.n	8008ea6 <_raise_r+0x14>
 8008e9c:	2316      	movs	r3, #22
 8008e9e:	6003      	str	r3, [r0, #0]
 8008ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea4:	bd38      	pop	{r3, r4, r5, pc}
 8008ea6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ea8:	b112      	cbz	r2, 8008eb0 <_raise_r+0x1e>
 8008eaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008eae:	b94b      	cbnz	r3, 8008ec4 <_raise_r+0x32>
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 f831 	bl	8008f18 <_getpid_r>
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4601      	mov	r1, r0
 8008eba:	4620      	mov	r0, r4
 8008ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ec0:	f000 b818 	b.w	8008ef4 <_kill_r>
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d00a      	beq.n	8008ede <_raise_r+0x4c>
 8008ec8:	1c59      	adds	r1, r3, #1
 8008eca:	d103      	bne.n	8008ed4 <_raise_r+0x42>
 8008ecc:	2316      	movs	r3, #22
 8008ece:	6003      	str	r3, [r0, #0]
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	e7e7      	b.n	8008ea4 <_raise_r+0x12>
 8008ed4:	2400      	movs	r4, #0
 8008ed6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008eda:	4628      	mov	r0, r5
 8008edc:	4798      	blx	r3
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e7e0      	b.n	8008ea4 <_raise_r+0x12>
	...

08008ee4 <raise>:
 8008ee4:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <raise+0xc>)
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	f7ff bfd2 	b.w	8008e92 <_raise_r>
 8008eee:	bf00      	nop
 8008ef0:	2000006c 	.word	0x2000006c

08008ef4 <_kill_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	; (8008f14 <_kill_r+0x20>)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	4611      	mov	r1, r2
 8008f00:	602b      	str	r3, [r5, #0]
 8008f02:	f7f9 ffbf 	bl	8002e84 <_kill>
 8008f06:	1c43      	adds	r3, r0, #1
 8008f08:	d102      	bne.n	8008f10 <_kill_r+0x1c>
 8008f0a:	682b      	ldr	r3, [r5, #0]
 8008f0c:	b103      	cbz	r3, 8008f10 <_kill_r+0x1c>
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
 8008f12:	bf00      	nop
 8008f14:	200006f4 	.word	0x200006f4

08008f18 <_getpid_r>:
 8008f18:	f7f9 bfac 	b.w	8002e74 <_getpid>

08008f1c <roundf>:
 8008f1c:	ee10 0a10 	vmov	r0, s0
 8008f20:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008f24:	3a7f      	subs	r2, #127	; 0x7f
 8008f26:	2a16      	cmp	r2, #22
 8008f28:	dc15      	bgt.n	8008f56 <roundf+0x3a>
 8008f2a:	2a00      	cmp	r2, #0
 8008f2c:	da08      	bge.n	8008f40 <roundf+0x24>
 8008f2e:	3201      	adds	r2, #1
 8008f30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008f34:	d101      	bne.n	8008f3a <roundf+0x1e>
 8008f36:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8008f3a:	ee00 3a10 	vmov	s0, r3
 8008f3e:	4770      	bx	lr
 8008f40:	4907      	ldr	r1, [pc, #28]	; (8008f60 <roundf+0x44>)
 8008f42:	4111      	asrs	r1, r2
 8008f44:	4208      	tst	r0, r1
 8008f46:	d0fa      	beq.n	8008f3e <roundf+0x22>
 8008f48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f4c:	4113      	asrs	r3, r2
 8008f4e:	4403      	add	r3, r0
 8008f50:	ea23 0301 	bic.w	r3, r3, r1
 8008f54:	e7f1      	b.n	8008f3a <roundf+0x1e>
 8008f56:	2a80      	cmp	r2, #128	; 0x80
 8008f58:	d1f1      	bne.n	8008f3e <roundf+0x22>
 8008f5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008f5e:	4770      	bx	lr
 8008f60:	007fffff 	.word	0x007fffff

08008f64 <_init>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	bf00      	nop
 8008f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6a:	bc08      	pop	{r3}
 8008f6c:	469e      	mov	lr, r3
 8008f6e:	4770      	bx	lr

08008f70 <_fini>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	bf00      	nop
 8008f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f76:	bc08      	pop	{r3}
 8008f78:	469e      	mov	lr, r3
 8008f7a:	4770      	bx	lr
